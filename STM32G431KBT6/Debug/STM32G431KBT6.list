
STM32G431KBT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ca4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08003e7c  08003e7c  00013e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eb8  08003eb8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003eb8  08003eb8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003eb8  08003eb8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eb8  08003eb8  00013eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ebc  08003ebc  00013ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  08003ecc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08003ecc  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c2e1  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002148  00000000  00000000  0002c360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca0  00000000  00000000  0002e4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000099d  00000000  00000000  0002f148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d947  00000000  00000000  0002fae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ec53  00000000  00000000  0004d42c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9c4e  00000000  00000000  0005c07f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000330c  00000000  00000000  00115cd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00118fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003e64 	.word	0x08003e64

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003e64 	.word	0x08003e64

08000218 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x7E // change this according to ur setup  //4E for PCF8574 and 7E for PCF8574A (2 line display)

void lcd_send_cmd (char cmd)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af02      	add	r7, sp, #8
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	f023 030f 	bic.w	r3, r3, #15
 8000228:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	011b      	lsls	r3, r3, #4
 800022e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000230:	7bfb      	ldrb	r3, [r7, #15]
 8000232:	f043 030c 	orr.w	r3, r3, #12
 8000236:	b2db      	uxtb	r3, r3
 8000238:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800023a:	7bfb      	ldrb	r3, [r7, #15]
 800023c:	f043 0308 	orr.w	r3, r3, #8
 8000240:	b2db      	uxtb	r3, r3
 8000242:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000244:	7bbb      	ldrb	r3, [r7, #14]
 8000246:	f043 030c 	orr.w	r3, r3, #12
 800024a:	b2db      	uxtb	r3, r3
 800024c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800024e:	7bbb      	ldrb	r3, [r7, #14]
 8000250:	f043 0308 	orr.w	r3, r3, #8
 8000254:	b2db      	uxtb	r3, r3
 8000256:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000258:	f107 0208 	add.w	r2, r7, #8
 800025c:	2364      	movs	r3, #100	; 0x64
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	2304      	movs	r3, #4
 8000262:	217e      	movs	r1, #126	; 0x7e
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <lcd_send_cmd+0x5c>)
 8000266:	f000 ffbf 	bl	80011e8 <HAL_I2C_Master_Transmit>
}
 800026a:	bf00      	nop
 800026c:	3710      	adds	r7, #16
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	20000028 	.word	0x20000028

08000278 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b086      	sub	sp, #24
 800027c:	af02      	add	r7, sp, #8
 800027e:	4603      	mov	r3, r0
 8000280:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	f023 030f 	bic.w	r3, r3, #15
 8000288:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	011b      	lsls	r3, r3, #4
 800028e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000290:	7bfb      	ldrb	r3, [r7, #15]
 8000292:	f043 030d 	orr.w	r3, r3, #13
 8000296:	b2db      	uxtb	r3, r3
 8000298:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800029a:	7bfb      	ldrb	r3, [r7, #15]
 800029c:	f043 0309 	orr.w	r3, r3, #9
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80002a4:	7bbb      	ldrb	r3, [r7, #14]
 80002a6:	f043 030d 	orr.w	r3, r3, #13
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80002ae:	7bbb      	ldrb	r3, [r7, #14]
 80002b0:	f043 0309 	orr.w	r3, r3, #9
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002b8:	f107 0208 	add.w	r2, r7, #8
 80002bc:	2364      	movs	r3, #100	; 0x64
 80002be:	9300      	str	r3, [sp, #0]
 80002c0:	2304      	movs	r3, #4
 80002c2:	217e      	movs	r1, #126	; 0x7e
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <lcd_send_data+0x5c>)
 80002c6:	f000 ff8f 	bl	80011e8 <HAL_I2C_Master_Transmit>
}
 80002ca:	bf00      	nop
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000028 	.word	0x20000028

080002d8 <lcd_clear>:

void lcd_clear (void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80002de:	2080      	movs	r0, #128	; 0x80
 80002e0:	f7ff ff9a 	bl	8000218 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80002e4:	2300      	movs	r3, #0
 80002e6:	607b      	str	r3, [r7, #4]
 80002e8:	e005      	b.n	80002f6 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80002ea:	2020      	movs	r0, #32
 80002ec:	f7ff ffc4 	bl	8000278 <lcd_send_data>
	for (int i=0; i<70; i++)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	3301      	adds	r3, #1
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2b45      	cmp	r3, #69	; 0x45
 80002fa:	ddf6      	ble.n	80002ea <lcd_clear+0x12>
	}
}
 80002fc:	bf00      	nop
 80002fe:	bf00      	nop
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}

08000306 <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 8000306:	b580      	push	{r7, lr}
 8000308:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800030a:	2032      	movs	r0, #50	; 0x32
 800030c:	f000 fbe0 	bl	8000ad0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000310:	2030      	movs	r0, #48	; 0x30
 8000312:	f7ff ff81 	bl	8000218 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000316:	2005      	movs	r0, #5
 8000318:	f000 fbda 	bl	8000ad0 <HAL_Delay>
	lcd_send_cmd (0x30);
 800031c:	2030      	movs	r0, #48	; 0x30
 800031e:	f7ff ff7b 	bl	8000218 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000322:	2001      	movs	r0, #1
 8000324:	f000 fbd4 	bl	8000ad0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000328:	2030      	movs	r0, #48	; 0x30
 800032a:	f7ff ff75 	bl	8000218 <lcd_send_cmd>
	HAL_Delay(10);
 800032e:	200a      	movs	r0, #10
 8000330:	f000 fbce 	bl	8000ad0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000334:	2020      	movs	r0, #32
 8000336:	f7ff ff6f 	bl	8000218 <lcd_send_cmd>
	HAL_Delay(10);
 800033a:	200a      	movs	r0, #10
 800033c:	f000 fbc8 	bl	8000ad0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000340:	2028      	movs	r0, #40	; 0x28
 8000342:	f7ff ff69 	bl	8000218 <lcd_send_cmd>
	HAL_Delay(1);
 8000346:	2001      	movs	r0, #1
 8000348:	f000 fbc2 	bl	8000ad0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800034c:	2008      	movs	r0, #8
 800034e:	f7ff ff63 	bl	8000218 <lcd_send_cmd>
	HAL_Delay(1);
 8000352:	2001      	movs	r0, #1
 8000354:	f000 fbbc 	bl	8000ad0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000358:	2001      	movs	r0, #1
 800035a:	f7ff ff5d 	bl	8000218 <lcd_send_cmd>
	HAL_Delay(1);
 800035e:	2001      	movs	r0, #1
 8000360:	f000 fbb6 	bl	8000ad0 <HAL_Delay>
	HAL_Delay(1);
 8000364:	2001      	movs	r0, #1
 8000366:	f000 fbb3 	bl	8000ad0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800036a:	2006      	movs	r0, #6
 800036c:	f7ff ff54 	bl	8000218 <lcd_send_cmd>
	HAL_Delay(1);
 8000370:	2001      	movs	r0, #1
 8000372:	f000 fbad 	bl	8000ad0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000376:	200c      	movs	r0, #12
 8000378:	f7ff ff4e 	bl	8000218 <lcd_send_cmd>
}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}

08000380 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000388:	e006      	b.n	8000398 <lcd_send_string+0x18>
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	1c5a      	adds	r2, r3, #1
 800038e:	607a      	str	r2, [r7, #4]
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ff70 	bl	8000278 <lcd_send_data>
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d1f4      	bne.n	800038a <lcd_send_string+0xa>
}
 80003a0:	bf00      	nop
 80003a2:	bf00      	nop
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
	...

080003ac <set_time>:
	lcd_put_cur(1, 0);
	lcd_send_string(date);
}

void set_time (void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
    /**Initialize RTC and set the Time and Date
    */
  sTime.Hours = 0x10;
 80003b0:	4b1b      	ldr	r3, [pc, #108]	; (8000420 <set_time+0x74>)
 80003b2:	2210      	movs	r2, #16
 80003b4:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x52;
 80003b6:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <set_time+0x74>)
 80003b8:	2252      	movs	r2, #82	; 0x52
 80003ba:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x00;
 80003bc:	4b18      	ldr	r3, [pc, #96]	; (8000420 <set_time+0x74>)
 80003be:	2200      	movs	r2, #0
 80003c0:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80003c2:	4b17      	ldr	r3, [pc, #92]	; (8000420 <set_time+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <set_time+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80003ce:	2201      	movs	r2, #1
 80003d0:	4913      	ldr	r1, [pc, #76]	; (8000420 <set_time+0x74>)
 80003d2:	4814      	ldr	r0, [pc, #80]	; (8000424 <set_time+0x78>)
 80003d4:	f003 fb1f 	bl	8003a16 <HAL_RTC_SetTime>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <set_time+0x36>
   {
     Error_Handler();
 80003de:	f000 f967 	bl	80006b0 <Error_Handler>
   }

  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80003e2:	4b11      	ldr	r3, [pc, #68]	; (8000428 <set_time+0x7c>)
 80003e4:	2203      	movs	r2, #3
 80003e6:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <set_time+0x7c>)
 80003ea:	2208      	movs	r2, #8
 80003ec:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x09;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <set_time+0x7c>)
 80003f0:	2209      	movs	r2, #9
 80003f2:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x23;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <set_time+0x7c>)
 80003f6:	2223      	movs	r2, #35	; 0x23
 80003f8:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80003fa:	2201      	movs	r2, #1
 80003fc:	490a      	ldr	r1, [pc, #40]	; (8000428 <set_time+0x7c>)
 80003fe:	4809      	ldr	r0, [pc, #36]	; (8000424 <set_time+0x78>)
 8000400:	f003 fba6 	bl	8003b50 <HAL_RTC_SetDate>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <set_time+0x62>
  {
    Error_Handler();
 800040a:	f000 f951 	bl	80006b0 <Error_Handler>
  }

  /* USER CODE BEGIN RTC_Init 4 */

  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);  // backup register
 800040e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000412:	2101      	movs	r1, #1
 8000414:	4803      	ldr	r0, [pc, #12]	; (8000424 <set_time+0x78>)
 8000416:	f003 fce1 	bl	8003ddc <HAL_RTCEx_BKUPWrite>

  /* USER CODE END RTC_Init 4 */
}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	200000e8 	.word	0x200000e8
 8000424:	200000c0 	.word	0x200000c0
 8000428:	200000fc 	.word	0x200000fc

0800042c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000430:	f000 fadd 	bl	80009ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000434:	f000 f81e 	bl	8000474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000438:	f000 f90a 	bl	8000650 <MX_GPIO_Init>
  MX_I2C1_Init();
 800043c:	f000 f85c 	bl	80004f8 <MX_I2C1_Init>
  MX_RTC_Init();
 8000440:	f000 f8da 	bl	80005f8 <MX_RTC_Init>
  MX_I2C2_Init();
 8000444:	f000 f898 	bl	8000578 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000448:	f7ff ff5d 	bl	8000306 <lcd_init>
  lcd_send_string("<<init>>");
 800044c:	4806      	ldr	r0, [pc, #24]	; (8000468 <main+0x3c>)
 800044e:	f7ff ff97 	bl	8000380 <lcd_send_string>
  lcd_clear();
 8000452:	f7ff ff41 	bl	80002d8 <lcd_clear>
  set_time();
 8000456:	f7ff ffa9 	bl	80003ac <set_time>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_I2C_Slave_Receive_IT(&hi2c2, (uint8_t *) data, 8);
 800045a:	2208      	movs	r2, #8
 800045c:	4903      	ldr	r1, [pc, #12]	; (800046c <main+0x40>)
 800045e:	4804      	ldr	r0, [pc, #16]	; (8000470 <main+0x44>)
 8000460:	f000 ffb6 	bl	80013d0 <HAL_I2C_Slave_Receive_IT>
 8000464:	e7f9      	b.n	800045a <main+0x2e>
 8000466:	bf00      	nop
 8000468:	08003e9c 	.word	0x08003e9c
 800046c:	20000100 	.word	0x20000100
 8000470:	20000074 	.word	0x20000074

08000474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b094      	sub	sp, #80	; 0x50
 8000478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047a:	f107 0318 	add.w	r3, r7, #24
 800047e:	2238      	movs	r2, #56	; 0x38
 8000480:	2100      	movs	r1, #0
 8000482:	4618      	mov	r0, r3
 8000484:	f003 fcc2 	bl	8003e0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]
 8000494:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000496:	f44f 7000 	mov.w	r0, #512	; 0x200
 800049a:	f002 fab7 	bl	8002a0c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800049e:	230a      	movs	r3, #10
 80004a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004a8:	2340      	movs	r3, #64	; 0x40
 80004aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80004ac:	2301      	movs	r3, #1
 80004ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004b0:	2300      	movs	r3, #0
 80004b2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b4:	f107 0318 	add.w	r3, r7, #24
 80004b8:	4618      	mov	r0, r3
 80004ba:	f002 fb4b 	bl	8002b54 <HAL_RCC_OscConfig>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80004c4:	f000 f8f4 	bl	80006b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c8:	230f      	movs	r3, #15
 80004ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004cc:	2301      	movs	r3, #1
 80004ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004d4:	2300      	movs	r3, #0
 80004d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004d8:	2300      	movs	r3, #0
 80004da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2100      	movs	r1, #0
 80004e0:	4618      	mov	r0, r3
 80004e2:	f002 fe4f 	bl	8003184 <HAL_RCC_ClockConfig>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80004ec:	f000 f8e0 	bl	80006b0 <Error_Handler>
  }
}
 80004f0:	bf00      	nop
 80004f2:	3750      	adds	r7, #80	; 0x50
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004fc:	4b1b      	ldr	r3, [pc, #108]	; (800056c <MX_I2C1_Init+0x74>)
 80004fe:	4a1c      	ldr	r2, [pc, #112]	; (8000570 <MX_I2C1_Init+0x78>)
 8000500:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000502:	4b1a      	ldr	r3, [pc, #104]	; (800056c <MX_I2C1_Init+0x74>)
 8000504:	4a1b      	ldr	r2, [pc, #108]	; (8000574 <MX_I2C1_Init+0x7c>)
 8000506:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <MX_I2C1_Init+0x74>)
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800050e:	4b17      	ldr	r3, [pc, #92]	; (800056c <MX_I2C1_Init+0x74>)
 8000510:	2201      	movs	r2, #1
 8000512:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000514:	4b15      	ldr	r3, [pc, #84]	; (800056c <MX_I2C1_Init+0x74>)
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800051a:	4b14      	ldr	r3, [pc, #80]	; (800056c <MX_I2C1_Init+0x74>)
 800051c:	2200      	movs	r2, #0
 800051e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <MX_I2C1_Init+0x74>)
 8000522:	2200      	movs	r2, #0
 8000524:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000526:	4b11      	ldr	r3, [pc, #68]	; (800056c <MX_I2C1_Init+0x74>)
 8000528:	2200      	movs	r2, #0
 800052a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <MX_I2C1_Init+0x74>)
 800052e:	2200      	movs	r2, #0
 8000530:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000532:	480e      	ldr	r0, [pc, #56]	; (800056c <MX_I2C1_Init+0x74>)
 8000534:	f000 fdc8 	bl	80010c8 <HAL_I2C_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800053e:	f000 f8b7 	bl	80006b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000542:	2100      	movs	r1, #0
 8000544:	4809      	ldr	r0, [pc, #36]	; (800056c <MX_I2C1_Init+0x74>)
 8000546:	f002 f9c9 	bl	80028dc <HAL_I2CEx_ConfigAnalogFilter>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000550:	f000 f8ae 	bl	80006b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000554:	2100      	movs	r1, #0
 8000556:	4805      	ldr	r0, [pc, #20]	; (800056c <MX_I2C1_Init+0x74>)
 8000558:	f002 fa0b 	bl	8002972 <HAL_I2CEx_ConfigDigitalFilter>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000562:	f000 f8a5 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000028 	.word	0x20000028
 8000570:	40005400 	.word	0x40005400
 8000574:	00303d5b 	.word	0x00303d5b

08000578 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800057c:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <MX_I2C2_Init+0x74>)
 800057e:	4a1c      	ldr	r2, [pc, #112]	; (80005f0 <MX_I2C2_Init+0x78>)
 8000580:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000582:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <MX_I2C2_Init+0x74>)
 8000584:	4a1b      	ldr	r2, [pc, #108]	; (80005f4 <MX_I2C2_Init+0x7c>)
 8000586:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000588:	4b18      	ldr	r3, [pc, #96]	; (80005ec <MX_I2C2_Init+0x74>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800058e:	4b17      	ldr	r3, [pc, #92]	; (80005ec <MX_I2C2_Init+0x74>)
 8000590:	2201      	movs	r2, #1
 8000592:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000594:	4b15      	ldr	r3, [pc, #84]	; (80005ec <MX_I2C2_Init+0x74>)
 8000596:	2200      	movs	r2, #0
 8000598:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800059a:	4b14      	ldr	r3, [pc, #80]	; (80005ec <MX_I2C2_Init+0x74>)
 800059c:	2200      	movs	r2, #0
 800059e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <MX_I2C2_Init+0x74>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <MX_I2C2_Init+0x74>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <MX_I2C2_Init+0x74>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80005b2:	480e      	ldr	r0, [pc, #56]	; (80005ec <MX_I2C2_Init+0x74>)
 80005b4:	f000 fd88 	bl	80010c8 <HAL_I2C_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80005be:	f000 f877 	bl	80006b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005c2:	2100      	movs	r1, #0
 80005c4:	4809      	ldr	r0, [pc, #36]	; (80005ec <MX_I2C2_Init+0x74>)
 80005c6:	f002 f989 	bl	80028dc <HAL_I2CEx_ConfigAnalogFilter>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80005d0:	f000 f86e 	bl	80006b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80005d4:	2100      	movs	r1, #0
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <MX_I2C2_Init+0x74>)
 80005d8:	f002 f9cb 	bl	8002972 <HAL_I2CEx_ConfigDigitalFilter>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80005e2:	f000 f865 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000074 	.word	0x20000074
 80005f0:	40005800 	.word	0x40005800
 80005f4:	00303d5b 	.word	0x00303d5b

080005f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_RTC_Init+0x50>)
 80005fe:	4a13      	ldr	r2, [pc, #76]	; (800064c <MX_RTC_Init+0x54>)
 8000600:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_RTC_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_RTC_Init+0x50>)
 800060a:	227f      	movs	r2, #127	; 0x7f
 800060c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_RTC_Init+0x50>)
 8000610:	22ff      	movs	r2, #255	; 0xff
 8000612:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_RTC_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_RTC_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_RTC_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_RTC_Init+0x50>)
 8000628:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800062c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_RTC_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_RTC_Init+0x50>)
 8000636:	f003 f979 	bl	800392c <HAL_RTC_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000640:	f000 f836 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000c0 	.word	0x200000c0
 800064c:	40002800 	.word	0x40002800

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_GPIO_Init+0x5c>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	4a14      	ldr	r2, [pc, #80]	; (80006ac <MX_GPIO_Init+0x5c>)
 800065c:	f043 0320 	orr.w	r3, r3, #32
 8000660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_GPIO_Init+0x5c>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	f003 0320 	and.w	r3, r3, #32
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_GPIO_Init+0x5c>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	4a0e      	ldr	r2, [pc, #56]	; (80006ac <MX_GPIO_Init+0x5c>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_GPIO_Init+0x5c>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_GPIO_Init+0x5c>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	4a08      	ldr	r2, [pc, #32]	; (80006ac <MX_GPIO_Init+0x5c>)
 800068c:	f043 0302 	orr.w	r3, r3, #2
 8000690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_GPIO_Init+0x5c>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	f003 0302 	and.w	r3, r3, #2
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800069e:	bf00      	nop
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
}
 80006b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <Error_Handler+0x8>
	...

080006bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <HAL_MspInit+0x44>)
 80006c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006c6:	4a0e      	ldr	r2, [pc, #56]	; (8000700 <HAL_MspInit+0x44>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6613      	str	r3, [r2, #96]	; 0x60
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <HAL_MspInit+0x44>)
 80006d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <HAL_MspInit+0x44>)
 80006dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <HAL_MspInit+0x44>)
 80006e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e4:	6593      	str	r3, [r2, #88]	; 0x58
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_MspInit+0x44>)
 80006e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000

08000704 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b09e      	sub	sp, #120	; 0x78
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800071c:	f107 0320 	add.w	r3, r7, #32
 8000720:	2244      	movs	r2, #68	; 0x44
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f003 fb71 	bl	8003e0c <memset>
  if(hi2c->Instance==I2C1)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a5a      	ldr	r2, [pc, #360]	; (8000898 <HAL_I2C_MspInit+0x194>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d154      	bne.n	80007de <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000734:	2340      	movs	r3, #64	; 0x40
 8000736:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000738:	2300      	movs	r3, #0
 800073a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	4618      	mov	r0, r3
 8000742:	f002 ff03 	bl	800354c <HAL_RCCEx_PeriphCLKConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800074c:	f7ff ffb0 	bl	80006b0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	4b52      	ldr	r3, [pc, #328]	; (800089c <HAL_I2C_MspInit+0x198>)
 8000752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000754:	4a51      	ldr	r2, [pc, #324]	; (800089c <HAL_I2C_MspInit+0x198>)
 8000756:	f043 0301 	orr.w	r3, r3, #1
 800075a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075c:	4b4f      	ldr	r3, [pc, #316]	; (800089c <HAL_I2C_MspInit+0x198>)
 800075e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	61fb      	str	r3, [r7, #28]
 8000766:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000768:	4b4c      	ldr	r3, [pc, #304]	; (800089c <HAL_I2C_MspInit+0x198>)
 800076a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076c:	4a4b      	ldr	r2, [pc, #300]	; (800089c <HAL_I2C_MspInit+0x198>)
 800076e:	f043 0302 	orr.w	r3, r3, #2
 8000772:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000774:	4b49      	ldr	r3, [pc, #292]	; (800089c <HAL_I2C_MspInit+0x198>)
 8000776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000778:	f003 0302 	and.w	r3, r3, #2
 800077c:	61bb      	str	r3, [r7, #24]
 800077e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000780:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000784:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000786:	2312      	movs	r3, #18
 8000788:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000792:	2304      	movs	r3, #4
 8000794:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800079a:	4619      	mov	r1, r3
 800079c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a0:	f000 fb10 	bl	8000dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007a8:	2312      	movs	r3, #18
 80007aa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007b4:	2304      	movs	r3, #4
 80007b6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80007bc:	4619      	mov	r1, r3
 80007be:	4838      	ldr	r0, [pc, #224]	; (80008a0 <HAL_I2C_MspInit+0x19c>)
 80007c0:	f000 fb00 	bl	8000dc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007c4:	4b35      	ldr	r3, [pc, #212]	; (800089c <HAL_I2C_MspInit+0x198>)
 80007c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c8:	4a34      	ldr	r2, [pc, #208]	; (800089c <HAL_I2C_MspInit+0x198>)
 80007ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007ce:	6593      	str	r3, [r2, #88]	; 0x58
 80007d0:	4b32      	ldr	r3, [pc, #200]	; (800089c <HAL_I2C_MspInit+0x198>)
 80007d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80007dc:	e058      	b.n	8000890 <HAL_I2C_MspInit+0x18c>
  else if(hi2c->Instance==I2C2)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a30      	ldr	r2, [pc, #192]	; (80008a4 <HAL_I2C_MspInit+0x1a0>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d153      	bne.n	8000890 <HAL_I2C_MspInit+0x18c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f0:	f107 0320 	add.w	r3, r7, #32
 80007f4:	4618      	mov	r0, r3
 80007f6:	f002 fea9 	bl	800354c <HAL_RCCEx_PeriphCLKConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <HAL_I2C_MspInit+0x100>
      Error_Handler();
 8000800:	f7ff ff56 	bl	80006b0 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000804:	4b25      	ldr	r3, [pc, #148]	; (800089c <HAL_I2C_MspInit+0x198>)
 8000806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000808:	4a24      	ldr	r2, [pc, #144]	; (800089c <HAL_I2C_MspInit+0x198>)
 800080a:	f043 0320 	orr.w	r3, r3, #32
 800080e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000810:	4b22      	ldr	r3, [pc, #136]	; (800089c <HAL_I2C_MspInit+0x198>)
 8000812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000814:	f003 0320 	and.w	r3, r3, #32
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	4b1f      	ldr	r3, [pc, #124]	; (800089c <HAL_I2C_MspInit+0x198>)
 800081e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000820:	4a1e      	ldr	r2, [pc, #120]	; (800089c <HAL_I2C_MspInit+0x198>)
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000828:	4b1c      	ldr	r3, [pc, #112]	; (800089c <HAL_I2C_MspInit+0x198>)
 800082a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082c:	f003 0301 	and.w	r3, r3, #1
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000834:	2301      	movs	r3, #1
 8000836:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000838:	2312      	movs	r3, #18
 800083a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000844:	2304      	movs	r3, #4
 8000846:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000848:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800084c:	4619      	mov	r1, r3
 800084e:	4816      	ldr	r0, [pc, #88]	; (80008a8 <HAL_I2C_MspInit+0x1a4>)
 8000850:	f000 fab8 	bl	8000dc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000854:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000858:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800085a:	2312      	movs	r3, #18
 800085c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000866:	2304      	movs	r3, #4
 8000868:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800086e:	4619      	mov	r1, r3
 8000870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000874:	f000 faa6 	bl	8000dc4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <HAL_I2C_MspInit+0x198>)
 800087a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087c:	4a07      	ldr	r2, [pc, #28]	; (800089c <HAL_I2C_MspInit+0x198>)
 800087e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000882:	6593      	str	r3, [r2, #88]	; 0x58
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <HAL_I2C_MspInit+0x198>)
 8000886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000888:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
}
 8000890:	bf00      	nop
 8000892:	3778      	adds	r7, #120	; 0x78
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40005400 	.word	0x40005400
 800089c:	40021000 	.word	0x40021000
 80008a0:	48000400 	.word	0x48000400
 80008a4:	40005800 	.word	0x40005800
 80008a8:	48001400 	.word	0x48001400

080008ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b094      	sub	sp, #80	; 0x50
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	2244      	movs	r2, #68	; 0x44
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f003 faa5 	bl	8003e0c <memset>
  if(hrtc->Instance==RTC)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a15      	ldr	r2, [pc, #84]	; (800091c <HAL_RTC_MspInit+0x70>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d123      	bne.n	8000914 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80008d0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008d6:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	4618      	mov	r0, r3
 80008de:	f002 fe35 	bl	800354c <HAL_RCCEx_PeriphCLKConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80008e8:	f7ff fee2 	bl	80006b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <HAL_RTC_MspInit+0x74>)
 80008ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008f2:	4a0b      	ldr	r2, [pc, #44]	; (8000920 <HAL_RTC_MspInit+0x74>)
 80008f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <HAL_RTC_MspInit+0x74>)
 80008fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000900:	4a07      	ldr	r2, [pc, #28]	; (8000920 <HAL_RTC_MspInit+0x74>)
 8000902:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000906:	6593      	str	r3, [r2, #88]	; 0x58
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <HAL_RTC_MspInit+0x74>)
 800090a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000914:	bf00      	nop
 8000916:	3750      	adds	r7, #80	; 0x50
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40002800 	.word	0x40002800
 8000920:	40021000 	.word	0x40021000

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <NMI_Handler+0x4>

0800092a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <HardFault_Handler+0x4>

08000930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <MemManage_Handler+0x4>

08000936 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <BusFault_Handler+0x4>

0800093c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <UsageFault_Handler+0x4>

08000942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000970:	f000 f890 	bl	8000a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}

08000978 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <SystemInit+0x20>)
 800097e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000982:	4a05      	ldr	r2, [pc, #20]	; (8000998 <SystemInit+0x20>)
 8000984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800099c:	480d      	ldr	r0, [pc, #52]	; (80009d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800099e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a0:	480d      	ldr	r0, [pc, #52]	; (80009d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009a2:	490e      	ldr	r1, [pc, #56]	; (80009dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <LoopForever+0xe>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b8:	4c0b      	ldr	r4, [pc, #44]	; (80009e8 <LoopForever+0x16>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009c6:	f7ff ffd7 	bl	8000978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ca:	f003 fa27 	bl	8003e1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ce:	f7ff fd2d 	bl	800042c <main>

080009d2 <LoopForever>:

LoopForever:
    b LoopForever
 80009d2:	e7fe      	b.n	80009d2 <LoopForever>
  ldr   r0, =_estack
 80009d4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80009d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009e0:	08003ec0 	.word	0x08003ec0
  ldr r2, =_sbss
 80009e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009e8:	20000108 	.word	0x20000108

080009ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009ec:	e7fe      	b.n	80009ec <ADC1_2_IRQHandler>

080009ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009f4:	2300      	movs	r3, #0
 80009f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f8:	2003      	movs	r0, #3
 80009fa:	f000 f93d 	bl	8000c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009fe:	200f      	movs	r0, #15
 8000a00:	f000 f80e 	bl	8000a20 <HAL_InitTick>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d002      	beq.n	8000a10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	71fb      	strb	r3, [r7, #7]
 8000a0e:	e001      	b.n	8000a14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a10:	f7ff fe54 	bl	80006bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a14:	79fb      	ldrb	r3, [r7, #7]

}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a2c:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <HAL_InitTick+0x68>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d022      	beq.n	8000a7a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a34:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_InitTick+0x6c>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <HAL_InitTick+0x68>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a40:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 f93a 	bl	8000cc2 <HAL_SYSTICK_Config>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d10f      	bne.n	8000a74 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b0f      	cmp	r3, #15
 8000a58:	d809      	bhi.n	8000a6e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	6879      	ldr	r1, [r7, #4]
 8000a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a62:	f000 f914 	bl	8000c8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a66:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <HAL_InitTick+0x70>)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6013      	str	r3, [r2, #0]
 8000a6c:	e007      	b.n	8000a7e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	73fb      	strb	r3, [r7, #15]
 8000a72:	e004      	b.n	8000a7e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
 8000a76:	73fb      	strb	r3, [r7, #15]
 8000a78:	e001      	b.n	8000a7e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	20000004 	.word	0x20000004

08000a94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <HAL_IncTick+0x1c>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <HAL_IncTick+0x20>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	4a03      	ldr	r2, [pc, #12]	; (8000ab0 <HAL_IncTick+0x1c>)
 8000aa4:	6013      	str	r3, [r2, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	20000104 	.word	0x20000104
 8000ab4:	20000008 	.word	0x20000008

08000ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return uwTick;
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <HAL_GetTick+0x14>)
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000104 	.word	0x20000104

08000ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad8:	f7ff ffee 	bl	8000ab8 <HAL_GetTick>
 8000adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae8:	d004      	beq.n	8000af4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <HAL_Delay+0x40>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	4413      	add	r3, r2
 8000af2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000af4:	bf00      	nop
 8000af6:	f7ff ffdf 	bl	8000ab8 <HAL_GetTick>
 8000afa:	4602      	mov	r2, r0
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d8f7      	bhi.n	8000af6 <HAL_Delay+0x26>
  {
  }
}
 8000b06:	bf00      	nop
 8000b08:	bf00      	nop
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000008 	.word	0x20000008

08000b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b30:	4013      	ands	r3, r2
 8000b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b46:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	60d3      	str	r3, [r2, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <__NVIC_GetPriorityGrouping+0x18>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	f003 0307 	and.w	r3, r3, #7
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db0a      	blt.n	8000ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	490c      	ldr	r1, [pc, #48]	; (8000bc4 <__NVIC_SetPriority+0x4c>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	0112      	lsls	r2, r2, #4
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba0:	e00a      	b.n	8000bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4908      	ldr	r1, [pc, #32]	; (8000bc8 <__NVIC_SetPriority+0x50>)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	f003 030f 	and.w	r3, r3, #15
 8000bae:	3b04      	subs	r3, #4
 8000bb0:	0112      	lsls	r2, r2, #4
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	440b      	add	r3, r1
 8000bb6:	761a      	strb	r2, [r3, #24]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	; 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	f1c3 0307 	rsb	r3, r3, #7
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	bf28      	it	cs
 8000bea:	2304      	movcs	r3, #4
 8000bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	2b06      	cmp	r3, #6
 8000bf4:	d902      	bls.n	8000bfc <NVIC_EncodePriority+0x30>
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3b03      	subs	r3, #3
 8000bfa:	e000      	b.n	8000bfe <NVIC_EncodePriority+0x32>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	f04f 32ff 	mov.w	r2, #4294967295
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	401a      	ands	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c14:	f04f 31ff 	mov.w	r1, #4294967295
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	43d9      	mvns	r1, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	4313      	orrs	r3, r2
         );
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3724      	adds	r7, #36	; 0x24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c44:	d301      	bcc.n	8000c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c46:	2301      	movs	r3, #1
 8000c48:	e00f      	b.n	8000c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <SysTick_Config+0x40>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c52:	210f      	movs	r1, #15
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295
 8000c58:	f7ff ff8e 	bl	8000b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <SysTick_Config+0x40>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c62:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <SysTick_Config+0x40>)
 8000c64:	2207      	movs	r2, #7
 8000c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	e000e010 	.word	0xe000e010

08000c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff ff47 	bl	8000b14 <__NVIC_SetPriorityGrouping>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b086      	sub	sp, #24
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
 8000c9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c9c:	f7ff ff5e 	bl	8000b5c <__NVIC_GetPriorityGrouping>
 8000ca0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	68b9      	ldr	r1, [r7, #8]
 8000ca6:	6978      	ldr	r0, [r7, #20]
 8000ca8:	f7ff ff90 	bl	8000bcc <NVIC_EncodePriority>
 8000cac:	4602      	mov	r2, r0
 8000cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff5f 	bl	8000b78 <__NVIC_SetPriority>
}
 8000cba:	bf00      	nop
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ffb2 	bl	8000c34 <SysTick_Config>
 8000cd0:	4603      	mov	r3, r0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b084      	sub	sp, #16
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d00d      	beq.n	8000d0e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2204      	movs	r2, #4
 8000cf6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	73fb      	strb	r3, [r7, #15]
 8000d0c:	e047      	b.n	8000d9e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f022 020e 	bic.w	r2, r2, #14
 8000d1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f022 0201 	bic.w	r2, r2, #1
 8000d2c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	f003 021f 	and.w	r2, r3, #31
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d50:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000d5a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d00c      	beq.n	8000d7e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d72:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000d7c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2201      	movs	r2, #1
 8000d82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	4798      	blx	r3
    }
  }
  return status;
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000db6:	b2db      	uxtb	r3, r3
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000dd2:	e15a      	b.n	800108a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	2101      	movs	r1, #1
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8000de0:	4013      	ands	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f000 814c 	beq.w	8001084 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d005      	beq.n	8000e04 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d130      	bne.n	8000e66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	68da      	ldr	r2, [r3, #12]
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	091b      	lsrs	r3, r3, #4
 8000e50:	f003 0201 	and.w	r2, r3, #1
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	d017      	beq.n	8000ea2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 0303 	and.w	r3, r3, #3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d123      	bne.n	8000ef6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	08da      	lsrs	r2, r3, #3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3208      	adds	r2, #8
 8000eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	220f      	movs	r2, #15
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	691a      	ldr	r2, [r3, #16]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	f003 0307 	and.w	r3, r3, #7
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	08da      	lsrs	r2, r3, #3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3208      	adds	r2, #8
 8000ef0:	6939      	ldr	r1, [r7, #16]
 8000ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	2203      	movs	r2, #3
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0203 	and.w	r2, r3, #3
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 80a6 	beq.w	8001084 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f38:	4b5b      	ldr	r3, [pc, #364]	; (80010a8 <HAL_GPIO_Init+0x2e4>)
 8000f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3c:	4a5a      	ldr	r2, [pc, #360]	; (80010a8 <HAL_GPIO_Init+0x2e4>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	6613      	str	r3, [r2, #96]	; 0x60
 8000f44:	4b58      	ldr	r3, [pc, #352]	; (80010a8 <HAL_GPIO_Init+0x2e4>)
 8000f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f50:	4a56      	ldr	r2, [pc, #344]	; (80010ac <HAL_GPIO_Init+0x2e8>)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	089b      	lsrs	r3, r3, #2
 8000f56:	3302      	adds	r3, #2
 8000f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	220f      	movs	r2, #15
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f7a:	d01f      	beq.n	8000fbc <HAL_GPIO_Init+0x1f8>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a4c      	ldr	r2, [pc, #304]	; (80010b0 <HAL_GPIO_Init+0x2ec>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d019      	beq.n	8000fb8 <HAL_GPIO_Init+0x1f4>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a4b      	ldr	r2, [pc, #300]	; (80010b4 <HAL_GPIO_Init+0x2f0>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d013      	beq.n	8000fb4 <HAL_GPIO_Init+0x1f0>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a4a      	ldr	r2, [pc, #296]	; (80010b8 <HAL_GPIO_Init+0x2f4>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d00d      	beq.n	8000fb0 <HAL_GPIO_Init+0x1ec>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a49      	ldr	r2, [pc, #292]	; (80010bc <HAL_GPIO_Init+0x2f8>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d007      	beq.n	8000fac <HAL_GPIO_Init+0x1e8>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4a48      	ldr	r2, [pc, #288]	; (80010c0 <HAL_GPIO_Init+0x2fc>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d101      	bne.n	8000fa8 <HAL_GPIO_Init+0x1e4>
 8000fa4:	2305      	movs	r3, #5
 8000fa6:	e00a      	b.n	8000fbe <HAL_GPIO_Init+0x1fa>
 8000fa8:	2306      	movs	r3, #6
 8000faa:	e008      	b.n	8000fbe <HAL_GPIO_Init+0x1fa>
 8000fac:	2304      	movs	r3, #4
 8000fae:	e006      	b.n	8000fbe <HAL_GPIO_Init+0x1fa>
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e004      	b.n	8000fbe <HAL_GPIO_Init+0x1fa>
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	e002      	b.n	8000fbe <HAL_GPIO_Init+0x1fa>
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e000      	b.n	8000fbe <HAL_GPIO_Init+0x1fa>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	f002 0203 	and.w	r2, r2, #3
 8000fc4:	0092      	lsls	r2, r2, #2
 8000fc6:	4093      	lsls	r3, r2
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fce:	4937      	ldr	r1, [pc, #220]	; (80010ac <HAL_GPIO_Init+0x2e8>)
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	089b      	lsrs	r3, r3, #2
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fdc:	4b39      	ldr	r3, [pc, #228]	; (80010c4 <HAL_GPIO_Init+0x300>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001000:	4a30      	ldr	r2, [pc, #192]	; (80010c4 <HAL_GPIO_Init+0x300>)
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001006:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <HAL_GPIO_Init+0x300>)
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800102a:	4a26      	ldr	r2, [pc, #152]	; (80010c4 <HAL_GPIO_Init+0x300>)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <HAL_GPIO_Init+0x300>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001054:	4a1b      	ldr	r2, [pc, #108]	; (80010c4 <HAL_GPIO_Init+0x300>)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <HAL_GPIO_Init+0x300>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	43db      	mvns	r3, r3
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800107e:	4a11      	ldr	r2, [pc, #68]	; (80010c4 <HAL_GPIO_Init+0x300>)
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	3301      	adds	r3, #1
 8001088:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	fa22 f303 	lsr.w	r3, r2, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	f47f ae9d 	bne.w	8000dd4 <HAL_GPIO_Init+0x10>
  }
}
 800109a:	bf00      	nop
 800109c:	bf00      	nop
 800109e:	371c      	adds	r7, #28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40010000 	.word	0x40010000
 80010b0:	48000400 	.word	0x48000400
 80010b4:	48000800 	.word	0x48000800
 80010b8:	48000c00 	.word	0x48000c00
 80010bc:	48001000 	.word	0x48001000
 80010c0:	48001400 	.word	0x48001400
 80010c4:	40010400 	.word	0x40010400

080010c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e081      	b.n	80011de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d106      	bne.n	80010f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff fb08 	bl	8000704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2224      	movs	r2, #36	; 0x24
 80010f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0201 	bic.w	r2, r2, #1
 800110a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001118:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001128:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d107      	bne.n	8001142 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	e006      	b.n	8001150 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800114e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	2b02      	cmp	r3, #2
 8001156:	d104      	bne.n	8001162 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001160:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	6812      	ldr	r2, [r2, #0]
 800116c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001174:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001184:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	691a      	ldr	r2, [r3, #16]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	430a      	orrs	r2, r1
 800119e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69d9      	ldr	r1, [r3, #28]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a1a      	ldr	r2, [r3, #32]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	430a      	orrs	r2, r1
 80011ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0201 	orr.w	r2, r2, #1
 80011be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2220      	movs	r2, #32
 80011ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af02      	add	r7, sp, #8
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	461a      	mov	r2, r3
 80011f4:	460b      	mov	r3, r1
 80011f6:	817b      	strh	r3, [r7, #10]
 80011f8:	4613      	mov	r3, r2
 80011fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b20      	cmp	r3, #32
 8001206:	f040 80da 	bne.w	80013be <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001210:	2b01      	cmp	r3, #1
 8001212:	d101      	bne.n	8001218 <HAL_I2C_Master_Transmit+0x30>
 8001214:	2302      	movs	r3, #2
 8001216:	e0d3      	b.n	80013c0 <HAL_I2C_Master_Transmit+0x1d8>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2201      	movs	r2, #1
 800121c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001220:	f7ff fc4a 	bl	8000ab8 <HAL_GetTick>
 8001224:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2319      	movs	r3, #25
 800122c:	2201      	movs	r2, #1
 800122e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f001 f8b5 	bl	80023a2 <I2C_WaitOnFlagUntilTimeout>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e0be      	b.n	80013c0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2221      	movs	r2, #33	; 0x21
 8001246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2210      	movs	r2, #16
 800124e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2200      	movs	r2, #0
 8001256:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	893a      	ldrh	r2, [r7, #8]
 8001262:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2200      	movs	r2, #0
 8001268:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800126e:	b29b      	uxth	r3, r3
 8001270:	2bff      	cmp	r3, #255	; 0xff
 8001272:	d90e      	bls.n	8001292 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	22ff      	movs	r2, #255	; 0xff
 8001278:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800127e:	b2da      	uxtb	r2, r3
 8001280:	8979      	ldrh	r1, [r7, #10]
 8001282:	4b51      	ldr	r3, [pc, #324]	; (80013c8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f001 fa32 	bl	80026f4 <I2C_TransferConfig>
 8001290:	e06c      	b.n	800136c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001296:	b29a      	uxth	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	8979      	ldrh	r1, [r7, #10]
 80012a4:	4b48      	ldr	r3, [pc, #288]	; (80013c8 <HAL_I2C_Master_Transmit+0x1e0>)
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f001 fa21 	bl	80026f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80012b2:	e05b      	b.n	800136c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	6a39      	ldr	r1, [r7, #32]
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	f001 f8b2 	bl	8002422 <I2C_WaitOnTXISFlagUntilTimeout>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e07b      	b.n	80013c0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	781a      	ldrb	r2, [r3, #0]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d8:	1c5a      	adds	r2, r3, #1
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	3b01      	subs	r3, #1
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f0:	3b01      	subs	r3, #1
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d034      	beq.n	800136c <HAL_I2C_Master_Transmit+0x184>
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001306:	2b00      	cmp	r3, #0
 8001308:	d130      	bne.n	800136c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	6a3b      	ldr	r3, [r7, #32]
 8001310:	2200      	movs	r2, #0
 8001312:	2180      	movs	r1, #128	; 0x80
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f001 f844 	bl	80023a2 <I2C_WaitOnFlagUntilTimeout>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e04d      	b.n	80013c0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001328:	b29b      	uxth	r3, r3
 800132a:	2bff      	cmp	r3, #255	; 0xff
 800132c:	d90e      	bls.n	800134c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	22ff      	movs	r2, #255	; 0xff
 8001332:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001338:	b2da      	uxtb	r2, r3
 800133a:	8979      	ldrh	r1, [r7, #10]
 800133c:	2300      	movs	r3, #0
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001344:	68f8      	ldr	r0, [r7, #12]
 8001346:	f001 f9d5 	bl	80026f4 <I2C_TransferConfig>
 800134a:	e00f      	b.n	800136c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001350:	b29a      	uxth	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800135a:	b2da      	uxtb	r2, r3
 800135c:	8979      	ldrh	r1, [r7, #10]
 800135e:	2300      	movs	r3, #0
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f001 f9c4 	bl	80026f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001370:	b29b      	uxth	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d19e      	bne.n	80012b4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	6a39      	ldr	r1, [r7, #32]
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f001 f891 	bl	80024a2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e01a      	b.n	80013c0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2220      	movs	r2, #32
 8001390:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6859      	ldr	r1, [r3, #4]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_I2C_Master_Transmit+0x1e4>)
 800139e:	400b      	ands	r3, r1
 80013a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2220      	movs	r2, #32
 80013a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e000      	b.n	80013c0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80013be:	2302      	movs	r3, #2
  }
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	80002000 	.word	0x80002000
 80013cc:	fe00e800 	.word	0xfe00e800

080013d0 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	4613      	mov	r3, r2
 80013dc:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b20      	cmp	r3, #32
 80013e8:	d139      	bne.n	800145e <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d101      	bne.n	80013f8 <HAL_I2C_Slave_Receive_IT+0x28>
 80013f4:	2302      	movs	r3, #2
 80013f6:	e033      	b.n	8001460 <HAL_I2C_Slave_Receive_IT+0x90>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2222      	movs	r2, #34	; 0x22
 8001404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2220      	movs	r2, #32
 800140c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2200      	movs	r2, #0
 8001414:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001424:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	68ba      	ldr	r2, [r7, #8]
 800142a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	88fa      	ldrh	r2, [r7, #6]
 8001430:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001436:	b29a      	uxth	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <HAL_I2C_Slave_Receive_IT+0x98>)
 8001440:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4a09      	ldr	r2, [pc, #36]	; (800146c <HAL_I2C_Slave_Receive_IT+0x9c>)
 8001446:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001450:	f248 0102 	movw	r1, #32770	; 0x8002
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f001 f97f 	bl	8002758 <I2C_Enable_IRQ>

    return HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	e000      	b.n	8001460 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 800145e:	2302      	movs	r3, #2
  }
}
 8001460:	4618      	mov	r0, r3
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	ffff0000 	.word	0xffff0000
 800146c:	08001541 	.word	0x08001541

08001470 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	70fb      	strb	r3, [r7, #3]
 80014cc:	4613      	mov	r3, r2
 80014ce:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001550:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800155c:	2b01      	cmp	r3, #1
 800155e:	d101      	bne.n	8001564 <I2C_Slave_ISR_IT+0x24>
 8001560:	2302      	movs	r3, #2
 8001562:	e0e1      	b.n	8001728 <I2C_Slave_ISR_IT+0x1e8>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	f003 0320 	and.w	r3, r3, #32
 8001572:	2b00      	cmp	r3, #0
 8001574:	d008      	beq.n	8001588 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001580:	6939      	ldr	r1, [r7, #16]
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f000 fc7a 	bl	8001e7c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	f003 0310 	and.w	r3, r3, #16
 800158e:	2b00      	cmp	r3, #0
 8001590:	d04b      	beq.n	800162a <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001598:	2b00      	cmp	r3, #0
 800159a:	d046      	beq.n	800162a <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d128      	bne.n	80015f8 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b28      	cmp	r3, #40	; 0x28
 80015b0:	d108      	bne.n	80015c4 <I2C_Slave_ISR_IT+0x84>
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015b8:	d104      	bne.n	80015c4 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80015ba:	6939      	ldr	r1, [r7, #16]
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f000 fd63 	bl	8002088 <I2C_ITListenCplt>
 80015c2:	e031      	b.n	8001628 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b29      	cmp	r3, #41	; 0x29
 80015ce:	d10e      	bne.n	80015ee <I2C_Slave_ISR_IT+0xae>
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80015d6:	d00a      	beq.n	80015ee <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2210      	movs	r2, #16
 80015de:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f000 fe9c 	bl	800231e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f000 fb24 	bl	8001c34 <I2C_ITSlaveSeqCplt>
 80015ec:	e01c      	b.n	8001628 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2210      	movs	r2, #16
 80015f4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80015f6:	e08f      	b.n	8001718 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2210      	movs	r2, #16
 80015fe:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001604:	f043 0204 	orr.w	r2, r3, #4
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <I2C_Slave_ISR_IT+0xda>
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001618:	d17e      	bne.n	8001718 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	4619      	mov	r1, r3
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f000 fd85 	bl	8002130 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001626:	e077      	b.n	8001718 <I2C_Slave_ISR_IT+0x1d8>
 8001628:	e076      	b.n	8001718 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	d02f      	beq.n	8001694 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800163a:	2b00      	cmp	r3, #0
 800163c:	d02a      	beq.n	8001694 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001642:	b29b      	uxth	r3, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d018      	beq.n	800167a <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001664:	3b01      	subs	r3, #1
 8001666:	b29a      	uxth	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001670:	b29b      	uxth	r3, r3
 8001672:	3b01      	subs	r3, #1
 8001674:	b29a      	uxth	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800167e:	b29b      	uxth	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d14b      	bne.n	800171c <I2C_Slave_ISR_IT+0x1dc>
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800168a:	d047      	beq.n	800171c <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f000 fad1 	bl	8001c34 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001692:	e043      	b.n	800171c <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d009      	beq.n	80016b2 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d004      	beq.n	80016b2 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80016a8:	6939      	ldr	r1, [r7, #16]
 80016aa:	68f8      	ldr	r0, [r7, #12]
 80016ac:	f000 fa01 	bl	8001ab2 <I2C_ITAddrCplt>
 80016b0:	e035      	b.n	800171e <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d030      	beq.n	800171e <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d02b      	beq.n	800171e <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d018      	beq.n	8001702 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	1c5a      	adds	r2, r3, #1
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	3b01      	subs	r3, #1
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f8:	3b01      	subs	r3, #1
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	851a      	strh	r2, [r3, #40]	; 0x28
 8001700:	e00d      	b.n	800171e <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001708:	d002      	beq.n	8001710 <I2C_Slave_ISR_IT+0x1d0>
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d106      	bne.n	800171e <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	f000 fa8f 	bl	8001c34 <I2C_ITSlaveSeqCplt>
 8001716:	e002      	b.n	800171e <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8001718:	bf00      	nop
 800171a:	e000      	b.n	800171e <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 800171c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af02      	add	r7, sp, #8
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001742:	2b01      	cmp	r3, #1
 8001744:	d101      	bne.n	800174a <I2C_Master_ISR_DMA+0x1a>
 8001746:	2302      	movs	r3, #2
 8001748:	e0d9      	b.n	80018fe <I2C_Master_ISR_DMA+0x1ce>
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	f003 0310 	and.w	r3, r3, #16
 8001758:	2b00      	cmp	r3, #0
 800175a:	d016      	beq.n	800178a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001762:	2b00      	cmp	r3, #0
 8001764:	d011      	beq.n	800178a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2210      	movs	r2, #16
 800176c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	f043 0204 	orr.w	r2, r3, #4
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800177a:	2120      	movs	r1, #32
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f000 ffeb 	bl	8002758 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f000 fdcb 	bl	800231e <I2C_Flush_TXDR>
 8001788:	e0b4      	b.n	80018f4 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001790:	2b00      	cmp	r3, #0
 8001792:	d071      	beq.n	8001878 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800179a:	2b00      	cmp	r3, #0
 800179c:	d06c      	beq.n	8001878 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017ac:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d04e      	beq.n	8001856 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	b29b      	uxth	r3, r3
 80017c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017c4:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	2bff      	cmp	r3, #255	; 0xff
 80017ce:	d906      	bls.n	80017de <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	22ff      	movs	r2, #255	; 0xff
 80017d4:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80017d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	e010      	b.n	8001800 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80017f0:	d003      	beq.n	80017fa <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	e002      	b.n	8001800 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80017fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017fe:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001804:	b2da      	uxtb	r2, r3
 8001806:	8a79      	ldrh	r1, [r7, #18]
 8001808:	2300      	movs	r3, #0
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f000 ff70 	bl	80026f4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001818:	b29a      	uxth	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	b29a      	uxth	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b22      	cmp	r3, #34	; 0x22
 8001830:	d108      	bne.n	8001844 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001840:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001842:	e057      	b.n	80018f4 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001852:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001854:	e04e      	b.n	80018f4 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001860:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001864:	d003      	beq.n	800186e <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 f9a7 	bl	8001bba <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800186c:	e042      	b.n	80018f4 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800186e:	2140      	movs	r1, #64	; 0x40
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f000 fc5d 	bl	8002130 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001876:	e03d      	b.n	80018f4 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800187e:	2b00      	cmp	r3, #0
 8001880:	d028      	beq.n	80018d4 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001888:	2b00      	cmp	r3, #0
 800188a:	d023      	beq.n	80018d4 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001890:	b29b      	uxth	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d119      	bne.n	80018ca <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018a4:	d025      	beq.n	80018f2 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018ae:	d108      	bne.n	80018c2 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018be:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80018c0:	e017      	b.n	80018f2 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f000 f979 	bl	8001bba <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80018c8:	e013      	b.n	80018f2 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80018ca:	2140      	movs	r1, #64	; 0x40
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f000 fc2f 	bl	8002130 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80018d2:	e00e      	b.n	80018f2 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	f003 0320 	and.w	r3, r3, #32
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00a      	beq.n	80018f4 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f000 f9fe 	bl	8001cec <I2C_ITMasterCplt>
 80018f0:	e000      	b.n	80018f4 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80018f2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b088      	sub	sp, #32
 800190a:	af00      	add	r7, sp, #0
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001922:	2b01      	cmp	r3, #1
 8001924:	d101      	bne.n	800192a <I2C_Slave_ISR_DMA+0x24>
 8001926:	2302      	movs	r3, #2
 8001928:	e0bf      	b.n	8001aaa <I2C_Slave_ISR_DMA+0x1a4>
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	f003 0320 	and.w	r3, r3, #32
 8001938:	2b00      	cmp	r3, #0
 800193a:	d008      	beq.n	800194e <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001946:	68b9      	ldr	r1, [r7, #8]
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f000 fa97 	bl	8001e7c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	f003 0310 	and.w	r3, r3, #16
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 8095 	beq.w	8001a84 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 808f 	beq.w	8001a84 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d104      	bne.n	800197a <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001976:	2b00      	cmp	r3, #0
 8001978:	d07d      	beq.n	8001a76 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00c      	beq.n	800199c <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d007      	beq.n	800199c <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8001998:	2301      	movs	r3, #1
 800199a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00c      	beq.n	80019be <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d007      	beq.n	80019be <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 80019ba:	2301      	movs	r3, #1
 80019bc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d128      	bne.n	8001a16 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b28      	cmp	r3, #40	; 0x28
 80019ce:	d108      	bne.n	80019e2 <I2C_Slave_ISR_DMA+0xdc>
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019d6:	d104      	bne.n	80019e2 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f000 fb54 	bl	8002088 <I2C_ITListenCplt>
 80019e0:	e048      	b.n	8001a74 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b29      	cmp	r3, #41	; 0x29
 80019ec:	d10e      	bne.n	8001a0c <I2C_Slave_ISR_DMA+0x106>
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80019f4:	d00a      	beq.n	8001a0c <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2210      	movs	r2, #16
 80019fc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 fc8d 	bl	800231e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f000 f915 	bl	8001c34 <I2C_ITSlaveSeqCplt>
 8001a0a:	e033      	b.n	8001a74 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2210      	movs	r2, #16
 8001a12:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001a14:	e034      	b.n	8001a80 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2210      	movs	r2, #16
 8001a1c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	f043 0204 	orr.w	r2, r3, #4
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a30:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <I2C_Slave_ISR_DMA+0x13a>
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a3e:	d11f      	bne.n	8001a80 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001a40:	7dfb      	ldrb	r3, [r7, #23]
 8001a42:	2b21      	cmp	r3, #33	; 0x21
 8001a44:	d002      	beq.n	8001a4c <I2C_Slave_ISR_DMA+0x146>
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
 8001a48:	2b29      	cmp	r3, #41	; 0x29
 8001a4a:	d103      	bne.n	8001a54 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2221      	movs	r2, #33	; 0x21
 8001a50:	631a      	str	r2, [r3, #48]	; 0x30
 8001a52:	e008      	b.n	8001a66 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001a54:	7dfb      	ldrb	r3, [r7, #23]
 8001a56:	2b22      	cmp	r3, #34	; 0x22
 8001a58:	d002      	beq.n	8001a60 <I2C_Slave_ISR_DMA+0x15a>
 8001a5a:	7dfb      	ldrb	r3, [r7, #23]
 8001a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8001a5e:	d102      	bne.n	8001a66 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2222      	movs	r2, #34	; 0x22
 8001a64:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 fb5f 	bl	8002130 <I2C_ITError>
      if (treatdmanack == 1U)
 8001a72:	e005      	b.n	8001a80 <I2C_Slave_ISR_DMA+0x17a>
 8001a74:	e004      	b.n	8001a80 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2210      	movs	r2, #16
 8001a7c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001a7e:	e00f      	b.n	8001aa0 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8001a80:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001a82:	e00d      	b.n	8001aa0 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d008      	beq.n	8001aa0 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f000 f809 	bl	8001ab2 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3720      	adds	r7, #32
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b084      	sub	sp, #16
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001ac8:	2b28      	cmp	r3, #40	; 0x28
 8001aca:	d16a      	bne.n	8001ba2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	0c1b      	lsrs	r3, r3, #16
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	0c1b      	lsrs	r3, r3, #16
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001aea:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001af8:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001b06:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d138      	bne.n	8001b82 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001b10:	897b      	ldrh	r3, [r7, #10]
 8001b12:	09db      	lsrs	r3, r3, #7
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	89bb      	ldrh	r3, [r7, #12]
 8001b18:	4053      	eors	r3, r2
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	f003 0306 	and.w	r3, r3, #6
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d11c      	bne.n	8001b5e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001b24:	897b      	ldrh	r3, [r7, #10]
 8001b26:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d13b      	bne.n	8001bb2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2208      	movs	r2, #8
 8001b46:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b50:	89ba      	ldrh	r2, [r7, #12]
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	4619      	mov	r1, r3
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff fcb2 	bl	80014c0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001b5c:	e029      	b.n	8001bb2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001b5e:	893b      	ldrh	r3, [r7, #8]
 8001b60:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001b62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 fe5a 	bl	8002820 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b74:	89ba      	ldrh	r2, [r7, #12]
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff fca0 	bl	80014c0 <HAL_I2C_AddrCallback>
}
 8001b80:	e017      	b.n	8001bb2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001b82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 fe4a 	bl	8002820 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b94:	89ba      	ldrh	r2, [r7, #12]
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff fc90 	bl	80014c0 <HAL_I2C_AddrCallback>
}
 8001ba0:	e007      	b.n	8001bb2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2208      	movs	r2, #8
 8001ba8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b21      	cmp	r3, #33	; 0x21
 8001bd4:	d115      	bne.n	8001c02 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2220      	movs	r2, #32
 8001bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2211      	movs	r2, #17
 8001be2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001bea:	2101      	movs	r1, #1
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 fe17 	bl	8002820 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff fc38 	bl	8001470 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001c00:	e014      	b.n	8001c2c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2220      	movs	r2, #32
 8001c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2212      	movs	r2, #18
 8001c0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001c16:	2102      	movs	r1, #2
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 fe01 	bl	8002820 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff fc2c 	bl	8001484 <HAL_I2C_MasterRxCpltCallback>
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d008      	beq.n	8001c68 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	e00c      	b.n	8001c82 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d007      	beq.n	8001c82 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c80:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b29      	cmp	r3, #41	; 0x29
 8001c8c:	d112      	bne.n	8001cb4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2228      	movs	r2, #40	; 0x28
 8001c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2221      	movs	r2, #33	; 0x21
 8001c9a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 fdbe 	bl	8002820 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff fbf3 	bl	8001498 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001cb2:	e017      	b.n	8001ce4 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8001cbe:	d111      	bne.n	8001ce4 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2228      	movs	r2, #40	; 0x28
 8001cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2222      	movs	r2, #34	; 0x22
 8001ccc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001cce:	2102      	movs	r1, #2
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 fda5 	bl	8002820 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff fbe4 	bl	80014ac <HAL_I2C_SlaveRxCpltCallback>
}
 8001ce4:	bf00      	nop
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b21      	cmp	r3, #33	; 0x21
 8001d0c:	d107      	bne.n	8001d1e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001d0e:	2101      	movs	r1, #1
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 fd85 	bl	8002820 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2211      	movs	r2, #17
 8001d1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d1c:	e00c      	b.n	8001d38 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b22      	cmp	r3, #34	; 0x22
 8001d28:	d106      	bne.n	8001d38 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 fd77 	bl	8002820 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2212      	movs	r2, #18
 8001d36:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6859      	ldr	r1, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	4b4c      	ldr	r3, [pc, #304]	; (8001e74 <I2C_ITMasterCplt+0x188>)
 8001d44:	400b      	ands	r3, r1
 8001d46:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a49      	ldr	r2, [pc, #292]	; (8001e78 <I2C_ITMasterCplt+0x18c>)
 8001d52:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2210      	movs	r2, #16
 8001d64:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	f043 0204 	orr.w	r2, r3, #4
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b60      	cmp	r3, #96	; 0x60
 8001d7c:	d10a      	bne.n	8001d94 <I2C_ITMasterCplt+0xa8>
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8001d92:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 fac2 	bl	800231e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b60      	cmp	r3, #96	; 0x60
 8001daa:	d002      	beq.n	8001db2 <I2C_ITMasterCplt+0xc6>
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d006      	beq.n	8001dc0 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	4619      	mov	r1, r3
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f9b9 	bl	8002130 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001dbe:	e054      	b.n	8001e6a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b21      	cmp	r3, #33	; 0x21
 8001dca:	d124      	bne.n	8001e16 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b40      	cmp	r3, #64	; 0x40
 8001de4:	d10b      	bne.n	8001dfe <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff fb7a 	bl	80014f0 <HAL_I2C_MemTxCpltCallback>
}
 8001dfc:	e035      	b.n	8001e6a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fb2e 	bl	8001470 <HAL_I2C_MasterTxCpltCallback>
}
 8001e14:	e029      	b.n	8001e6a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b22      	cmp	r3, #34	; 0x22
 8001e20:	d123      	bne.n	8001e6a <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2220      	movs	r2, #32
 8001e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b40      	cmp	r3, #64	; 0x40
 8001e3a:	d10b      	bne.n	8001e54 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff fb59 	bl	8001504 <HAL_I2C_MemRxCpltCallback>
}
 8001e52:	e00a      	b.n	8001e6a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff fb0d 	bl	8001484 <HAL_I2C_MasterRxCpltCallback>
}
 8001e6a:	bf00      	nop
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	fe00e800 	.word	0xfe00e800
 8001e78:	ffff0000 	.word	0xffff0000

08001e7c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e98:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	2b21      	cmp	r3, #33	; 0x21
 8001ea6:	d002      	beq.n	8001eae <I2C_ITSlaveCplt+0x32>
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	2b29      	cmp	r3, #41	; 0x29
 8001eac:	d108      	bne.n	8001ec0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001eae:	f248 0101 	movw	r1, #32769	; 0x8001
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 fcb4 	bl	8002820 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2221      	movs	r2, #33	; 0x21
 8001ebc:	631a      	str	r2, [r3, #48]	; 0x30
 8001ebe:	e00d      	b.n	8001edc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	2b22      	cmp	r3, #34	; 0x22
 8001ec4:	d002      	beq.n	8001ecc <I2C_ITSlaveCplt+0x50>
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	2b2a      	cmp	r3, #42	; 0x2a
 8001eca:	d107      	bne.n	8001edc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001ecc:	f248 0102 	movw	r1, #32770	; 0x8002
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 fca5 	bl	8002820 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2222      	movs	r2, #34	; 0x22
 8001eda:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001eea:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6859      	ldr	r1, [r3, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	4b62      	ldr	r3, [pc, #392]	; (8002080 <I2C_ITSlaveCplt+0x204>)
 8001ef8:	400b      	ands	r3, r1
 8001efa:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 fa0e 	bl	800231e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d013      	beq.n	8001f34 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f1a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01f      	beq.n	8001f64 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f32:	e017      	b.n	8001f64 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d012      	beq.n	8001f64 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f4c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d006      	beq.n	8001f64 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d020      	beq.n	8001fb0 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f023 0304 	bic.w	r3, r3, #4
 8001f74:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00c      	beq.n	8001fb0 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	f043 0204 	orr.w	r2, r3, #4
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d010      	beq.n	8001ffe <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f8a4 	bl	8002130 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b28      	cmp	r3, #40	; 0x28
 8001ff2:	d141      	bne.n	8002078 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001ff4:	6979      	ldr	r1, [r7, #20]
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f846 	bl	8002088 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001ffc:	e03c      	b.n	8002078 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002002:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002006:	d014      	beq.n	8002032 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff fe13 	bl	8001c34 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a1c      	ldr	r2, [pc, #112]	; (8002084 <I2C_ITSlaveCplt+0x208>)
 8002012:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fa56 	bl	80014dc <HAL_I2C_ListenCpltCallback>
}
 8002030:	e022      	b.n	8002078 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b22      	cmp	r3, #34	; 0x22
 800203c:	d10e      	bne.n	800205c <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2220      	movs	r2, #32
 8002042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff fa29 	bl	80014ac <HAL_I2C_SlaveRxCpltCallback>
}
 800205a:	e00d      	b.n	8002078 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2220      	movs	r2, #32
 8002060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff fa10 	bl	8001498 <HAL_I2C_SlaveTxCpltCallback>
}
 8002078:	bf00      	nop
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	fe00e800 	.word	0xfe00e800
 8002084:	ffff0000 	.word	0xffff0000

08002088 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a25      	ldr	r2, [pc, #148]	; (800212c <I2C_ITListenCplt+0xa4>)
 8002096:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2220      	movs	r2, #32
 80020a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d022      	beq.n	8002104 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	1c5a      	adds	r2, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d012      	beq.n	8002104 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fc:	f043 0204 	orr.w	r2, r3, #4
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002104:	f248 0103 	movw	r1, #32771	; 0x8003
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 fb89 	bl	8002820 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2210      	movs	r2, #16
 8002114:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff f9dc 	bl	80014dc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	ffff0000 	.word	0xffff0000

08002130 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002140:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a5d      	ldr	r2, [pc, #372]	; (80022c4 <I2C_ITError+0x194>)
 800214e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	2b28      	cmp	r3, #40	; 0x28
 8002166:	d005      	beq.n	8002174 <I2C_ITError+0x44>
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	2b29      	cmp	r3, #41	; 0x29
 800216c:	d002      	beq.n	8002174 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	2b2a      	cmp	r3, #42	; 0x2a
 8002172:	d10b      	bne.n	800218c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002174:	2103      	movs	r1, #3
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fb52 	bl	8002820 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2228      	movs	r2, #40	; 0x28
 8002180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a50      	ldr	r2, [pc, #320]	; (80022c8 <I2C_ITError+0x198>)
 8002188:	635a      	str	r2, [r3, #52]	; 0x34
 800218a:	e011      	b.n	80021b0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800218c:	f248 0103 	movw	r1, #32771	; 0x8003
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 fb45 	bl	8002820 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b60      	cmp	r3, #96	; 0x60
 80021a0:	d003      	beq.n	80021aa <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2220      	movs	r2, #32
 80021a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d039      	beq.n	8002232 <I2C_ITError+0x102>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b11      	cmp	r3, #17
 80021c2:	d002      	beq.n	80021ca <I2C_ITError+0x9a>
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2b21      	cmp	r3, #33	; 0x21
 80021c8:	d133      	bne.n	8002232 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021d8:	d107      	bne.n	80021ea <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021e8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe fdda 	bl	8000da8 <HAL_DMA_GetState>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d017      	beq.n	800222a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fe:	4a33      	ldr	r2, [pc, #204]	; (80022cc <I2C_ITError+0x19c>)
 8002200:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe fd63 	bl	8000cda <HAL_DMA_Abort_IT>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d04d      	beq.n	80022b6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002224:	4610      	mov	r0, r2
 8002226:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002228:	e045      	b.n	80022b6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f850 	bl	80022d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002230:	e041      	b.n	80022b6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002236:	2b00      	cmp	r3, #0
 8002238:	d039      	beq.n	80022ae <I2C_ITError+0x17e>
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2b12      	cmp	r3, #18
 800223e:	d002      	beq.n	8002246 <I2C_ITError+0x116>
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b22      	cmp	r3, #34	; 0x22
 8002244:	d133      	bne.n	80022ae <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002254:	d107      	bne.n	8002266 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002264:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226a:	4618      	mov	r0, r3
 800226c:	f7fe fd9c 	bl	8000da8 <HAL_DMA_GetState>
 8002270:	4603      	mov	r3, r0
 8002272:	2b01      	cmp	r3, #1
 8002274:	d017      	beq.n	80022a6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227a:	4a14      	ldr	r2, [pc, #80]	; (80022cc <I2C_ITError+0x19c>)
 800227c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fd25 	bl	8000cda <HAL_DMA_Abort_IT>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d011      	beq.n	80022ba <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022a0:	4610      	mov	r0, r2
 80022a2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80022a4:	e009      	b.n	80022ba <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f812 	bl	80022d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80022ac:	e005      	b.n	80022ba <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f80e 	bl	80022d0 <I2C_TreatErrorCallback>
  }
}
 80022b4:	e002      	b.n	80022bc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80022b6:	bf00      	nop
 80022b8:	e000      	b.n	80022bc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80022ba:	bf00      	nop
}
 80022bc:	bf00      	nop
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	ffff0000 	.word	0xffff0000
 80022c8:	08001541 	.word	0x08001541
 80022cc:	08002367 	.word	0x08002367

080022d0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b60      	cmp	r3, #96	; 0x60
 80022e2:	d10e      	bne.n	8002302 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff f916 	bl	800152c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002300:	e009      	b.n	8002316 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff f901 	bl	8001518 <HAL_I2C_ErrorCallback>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b02      	cmp	r3, #2
 8002332:	d103      	bne.n	800233c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2200      	movs	r2, #0
 800233a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b01      	cmp	r3, #1
 8002348:	d007      	beq.n	800235a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699a      	ldr	r2, [r3, #24]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f042 0201 	orr.w	r2, r2, #1
 8002358:	619a      	str	r2, [r3, #24]
  }
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002372:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002380:	2200      	movs	r2, #0
 8002382:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002390:	2200      	movs	r2, #0
 8002392:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f7ff ff9b 	bl	80022d0 <I2C_TreatErrorCallback>
}
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b084      	sub	sp, #16
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	60f8      	str	r0, [r7, #12]
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	603b      	str	r3, [r7, #0]
 80023ae:	4613      	mov	r3, r2
 80023b0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023b2:	e022      	b.n	80023fa <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ba:	d01e      	beq.n	80023fa <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023bc:	f7fe fb7c 	bl	8000ab8 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d302      	bcc.n	80023d2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d113      	bne.n	80023fa <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	f043 0220 	orr.w	r2, r3, #32
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2220      	movs	r2, #32
 80023e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e00f      	b.n	800241a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	699a      	ldr	r2, [r3, #24]
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	4013      	ands	r3, r2
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	429a      	cmp	r2, r3
 8002408:	bf0c      	ite	eq
 800240a:	2301      	moveq	r3, #1
 800240c:	2300      	movne	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	461a      	mov	r2, r3
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	429a      	cmp	r2, r3
 8002416:	d0cd      	beq.n	80023b4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	60b9      	str	r1, [r7, #8]
 800242c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800242e:	e02c      	b.n	800248a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	68b9      	ldr	r1, [r7, #8]
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f871 	bl	800251c <I2C_IsErrorOccurred>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e02a      	b.n	800249a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244a:	d01e      	beq.n	800248a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800244c:	f7fe fb34 	bl	8000ab8 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	429a      	cmp	r2, r3
 800245a:	d302      	bcc.n	8002462 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d113      	bne.n	800248a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	f043 0220 	orr.w	r2, r3, #32
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2220      	movs	r2, #32
 8002472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e007      	b.n	800249a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b02      	cmp	r3, #2
 8002496:	d1cb      	bne.n	8002430 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b084      	sub	sp, #16
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024ae:	e028      	b.n	8002502 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	68b9      	ldr	r1, [r7, #8]
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f831 	bl	800251c <I2C_IsErrorOccurred>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e026      	b.n	8002512 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024c4:	f7fe faf8 	bl	8000ab8 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d302      	bcc.n	80024da <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d113      	bne.n	8002502 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	f043 0220 	orr.w	r2, r3, #32
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2220      	movs	r2, #32
 80024ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e007      	b.n	8002512 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	f003 0320 	and.w	r3, r3, #32
 800250c:	2b20      	cmp	r3, #32
 800250e:	d1cf      	bne.n	80024b0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08a      	sub	sp, #40	; 0x28
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	2b00      	cmp	r3, #0
 8002546:	d075      	beq.n	8002634 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2210      	movs	r2, #16
 800254e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002550:	e056      	b.n	8002600 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002558:	d052      	beq.n	8002600 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800255a:	f7fe faad 	bl	8000ab8 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	429a      	cmp	r2, r3
 8002568:	d302      	bcc.n	8002570 <I2C_IsErrorOccurred+0x54>
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d147      	bne.n	8002600 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800257a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002582:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800258e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002592:	d12e      	bne.n	80025f2 <I2C_IsErrorOccurred+0xd6>
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800259a:	d02a      	beq.n	80025f2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800259c:	7cfb      	ldrb	r3, [r7, #19]
 800259e:	2b20      	cmp	r3, #32
 80025a0:	d027      	beq.n	80025f2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025b0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80025b2:	f7fe fa81 	bl	8000ab8 <HAL_GetTick>
 80025b6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025b8:	e01b      	b.n	80025f2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80025ba:	f7fe fa7d 	bl	8000ab8 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b19      	cmp	r3, #25
 80025c6:	d914      	bls.n	80025f2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025cc:	f043 0220 	orr.w	r2, r3, #32
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	f003 0320 	and.w	r3, r3, #32
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d1dc      	bne.n	80025ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	f003 0320 	and.w	r3, r3, #32
 800260a:	2b20      	cmp	r3, #32
 800260c:	d003      	beq.n	8002616 <I2C_IsErrorOccurred+0xfa>
 800260e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002612:	2b00      	cmp	r3, #0
 8002614:	d09d      	beq.n	8002552 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002616:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800261a:	2b00      	cmp	r3, #0
 800261c:	d103      	bne.n	8002626 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2220      	movs	r2, #32
 8002624:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	f043 0304 	orr.w	r3, r3, #4
 800262c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00b      	beq.n	800265e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002656:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00b      	beq.n	8002680 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	f043 0308 	orr.w	r3, r3, #8
 800266e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002678:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00b      	beq.n	80026a2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	f043 0302 	orr.w	r3, r3, #2
 8002690:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800269a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80026a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d01c      	beq.n	80026e4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f7ff fe37 	bl	800231e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6859      	ldr	r1, [r3, #4]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <I2C_IsErrorOccurred+0x1d4>)
 80026bc:	400b      	ands	r3, r1
 80026be:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	431a      	orrs	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80026e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3728      	adds	r7, #40	; 0x28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	fe00e800 	.word	0xfe00e800

080026f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	607b      	str	r3, [r7, #4]
 80026fe:	460b      	mov	r3, r1
 8002700:	817b      	strh	r3, [r7, #10]
 8002702:	4613      	mov	r3, r2
 8002704:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002706:	897b      	ldrh	r3, [r7, #10]
 8002708:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800270c:	7a7b      	ldrb	r3, [r7, #9]
 800270e:	041b      	lsls	r3, r3, #16
 8002710:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002714:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	4313      	orrs	r3, r2
 800271e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002722:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	0d5b      	lsrs	r3, r3, #21
 800272e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <I2C_TransferConfig+0x60>)
 8002734:	430b      	orrs	r3, r1
 8002736:	43db      	mvns	r3, r3
 8002738:	ea02 0103 	and.w	r1, r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	430a      	orrs	r2, r1
 8002744:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002746:	bf00      	nop
 8002748:	371c      	adds	r7, #28
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	03ff63ff 	.word	0x03ff63ff

08002758 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002764:	2300      	movs	r3, #0
 8002766:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276c:	4a2a      	ldr	r2, [pc, #168]	; (8002818 <I2C_Enable_IRQ+0xc0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d004      	beq.n	800277c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002776:	4a29      	ldr	r2, [pc, #164]	; (800281c <I2C_Enable_IRQ+0xc4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d11d      	bne.n	80027b8 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800277c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002780:	2b00      	cmp	r3, #0
 8002782:	da03      	bge.n	800278c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800278a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800278c:	887b      	ldrh	r3, [r7, #2]
 800278e:	2b10      	cmp	r3, #16
 8002790:	d103      	bne.n	800279a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002798:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800279a:	887b      	ldrh	r3, [r7, #2]
 800279c:	2b20      	cmp	r3, #32
 800279e:	d103      	bne.n	80027a8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80027a6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80027a8:	887b      	ldrh	r3, [r7, #2]
 80027aa:	2b40      	cmp	r3, #64	; 0x40
 80027ac:	d125      	bne.n	80027fa <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027b4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80027b6:	e020      	b.n	80027fa <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80027b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	da03      	bge.n	80027c8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80027c6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80027c8:	887b      	ldrh	r3, [r7, #2]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80027d8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80027da:	887b      	ldrh	r3, [r7, #2]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80027ea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80027ec:	887b      	ldrh	r3, [r7, #2]
 80027ee:	2b20      	cmp	r3, #32
 80027f0:	d103      	bne.n	80027fa <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f043 0320 	orr.w	r3, r3, #32
 80027f8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6819      	ldr	r1, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	430a      	orrs	r2, r1
 8002808:	601a      	str	r2, [r3, #0]
}
 800280a:	bf00      	nop
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	08001731 	.word	0x08001731
 800281c:	08001907 	.word	0x08001907

08002820 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002830:	887b      	ldrh	r3, [r7, #2]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00f      	beq.n	800285a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002840:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002848:	b2db      	uxtb	r3, r3
 800284a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800284e:	2b28      	cmp	r3, #40	; 0x28
 8002850:	d003      	beq.n	800285a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002858:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800285a:	887b      	ldrh	r3, [r7, #2]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00f      	beq.n	8002884 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800286a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002878:	2b28      	cmp	r3, #40	; 0x28
 800287a:	d003      	beq.n	8002884 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002882:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002884:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002888:	2b00      	cmp	r3, #0
 800288a:	da03      	bge.n	8002894 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002892:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002894:	887b      	ldrh	r3, [r7, #2]
 8002896:	2b10      	cmp	r3, #16
 8002898:	d103      	bne.n	80028a2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80028a0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80028a2:	887b      	ldrh	r3, [r7, #2]
 80028a4:	2b20      	cmp	r3, #32
 80028a6:	d103      	bne.n	80028b0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f043 0320 	orr.w	r3, r3, #32
 80028ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80028b0:	887b      	ldrh	r3, [r7, #2]
 80028b2:	2b40      	cmp	r3, #64	; 0x40
 80028b4:	d103      	bne.n	80028be <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028bc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6819      	ldr	r1, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	43da      	mvns	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	400a      	ands	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]
}
 80028d0:	bf00      	nop
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	d138      	bne.n	8002964 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d101      	bne.n	8002900 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e032      	b.n	8002966 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2224      	movs	r2, #36	; 0x24
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800292e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6819      	ldr	r1, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	e000      	b.n	8002966 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002964:	2302      	movs	r3, #2
  }
}
 8002966:	4618      	mov	r0, r3
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002972:	b480      	push	{r7}
 8002974:	b085      	sub	sp, #20
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b20      	cmp	r3, #32
 8002986:	d139      	bne.n	80029fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002992:	2302      	movs	r3, #2
 8002994:	e033      	b.n	80029fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2224      	movs	r2, #36	; 0x24
 80029a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0201 	bic.w	r2, r2, #1
 80029b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	021b      	lsls	r3, r3, #8
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	e000      	b.n	80029fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029fc:	2302      	movs	r3, #2
  }
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d141      	bne.n	8002a9e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a1a:	4b4b      	ldr	r3, [pc, #300]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a26:	d131      	bne.n	8002a8c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a28:	4b47      	ldr	r3, [pc, #284]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a2e:	4a46      	ldr	r2, [pc, #280]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a38:	4b43      	ldr	r3, [pc, #268]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a40:	4a41      	ldr	r2, [pc, #260]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a48:	4b40      	ldr	r3, [pc, #256]	; (8002b4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2232      	movs	r2, #50	; 0x32
 8002a4e:	fb02 f303 	mul.w	r3, r2, r3
 8002a52:	4a3f      	ldr	r2, [pc, #252]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a54:	fba2 2303 	umull	r2, r3, r2, r3
 8002a58:	0c9b      	lsrs	r3, r3, #18
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a5e:	e002      	b.n	8002a66 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a66:	4b38      	ldr	r3, [pc, #224]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a72:	d102      	bne.n	8002a7a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f2      	bne.n	8002a60 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a7a:	4b33      	ldr	r3, [pc, #204]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a86:	d158      	bne.n	8002b3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e057      	b.n	8002b3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a8c:	4b2e      	ldr	r3, [pc, #184]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a92:	4a2d      	ldr	r2, [pc, #180]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002a9c:	e04d      	b.n	8002b3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aa4:	d141      	bne.n	8002b2a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002aa6:	4b28      	ldr	r3, [pc, #160]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab2:	d131      	bne.n	8002b18 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ab4:	4b24      	ldr	r3, [pc, #144]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aba:	4a23      	ldr	r2, [pc, #140]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ac4:	4b20      	ldr	r3, [pc, #128]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002acc:	4a1e      	ldr	r2, [pc, #120]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ad2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ad4:	4b1d      	ldr	r3, [pc, #116]	; (8002b4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2232      	movs	r2, #50	; 0x32
 8002ada:	fb02 f303 	mul.w	r3, r2, r3
 8002ade:	4a1c      	ldr	r2, [pc, #112]	; (8002b50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae4:	0c9b      	lsrs	r3, r3, #18
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aea:	e002      	b.n	8002af2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002af2:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002afe:	d102      	bne.n	8002b06 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1f2      	bne.n	8002aec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b06:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b12:	d112      	bne.n	8002b3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e011      	b.n	8002b3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b1e:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b28:	e007      	b.n	8002b3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b2a:	4b07      	ldr	r3, [pc, #28]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b32:	4a05      	ldr	r2, [pc, #20]	; (8002b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b38:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	40007000 	.word	0x40007000
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	431bde83 	.word	0x431bde83

08002b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e306      	b.n	8003174 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d075      	beq.n	8002c5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b72:	4b97      	ldr	r3, [pc, #604]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b7c:	4b94      	ldr	r3, [pc, #592]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	2b0c      	cmp	r3, #12
 8002b8a:	d102      	bne.n	8002b92 <HAL_RCC_OscConfig+0x3e>
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d002      	beq.n	8002b98 <HAL_RCC_OscConfig+0x44>
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d10b      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b98:	4b8d      	ldr	r3, [pc, #564]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d05b      	beq.n	8002c5c <HAL_RCC_OscConfig+0x108>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d157      	bne.n	8002c5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e2e1      	b.n	8003174 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb8:	d106      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x74>
 8002bba:	4b85      	ldr	r3, [pc, #532]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a84      	ldr	r2, [pc, #528]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e01d      	b.n	8002c04 <HAL_RCC_OscConfig+0xb0>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0x98>
 8002bd2:	4b7f      	ldr	r3, [pc, #508]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a7e      	ldr	r2, [pc, #504]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b7c      	ldr	r3, [pc, #496]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a7b      	ldr	r2, [pc, #492]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e00b      	b.n	8002c04 <HAL_RCC_OscConfig+0xb0>
 8002bec:	4b78      	ldr	r3, [pc, #480]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a77      	ldr	r2, [pc, #476]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	4b75      	ldr	r3, [pc, #468]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a74      	ldr	r2, [pc, #464]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d013      	beq.n	8002c34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7fd ff54 	bl	8000ab8 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c14:	f7fd ff50 	bl	8000ab8 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	; 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e2a6      	b.n	8003174 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c26:	4b6a      	ldr	r3, [pc, #424]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0xc0>
 8002c32:	e014      	b.n	8002c5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7fd ff40 	bl	8000ab8 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c3c:	f7fd ff3c 	bl	8000ab8 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	; 0x64
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e292      	b.n	8003174 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c4e:	4b60      	ldr	r3, [pc, #384]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0xe8>
 8002c5a:	e000      	b.n	8002c5e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d075      	beq.n	8002d56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c6a:	4b59      	ldr	r3, [pc, #356]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c74:	4b56      	ldr	r3, [pc, #344]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	2b0c      	cmp	r3, #12
 8002c82:	d102      	bne.n	8002c8a <HAL_RCC_OscConfig+0x136>
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d002      	beq.n	8002c90 <HAL_RCC_OscConfig+0x13c>
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d11f      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c90:	4b4f      	ldr	r3, [pc, #316]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x154>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e265      	b.n	8003174 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca8:	4b49      	ldr	r3, [pc, #292]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	061b      	lsls	r3, r3, #24
 8002cb6:	4946      	ldr	r1, [pc, #280]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002cbc:	4b45      	ldr	r3, [pc, #276]	; (8002dd4 <HAL_RCC_OscConfig+0x280>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd fead 	bl	8000a20 <HAL_InitTick>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d043      	beq.n	8002d54 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e251      	b.n	8003174 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d023      	beq.n	8002d20 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd8:	4b3d      	ldr	r3, [pc, #244]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a3c      	ldr	r2, [pc, #240]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fd fee8 	bl	8000ab8 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cec:	f7fd fee4 	bl	8000ab8 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e23a      	b.n	8003174 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cfe:	4b34      	ldr	r3, [pc, #208]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0a:	4b31      	ldr	r3, [pc, #196]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	061b      	lsls	r3, r3, #24
 8002d18:	492d      	ldr	r1, [pc, #180]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	604b      	str	r3, [r1, #4]
 8002d1e:	e01a      	b.n	8002d56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d20:	4b2b      	ldr	r3, [pc, #172]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a2a      	ldr	r2, [pc, #168]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002d26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2c:	f7fd fec4 	bl	8000ab8 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d34:	f7fd fec0 	bl	8000ab8 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e216      	b.n	8003174 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d46:	4b22      	ldr	r3, [pc, #136]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0x1e0>
 8002d52:	e000      	b.n	8002d56 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d54:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d041      	beq.n	8002de6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d01c      	beq.n	8002da4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d6a:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d70:	4a17      	ldr	r2, [pc, #92]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7a:	f7fd fe9d 	bl	8000ab8 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d82:	f7fd fe99 	bl	8000ab8 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e1ef      	b.n	8003174 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d94:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0ef      	beq.n	8002d82 <HAL_RCC_OscConfig+0x22e>
 8002da2:	e020      	b.n	8002de6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da4:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002daa:	4a09      	ldr	r2, [pc, #36]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002dac:	f023 0301 	bic.w	r3, r3, #1
 8002db0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db4:	f7fd fe80 	bl	8000ab8 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dba:	e00d      	b.n	8002dd8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dbc:	f7fd fe7c 	bl	8000ab8 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d906      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e1d2      	b.n	8003174 <HAL_RCC_OscConfig+0x620>
 8002dce:	bf00      	nop
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dd8:	4b8c      	ldr	r3, [pc, #560]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1ea      	bne.n	8002dbc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80a6 	beq.w	8002f40 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df4:	2300      	movs	r3, #0
 8002df6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002df8:	4b84      	ldr	r3, [pc, #528]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_RCC_OscConfig+0x2b4>
 8002e04:	2301      	movs	r3, #1
 8002e06:	e000      	b.n	8002e0a <HAL_RCC_OscConfig+0x2b6>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00d      	beq.n	8002e2a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e0e:	4b7f      	ldr	r3, [pc, #508]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	4a7e      	ldr	r2, [pc, #504]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e18:	6593      	str	r3, [r2, #88]	; 0x58
 8002e1a:	4b7c      	ldr	r3, [pc, #496]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e26:	2301      	movs	r3, #1
 8002e28:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e2a:	4b79      	ldr	r3, [pc, #484]	; (8003010 <HAL_RCC_OscConfig+0x4bc>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d118      	bne.n	8002e68 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e36:	4b76      	ldr	r3, [pc, #472]	; (8003010 <HAL_RCC_OscConfig+0x4bc>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a75      	ldr	r2, [pc, #468]	; (8003010 <HAL_RCC_OscConfig+0x4bc>)
 8002e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e42:	f7fd fe39 	bl	8000ab8 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4a:	f7fd fe35 	bl	8000ab8 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e18b      	b.n	8003174 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e5c:	4b6c      	ldr	r3, [pc, #432]	; (8003010 <HAL_RCC_OscConfig+0x4bc>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d108      	bne.n	8002e82 <HAL_RCC_OscConfig+0x32e>
 8002e70:	4b66      	ldr	r3, [pc, #408]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e76:	4a65      	ldr	r2, [pc, #404]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e80:	e024      	b.n	8002ecc <HAL_RCC_OscConfig+0x378>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b05      	cmp	r3, #5
 8002e88:	d110      	bne.n	8002eac <HAL_RCC_OscConfig+0x358>
 8002e8a:	4b60      	ldr	r3, [pc, #384]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e90:	4a5e      	ldr	r2, [pc, #376]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002e92:	f043 0304 	orr.w	r3, r3, #4
 8002e96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e9a:	4b5c      	ldr	r3, [pc, #368]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea0:	4a5a      	ldr	r2, [pc, #360]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eaa:	e00f      	b.n	8002ecc <HAL_RCC_OscConfig+0x378>
 8002eac:	4b57      	ldr	r3, [pc, #348]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb2:	4a56      	ldr	r2, [pc, #344]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002eb4:	f023 0301 	bic.w	r3, r3, #1
 8002eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ebc:	4b53      	ldr	r3, [pc, #332]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec2:	4a52      	ldr	r2, [pc, #328]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002ec4:	f023 0304 	bic.w	r3, r3, #4
 8002ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d016      	beq.n	8002f02 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed4:	f7fd fdf0 	bl	8000ab8 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eda:	e00a      	b.n	8002ef2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002edc:	f7fd fdec 	bl	8000ab8 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e140      	b.n	8003174 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ef2:	4b46      	ldr	r3, [pc, #280]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0ed      	beq.n	8002edc <HAL_RCC_OscConfig+0x388>
 8002f00:	e015      	b.n	8002f2e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f02:	f7fd fdd9 	bl	8000ab8 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f08:	e00a      	b.n	8002f20 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0a:	f7fd fdd5 	bl	8000ab8 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e129      	b.n	8003174 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f20:	4b3a      	ldr	r3, [pc, #232]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1ed      	bne.n	8002f0a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f2e:	7ffb      	ldrb	r3, [r7, #31]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d105      	bne.n	8002f40 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f34:	4b35      	ldr	r3, [pc, #212]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f38:	4a34      	ldr	r2, [pc, #208]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d03c      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d01c      	beq.n	8002f8e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f54:	4b2d      	ldr	r3, [pc, #180]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f5a:	4a2c      	ldr	r2, [pc, #176]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f64:	f7fd fda8 	bl	8000ab8 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f6c:	f7fd fda4 	bl	8000ab8 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e0fa      	b.n	8003174 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f7e:	4b23      	ldr	r3, [pc, #140]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002f80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0ef      	beq.n	8002f6c <HAL_RCC_OscConfig+0x418>
 8002f8c:	e01b      	b.n	8002fc6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f8e:	4b1f      	ldr	r3, [pc, #124]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002f90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f94:	4a1d      	ldr	r2, [pc, #116]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002f96:	f023 0301 	bic.w	r3, r3, #1
 8002f9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9e:	f7fd fd8b 	bl	8000ab8 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fa6:	f7fd fd87 	bl	8000ab8 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e0dd      	b.n	8003174 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fb8:	4b14      	ldr	r3, [pc, #80]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002fba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1ef      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80d1 	beq.w	8003172 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fd0:	4b0e      	ldr	r3, [pc, #56]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 030c 	and.w	r3, r3, #12
 8002fd8:	2b0c      	cmp	r3, #12
 8002fda:	f000 808b 	beq.w	80030f4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d15e      	bne.n	80030a4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe6:	4b09      	ldr	r3, [pc, #36]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a08      	ldr	r2, [pc, #32]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002fec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff2:	f7fd fd61 	bl	8000ab8 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ff8:	e00c      	b.n	8003014 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ffa:	f7fd fd5d 	bl	8000ab8 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d905      	bls.n	8003014 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e0b3      	b.n	8003174 <HAL_RCC_OscConfig+0x620>
 800300c:	40021000 	.word	0x40021000
 8003010:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003014:	4b59      	ldr	r3, [pc, #356]	; (800317c <HAL_RCC_OscConfig+0x628>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1ec      	bne.n	8002ffa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003020:	4b56      	ldr	r3, [pc, #344]	; (800317c <HAL_RCC_OscConfig+0x628>)
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	4b56      	ldr	r3, [pc, #344]	; (8003180 <HAL_RCC_OscConfig+0x62c>)
 8003026:	4013      	ands	r3, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6a11      	ldr	r1, [r2, #32]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003030:	3a01      	subs	r2, #1
 8003032:	0112      	lsls	r2, r2, #4
 8003034:	4311      	orrs	r1, r2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800303a:	0212      	lsls	r2, r2, #8
 800303c:	4311      	orrs	r1, r2
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003042:	0852      	lsrs	r2, r2, #1
 8003044:	3a01      	subs	r2, #1
 8003046:	0552      	lsls	r2, r2, #21
 8003048:	4311      	orrs	r1, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800304e:	0852      	lsrs	r2, r2, #1
 8003050:	3a01      	subs	r2, #1
 8003052:	0652      	lsls	r2, r2, #25
 8003054:	4311      	orrs	r1, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800305a:	06d2      	lsls	r2, r2, #27
 800305c:	430a      	orrs	r2, r1
 800305e:	4947      	ldr	r1, [pc, #284]	; (800317c <HAL_RCC_OscConfig+0x628>)
 8003060:	4313      	orrs	r3, r2
 8003062:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003064:	4b45      	ldr	r3, [pc, #276]	; (800317c <HAL_RCC_OscConfig+0x628>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a44      	ldr	r2, [pc, #272]	; (800317c <HAL_RCC_OscConfig+0x628>)
 800306a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800306e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003070:	4b42      	ldr	r3, [pc, #264]	; (800317c <HAL_RCC_OscConfig+0x628>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4a41      	ldr	r2, [pc, #260]	; (800317c <HAL_RCC_OscConfig+0x628>)
 8003076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800307a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307c:	f7fd fd1c 	bl	8000ab8 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003084:	f7fd fd18 	bl	8000ab8 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e06e      	b.n	8003174 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003096:	4b39      	ldr	r3, [pc, #228]	; (800317c <HAL_RCC_OscConfig+0x628>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0x530>
 80030a2:	e066      	b.n	8003172 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a4:	4b35      	ldr	r3, [pc, #212]	; (800317c <HAL_RCC_OscConfig+0x628>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a34      	ldr	r2, [pc, #208]	; (800317c <HAL_RCC_OscConfig+0x628>)
 80030aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ae:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80030b0:	4b32      	ldr	r3, [pc, #200]	; (800317c <HAL_RCC_OscConfig+0x628>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	4a31      	ldr	r2, [pc, #196]	; (800317c <HAL_RCC_OscConfig+0x628>)
 80030b6:	f023 0303 	bic.w	r3, r3, #3
 80030ba:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80030bc:	4b2f      	ldr	r3, [pc, #188]	; (800317c <HAL_RCC_OscConfig+0x628>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4a2e      	ldr	r2, [pc, #184]	; (800317c <HAL_RCC_OscConfig+0x628>)
 80030c2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80030c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7fd fcf4 	bl	8000ab8 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d4:	f7fd fcf0 	bl	8000ab8 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e046      	b.n	8003174 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030e6:	4b25      	ldr	r3, [pc, #148]	; (800317c <HAL_RCC_OscConfig+0x628>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x580>
 80030f2:	e03e      	b.n	8003172 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e039      	b.n	8003174 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003100:	4b1e      	ldr	r3, [pc, #120]	; (800317c <HAL_RCC_OscConfig+0x628>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f003 0203 	and.w	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	429a      	cmp	r2, r3
 8003112:	d12c      	bne.n	800316e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	3b01      	subs	r3, #1
 8003120:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003122:	429a      	cmp	r2, r3
 8003124:	d123      	bne.n	800316e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003132:	429a      	cmp	r2, r3
 8003134:	d11b      	bne.n	800316e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003142:	429a      	cmp	r2, r3
 8003144:	d113      	bne.n	800316e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	085b      	lsrs	r3, r3, #1
 8003152:	3b01      	subs	r3, #1
 8003154:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003156:	429a      	cmp	r2, r3
 8003158:	d109      	bne.n	800316e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003164:	085b      	lsrs	r3, r3, #1
 8003166:	3b01      	subs	r3, #1
 8003168:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800316a:	429a      	cmp	r2, r3
 800316c:	d001      	beq.n	8003172 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3720      	adds	r7, #32
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40021000 	.word	0x40021000
 8003180:	019f800c 	.word	0x019f800c

08003184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e11e      	b.n	80033da <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800319c:	4b91      	ldr	r3, [pc, #580]	; (80033e4 <HAL_RCC_ClockConfig+0x260>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d910      	bls.n	80031cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031aa:	4b8e      	ldr	r3, [pc, #568]	; (80033e4 <HAL_RCC_ClockConfig+0x260>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 020f 	bic.w	r2, r3, #15
 80031b2:	498c      	ldr	r1, [pc, #560]	; (80033e4 <HAL_RCC_ClockConfig+0x260>)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ba:	4b8a      	ldr	r3, [pc, #552]	; (80033e4 <HAL_RCC_ClockConfig+0x260>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e106      	b.n	80033da <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d073      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d129      	bne.n	8003234 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031e0:	4b81      	ldr	r3, [pc, #516]	; (80033e8 <HAL_RCC_ClockConfig+0x264>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0f4      	b.n	80033da <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80031f0:	f000 f966 	bl	80034c0 <RCC_GetSysClockFreqFromPLLSource>
 80031f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4a7c      	ldr	r2, [pc, #496]	; (80033ec <HAL_RCC_ClockConfig+0x268>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d93f      	bls.n	800327e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80031fe:	4b7a      	ldr	r3, [pc, #488]	; (80033e8 <HAL_RCC_ClockConfig+0x264>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d009      	beq.n	800321e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003212:	2b00      	cmp	r3, #0
 8003214:	d033      	beq.n	800327e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800321a:	2b00      	cmp	r3, #0
 800321c:	d12f      	bne.n	800327e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800321e:	4b72      	ldr	r3, [pc, #456]	; (80033e8 <HAL_RCC_ClockConfig+0x264>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003226:	4a70      	ldr	r2, [pc, #448]	; (80033e8 <HAL_RCC_ClockConfig+0x264>)
 8003228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800322c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800322e:	2380      	movs	r3, #128	; 0x80
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	e024      	b.n	800327e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b02      	cmp	r3, #2
 800323a:	d107      	bne.n	800324c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800323c:	4b6a      	ldr	r3, [pc, #424]	; (80033e8 <HAL_RCC_ClockConfig+0x264>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d109      	bne.n	800325c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0c6      	b.n	80033da <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800324c:	4b66      	ldr	r3, [pc, #408]	; (80033e8 <HAL_RCC_ClockConfig+0x264>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0be      	b.n	80033da <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800325c:	f000 f8ce 	bl	80033fc <HAL_RCC_GetSysClockFreq>
 8003260:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4a61      	ldr	r2, [pc, #388]	; (80033ec <HAL_RCC_ClockConfig+0x268>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d909      	bls.n	800327e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800326a:	4b5f      	ldr	r3, [pc, #380]	; (80033e8 <HAL_RCC_ClockConfig+0x264>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003272:	4a5d      	ldr	r2, [pc, #372]	; (80033e8 <HAL_RCC_ClockConfig+0x264>)
 8003274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003278:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800327a:	2380      	movs	r3, #128	; 0x80
 800327c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800327e:	4b5a      	ldr	r3, [pc, #360]	; (80033e8 <HAL_RCC_ClockConfig+0x264>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f023 0203 	bic.w	r2, r3, #3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	4957      	ldr	r1, [pc, #348]	; (80033e8 <HAL_RCC_ClockConfig+0x264>)
 800328c:	4313      	orrs	r3, r2
 800328e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003290:	f7fd fc12 	bl	8000ab8 <HAL_GetTick>
 8003294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003296:	e00a      	b.n	80032ae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003298:	f7fd fc0e 	bl	8000ab8 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e095      	b.n	80033da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ae:	4b4e      	ldr	r3, [pc, #312]	; (80033e8 <HAL_RCC_ClockConfig+0x264>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 020c 	and.w	r2, r3, #12
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	429a      	cmp	r2, r3
 80032be:	d1eb      	bne.n	8003298 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d023      	beq.n	8003314 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032d8:	4b43      	ldr	r3, [pc, #268]	; (80033e8 <HAL_RCC_ClockConfig+0x264>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	4a42      	ldr	r2, [pc, #264]	; (80033e8 <HAL_RCC_ClockConfig+0x264>)
 80032de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032e2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d007      	beq.n	8003300 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80032f0:	4b3d      	ldr	r3, [pc, #244]	; (80033e8 <HAL_RCC_ClockConfig+0x264>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80032f8:	4a3b      	ldr	r2, [pc, #236]	; (80033e8 <HAL_RCC_ClockConfig+0x264>)
 80032fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003300:	4b39      	ldr	r3, [pc, #228]	; (80033e8 <HAL_RCC_ClockConfig+0x264>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	4936      	ldr	r1, [pc, #216]	; (80033e8 <HAL_RCC_ClockConfig+0x264>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
 8003312:	e008      	b.n	8003326 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	2b80      	cmp	r3, #128	; 0x80
 8003318:	d105      	bne.n	8003326 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800331a:	4b33      	ldr	r3, [pc, #204]	; (80033e8 <HAL_RCC_ClockConfig+0x264>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	4a32      	ldr	r2, [pc, #200]	; (80033e8 <HAL_RCC_ClockConfig+0x264>)
 8003320:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003324:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003326:	4b2f      	ldr	r3, [pc, #188]	; (80033e4 <HAL_RCC_ClockConfig+0x260>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d21d      	bcs.n	8003370 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003334:	4b2b      	ldr	r3, [pc, #172]	; (80033e4 <HAL_RCC_ClockConfig+0x260>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f023 020f 	bic.w	r2, r3, #15
 800333c:	4929      	ldr	r1, [pc, #164]	; (80033e4 <HAL_RCC_ClockConfig+0x260>)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	4313      	orrs	r3, r2
 8003342:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003344:	f7fd fbb8 	bl	8000ab8 <HAL_GetTick>
 8003348:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800334a:	e00a      	b.n	8003362 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800334c:	f7fd fbb4 	bl	8000ab8 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	; 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e03b      	b.n	80033da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003362:	4b20      	ldr	r3, [pc, #128]	; (80033e4 <HAL_RCC_ClockConfig+0x260>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d1ed      	bne.n	800334c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800337c:	4b1a      	ldr	r3, [pc, #104]	; (80033e8 <HAL_RCC_ClockConfig+0x264>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4917      	ldr	r1, [pc, #92]	; (80033e8 <HAL_RCC_ClockConfig+0x264>)
 800338a:	4313      	orrs	r3, r2
 800338c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d009      	beq.n	80033ae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800339a:	4b13      	ldr	r3, [pc, #76]	; (80033e8 <HAL_RCC_ClockConfig+0x264>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	490f      	ldr	r1, [pc, #60]	; (80033e8 <HAL_RCC_ClockConfig+0x264>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033ae:	f000 f825 	bl	80033fc <HAL_RCC_GetSysClockFreq>
 80033b2:	4602      	mov	r2, r0
 80033b4:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <HAL_RCC_ClockConfig+0x264>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	091b      	lsrs	r3, r3, #4
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	490c      	ldr	r1, [pc, #48]	; (80033f0 <HAL_RCC_ClockConfig+0x26c>)
 80033c0:	5ccb      	ldrb	r3, [r1, r3]
 80033c2:	f003 031f 	and.w	r3, r3, #31
 80033c6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ca:	4a0a      	ldr	r2, [pc, #40]	; (80033f4 <HAL_RCC_ClockConfig+0x270>)
 80033cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80033ce:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <HAL_RCC_ClockConfig+0x274>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fd fb24 	bl	8000a20 <HAL_InitTick>
 80033d8:	4603      	mov	r3, r0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40022000 	.word	0x40022000
 80033e8:	40021000 	.word	0x40021000
 80033ec:	04c4b400 	.word	0x04c4b400
 80033f0:	08003ea8 	.word	0x08003ea8
 80033f4:	20000000 	.word	0x20000000
 80033f8:	20000004 	.word	0x20000004

080033fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003402:	4b2c      	ldr	r3, [pc, #176]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 030c 	and.w	r3, r3, #12
 800340a:	2b04      	cmp	r3, #4
 800340c:	d102      	bne.n	8003414 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800340e:	4b2a      	ldr	r3, [pc, #168]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	e047      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003414:	4b27      	ldr	r3, [pc, #156]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 030c 	and.w	r3, r3, #12
 800341c:	2b08      	cmp	r3, #8
 800341e:	d102      	bne.n	8003426 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003420:	4b26      	ldr	r3, [pc, #152]	; (80034bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003422:	613b      	str	r3, [r7, #16]
 8003424:	e03e      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003426:	4b23      	ldr	r3, [pc, #140]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 030c 	and.w	r3, r3, #12
 800342e:	2b0c      	cmp	r3, #12
 8003430:	d136      	bne.n	80034a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003432:	4b20      	ldr	r3, [pc, #128]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800343c:	4b1d      	ldr	r3, [pc, #116]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	3301      	adds	r3, #1
 8003448:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2b03      	cmp	r3, #3
 800344e:	d10c      	bne.n	800346a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003450:	4a1a      	ldr	r2, [pc, #104]	; (80034bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	fbb2 f3f3 	udiv	r3, r2, r3
 8003458:	4a16      	ldr	r2, [pc, #88]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800345a:	68d2      	ldr	r2, [r2, #12]
 800345c:	0a12      	lsrs	r2, r2, #8
 800345e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003462:	fb02 f303 	mul.w	r3, r2, r3
 8003466:	617b      	str	r3, [r7, #20]
      break;
 8003468:	e00c      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800346a:	4a13      	ldr	r2, [pc, #76]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003472:	4a10      	ldr	r2, [pc, #64]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003474:	68d2      	ldr	r2, [r2, #12]
 8003476:	0a12      	lsrs	r2, r2, #8
 8003478:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800347c:	fb02 f303 	mul.w	r3, r2, r3
 8003480:	617b      	str	r3, [r7, #20]
      break;
 8003482:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003484:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	0e5b      	lsrs	r3, r3, #25
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	3301      	adds	r3, #1
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	fbb2 f3f3 	udiv	r3, r2, r3
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	e001      	b.n	80034a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80034a4:	693b      	ldr	r3, [r7, #16]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	371c      	adds	r7, #28
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40021000 	.word	0x40021000
 80034b8:	00f42400 	.word	0x00f42400
 80034bc:	007a1200 	.word	0x007a1200

080034c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034c6:	4b1e      	ldr	r3, [pc, #120]	; (8003540 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034d0:	4b1b      	ldr	r3, [pc, #108]	; (8003540 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	3301      	adds	r3, #1
 80034dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d10c      	bne.n	80034fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034e4:	4a17      	ldr	r2, [pc, #92]	; (8003544 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ec:	4a14      	ldr	r2, [pc, #80]	; (8003540 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034ee:	68d2      	ldr	r2, [r2, #12]
 80034f0:	0a12      	lsrs	r2, r2, #8
 80034f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034f6:	fb02 f303 	mul.w	r3, r2, r3
 80034fa:	617b      	str	r3, [r7, #20]
    break;
 80034fc:	e00c      	b.n	8003518 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034fe:	4a12      	ldr	r2, [pc, #72]	; (8003548 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	fbb2 f3f3 	udiv	r3, r2, r3
 8003506:	4a0e      	ldr	r2, [pc, #56]	; (8003540 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003508:	68d2      	ldr	r2, [r2, #12]
 800350a:	0a12      	lsrs	r2, r2, #8
 800350c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003510:	fb02 f303 	mul.w	r3, r2, r3
 8003514:	617b      	str	r3, [r7, #20]
    break;
 8003516:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003518:	4b09      	ldr	r3, [pc, #36]	; (8003540 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	0e5b      	lsrs	r3, r3, #25
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	3301      	adds	r3, #1
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003530:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003532:	687b      	ldr	r3, [r7, #4]
}
 8003534:	4618      	mov	r0, r3
 8003536:	371c      	adds	r7, #28
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	40021000 	.word	0x40021000
 8003544:	007a1200 	.word	0x007a1200
 8003548:	00f42400 	.word	0x00f42400

0800354c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003554:	2300      	movs	r3, #0
 8003556:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003558:	2300      	movs	r3, #0
 800355a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 8098 	beq.w	800369a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800356a:	2300      	movs	r3, #0
 800356c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800356e:	4b43      	ldr	r3, [pc, #268]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10d      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357a:	4b40      	ldr	r3, [pc, #256]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800357c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357e:	4a3f      	ldr	r2, [pc, #252]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003584:	6593      	str	r3, [r2, #88]	; 0x58
 8003586:	4b3d      	ldr	r3, [pc, #244]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358e:	60bb      	str	r3, [r7, #8]
 8003590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003592:	2301      	movs	r3, #1
 8003594:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003596:	4b3a      	ldr	r3, [pc, #232]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a39      	ldr	r2, [pc, #228]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800359c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035a2:	f7fd fa89 	bl	8000ab8 <HAL_GetTick>
 80035a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035a8:	e009      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035aa:	f7fd fa85 	bl	8000ab8 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d902      	bls.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	74fb      	strb	r3, [r7, #19]
        break;
 80035bc:	e005      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035be:	4b30      	ldr	r3, [pc, #192]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0ef      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80035ca:	7cfb      	ldrb	r3, [r7, #19]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d159      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035d0:	4b2a      	ldr	r3, [pc, #168]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d01e      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d019      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035ec:	4b23      	ldr	r3, [pc, #140]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035f8:	4b20      	ldr	r3, [pc, #128]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fe:	4a1f      	ldr	r2, [pc, #124]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003608:	4b1c      	ldr	r3, [pc, #112]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360e:	4a1b      	ldr	r2, [pc, #108]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003618:	4a18      	ldr	r2, [pc, #96]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d016      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362a:	f7fd fa45 	bl	8000ab8 <HAL_GetTick>
 800362e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003630:	e00b      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003632:	f7fd fa41 	bl	8000ab8 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003640:	4293      	cmp	r3, r2
 8003642:	d902      	bls.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	74fb      	strb	r3, [r7, #19]
            break;
 8003648:	e006      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800364a:	4b0c      	ldr	r3, [pc, #48]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800364c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0ec      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003658:	7cfb      	ldrb	r3, [r7, #19]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10b      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800365e:	4b07      	ldr	r3, [pc, #28]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003664:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	4903      	ldr	r1, [pc, #12]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003674:	e008      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003676:	7cfb      	ldrb	r3, [r7, #19]
 8003678:	74bb      	strb	r3, [r7, #18]
 800367a:	e005      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800367c:	40021000 	.word	0x40021000
 8003680:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003684:	7cfb      	ldrb	r3, [r7, #19]
 8003686:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003688:	7c7b      	ldrb	r3, [r7, #17]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d105      	bne.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800368e:	4ba6      	ldr	r3, [pc, #664]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003692:	4aa5      	ldr	r2, [pc, #660]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003698:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036a6:	4ba0      	ldr	r3, [pc, #640]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ac:	f023 0203 	bic.w	r2, r3, #3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	499c      	ldr	r1, [pc, #624]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036c8:	4b97      	ldr	r3, [pc, #604]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ce:	f023 020c 	bic.w	r2, r3, #12
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	4994      	ldr	r1, [pc, #592]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036ea:	4b8f      	ldr	r3, [pc, #572]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	498b      	ldr	r1, [pc, #556]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800370c:	4b86      	ldr	r3, [pc, #536]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003712:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	4983      	ldr	r1, [pc, #524]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800372e:	4b7e      	ldr	r3, [pc, #504]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003734:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	497a      	ldr	r1, [pc, #488]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003750:	4b75      	ldr	r3, [pc, #468]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003756:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	4972      	ldr	r1, [pc, #456]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003772:	4b6d      	ldr	r3, [pc, #436]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003778:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	4969      	ldr	r1, [pc, #420]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003794:	4b64      	ldr	r3, [pc, #400]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	4961      	ldr	r1, [pc, #388]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037b6:	4b5c      	ldr	r3, [pc, #368]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	4958      	ldr	r1, [pc, #352]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d015      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037d8:	4b53      	ldr	r3, [pc, #332]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	4950      	ldr	r1, [pc, #320]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037f6:	d105      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037f8:	4b4b      	ldr	r3, [pc, #300]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	4a4a      	ldr	r2, [pc, #296]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003802:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800380c:	2b00      	cmp	r3, #0
 800380e:	d015      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003810:	4b45      	ldr	r3, [pc, #276]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003816:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	4942      	ldr	r1, [pc, #264]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800382e:	d105      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003830:	4b3d      	ldr	r3, [pc, #244]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	4a3c      	ldr	r2, [pc, #240]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800383a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d015      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003848:	4b37      	ldr	r3, [pc, #220]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800384a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	4934      	ldr	r1, [pc, #208]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003866:	d105      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003868:	4b2f      	ldr	r3, [pc, #188]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	4a2e      	ldr	r2, [pc, #184]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800386e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003872:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d015      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003880:	4b29      	ldr	r3, [pc, #164]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003886:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388e:	4926      	ldr	r1, [pc, #152]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800389e:	d105      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038a0:	4b21      	ldr	r3, [pc, #132]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	4a20      	ldr	r2, [pc, #128]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d015      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038b8:	4b1b      	ldr	r3, [pc, #108]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c6:	4918      	ldr	r1, [pc, #96]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038d6:	d105      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038d8:	4b13      	ldr	r3, [pc, #76]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4a12      	ldr	r2, [pc, #72]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d015      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038f0:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80038f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fe:	490a      	ldr	r1, [pc, #40]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003900:	4313      	orrs	r3, r2
 8003902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800390e:	d105      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003910:	4b05      	ldr	r3, [pc, #20]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	4a04      	ldr	r2, [pc, #16]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800391a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800391c:	7cbb      	ldrb	r3, [r7, #18]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40021000 	.word	0x40021000

0800392c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d066      	beq.n	8003a0c <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fc ffaa 	bl	80008ac <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	22ca      	movs	r2, #202	; 0xca
 8003966:	625a      	str	r2, [r3, #36]	; 0x24
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2253      	movs	r2, #83	; 0x53
 800396e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f99a 	bl	8003caa <RTC_EnterInitMode>
 8003976:	4603      	mov	r3, r0
 8003978:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d13a      	bne.n	80039f6 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6812      	ldr	r2, [r2, #0]
 800398a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800398e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003992:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6999      	ldr	r1, [r3, #24]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68d9      	ldr	r1, [r3, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	041a      	lsls	r2, r3, #16
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f9a6 	bl	8003d16 <RTC_ExitInitMode>
 80039ca:	4603      	mov	r3, r0
 80039cc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d110      	bne.n	80039f6 <HAL_RTC_Init+0xca>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1a      	ldr	r2, [r3, #32]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	619a      	str	r2, [r3, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	22ff      	movs	r2, #255	; 0xff
 80039fc:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d103      	bne.n	8003a0c <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003a16:	b590      	push	{r4, r7, lr}
 8003a18:	b087      	sub	sp, #28
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_RTC_SetTime+0x1a>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e08b      	b.n	8003b48 <HAL_RTC_SetTime+0x132>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	22ca      	movs	r2, #202	; 0xca
 8003a46:	625a      	str	r2, [r3, #36]	; 0x24
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2253      	movs	r2, #83	; 0x53
 8003a4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f92a 	bl	8003caa <RTC_EnterInitMode>
 8003a56:	4603      	mov	r3, r0
 8003a58:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003a5a:	7cfb      	ldrb	r3, [r7, #19]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d163      	bne.n	8003b28 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d126      	bne.n	8003ab4 <HAL_RTC_SetTime+0x9e>
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d102      	bne.n	8003a7a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2200      	movs	r2, #0
 8003a78:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 f98c 	bl	8003d9c <RTC_ByteToBcd2>
 8003a84:	4603      	mov	r3, r0
 8003a86:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	785b      	ldrb	r3, [r3, #1]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 f985 	bl	8003d9c <RTC_ByteToBcd2>
 8003a92:	4603      	mov	r3, r0
 8003a94:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003a96:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	789b      	ldrb	r3, [r3, #2]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 f97d 	bl	8003d9c <RTC_ByteToBcd2>
 8003aa2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003aa4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	78db      	ldrb	r3, [r3, #3]
 8003aac:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]
 8003ab2:	e018      	b.n	8003ae6 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d102      	bne.n	8003ac8 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	785b      	ldrb	r3, [r3, #1]
 8003ad2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003ad4:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003ada:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	78db      	ldrb	r3, [r3, #3]
 8003ae0:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(hrtc->Instance->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003af0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003af4:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BKP);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699a      	ldr	r2, [r3, #24]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b04:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(hrtc->Instance->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6999      	ldr	r1, [r3, #24]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	431a      	orrs	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 f8f9 	bl	8003d16 <RTC_ExitInitMode>
 8003b24:	4603      	mov	r3, r0
 8003b26:	74fb      	strb	r3, [r7, #19]
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	22ff      	movs	r2, #255	; 0xff
 8003b2e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003b30:	7cfb      	ldrb	r3, [r7, #19]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d103      	bne.n	8003b3e <HAL_RTC_SetTime+0x128>
  {
     hrtc->State = HAL_RTC_STATE_READY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
    __HAL_UNLOCK(hrtc);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003b46:	7cfb      	ldrb	r3, [r7, #19]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	371c      	adds	r7, #28
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd90      	pop	{r4, r7, pc}

08003b50 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003b50:	b590      	push	{r4, r7, lr}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_RTC_SetDate+0x1a>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e075      	b.n	8003c56 <HAL_RTC_SetDate+0x106>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2202      	movs	r2, #2
 8003b76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10e      	bne.n	8003b9e <HAL_RTC_SetDate+0x4e>
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	785b      	ldrb	r3, [r3, #1]
 8003b84:	f003 0310 	and.w	r3, r3, #16
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	785b      	ldrb	r3, [r3, #1]
 8003b90:	f023 0310 	bic.w	r3, r3, #16
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	330a      	adds	r3, #10
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d11c      	bne.n	8003bde <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	78db      	ldrb	r3, [r3, #3]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 f8f7 	bl	8003d9c <RTC_ByteToBcd2>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	785b      	ldrb	r3, [r3, #1]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 f8f0 	bl	8003d9c <RTC_ByteToBcd2>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003bc0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	789b      	ldrb	r3, [r3, #2]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 f8e8 	bl	8003d9c <RTC_ByteToBcd2>
 8003bcc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003bce:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	e00e      	b.n	8003bfc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	78db      	ldrb	r3, [r3, #3]
 8003be2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	785b      	ldrb	r3, [r3, #1]
 8003be8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003bea:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003bf0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	22ca      	movs	r2, #202	; 0xca
 8003c02:	625a      	str	r2, [r3, #36]	; 0x24
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2253      	movs	r2, #83	; 0x53
 8003c0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 f84c 	bl	8003caa <RTC_EnterInitMode>
 8003c12:	4603      	mov	r3, r0
 8003c14:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003c16:	7cfb      	ldrb	r3, [r7, #19]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10c      	bne.n	8003c36 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    WRITE_REG(hrtc->Instance->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003c26:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003c2a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 f872 	bl	8003d16 <RTC_ExitInitMode>
 8003c32:	4603      	mov	r3, r0
 8003c34:	74fb      	strb	r3, [r7, #19]
  }
	
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	22ff      	movs	r2, #255	; 0xff
 8003c3c:	625a      	str	r2, [r3, #36]	; 0x24
 
  if (status == HAL_OK)
 8003c3e:	7cfb      	ldrb	r3, [r7, #19]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d103      	bne.n	8003c4c <HAL_RTC_SetDate+0xfc>
  {

    hrtc->State = HAL_RTC_STATE_READY ;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003c54:	7cfb      	ldrb	r3, [r7, #19]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd90      	pop	{r4, r7, pc}

08003c5e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b084      	sub	sp, #16
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68da      	ldr	r2, [r3, #12]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0220 	bic.w	r2, r2, #32
 8003c74:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003c76:	f7fc ff1f 	bl	8000ab8 <HAL_GetTick>
 8003c7a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8003c7c:	e009      	b.n	8003c92 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c7e:	f7fc ff1b 	bl	8000ab8 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c8c:	d901      	bls.n	8003c92 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e007      	b.n	8003ca2 <HAL_RTC_WaitForSynchro+0x44>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0ee      	beq.n	8003c7e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b084      	sub	sp, #16
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d123      	bne.n	8003d0c <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cd2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003cd4:	f7fc fef0 	bl	8000ab8 <HAL_GetTick>
 8003cd8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003cda:	e00d      	b.n	8003cf8 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003cdc:	f7fc feec 	bl	8000ab8 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cea:	d905      	bls.n	8003cf8 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d102      	bne.n	8003d0c <RTC_EnterInitMode+0x62>
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
 8003d08:	2b03      	cmp	r3, #3
 8003d0a:	d1e7      	bne.n	8003cdc <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b084      	sub	sp, #16
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d30:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10c      	bne.n	8003d5a <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7ff ff8c 	bl	8003c5e <HAL_RTC_WaitForSynchro>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d022      	beq.n	8003d92 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2203      	movs	r2, #3
 8003d50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	73fb      	strb	r3, [r7, #15]
 8003d58:	e01b      	b.n	8003d92 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699a      	ldr	r2, [r3, #24]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0220 	bic.w	r2, r2, #32
 8003d68:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff ff77 	bl	8003c5e <HAL_RTC_WaitForSynchro>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2203      	movs	r2, #3
 8003d7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699a      	ldr	r2, [r3, #24]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 0220 	orr.w	r2, r2, #32
 8003d90:	619a      	str	r2, [r3, #24]
  }

  return status;
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	4603      	mov	r3, r0
 8003da4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8003daa:	79fb      	ldrb	r3, [r7, #7]
 8003dac:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8003dae:	e005      	b.n	8003dbc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	3301      	adds	r3, #1
 8003db4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8003db6:	7afb      	ldrb	r3, [r7, #11]
 8003db8:	3b0a      	subs	r3, #10
 8003dba:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8003dbc:	7afb      	ldrb	r3, [r7, #11]
 8003dbe:	2b09      	cmp	r3, #9
 8003dc0:	d8f6      	bhi.n	8003db0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	7afb      	ldrb	r3, [r7, #11]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	b2db      	uxtb	r3, r3
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified TAMP Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 8003de8:	4b07      	ldr	r3, [pc, #28]	; (8003e08 <HAL_RTCEx_BKUPWrite+0x2c>)
 8003dea:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	4413      	add	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	601a      	str	r2, [r3, #0]
}
 8003dfc:	bf00      	nop
 8003dfe:	371c      	adds	r7, #28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	40002500 	.word	0x40002500

08003e0c <memset>:
 8003e0c:	4402      	add	r2, r0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d100      	bne.n	8003e16 <memset+0xa>
 8003e14:	4770      	bx	lr
 8003e16:	f803 1b01 	strb.w	r1, [r3], #1
 8003e1a:	e7f9      	b.n	8003e10 <memset+0x4>

08003e1c <__libc_init_array>:
 8003e1c:	b570      	push	{r4, r5, r6, lr}
 8003e1e:	4d0d      	ldr	r5, [pc, #52]	; (8003e54 <__libc_init_array+0x38>)
 8003e20:	4c0d      	ldr	r4, [pc, #52]	; (8003e58 <__libc_init_array+0x3c>)
 8003e22:	1b64      	subs	r4, r4, r5
 8003e24:	10a4      	asrs	r4, r4, #2
 8003e26:	2600      	movs	r6, #0
 8003e28:	42a6      	cmp	r6, r4
 8003e2a:	d109      	bne.n	8003e40 <__libc_init_array+0x24>
 8003e2c:	4d0b      	ldr	r5, [pc, #44]	; (8003e5c <__libc_init_array+0x40>)
 8003e2e:	4c0c      	ldr	r4, [pc, #48]	; (8003e60 <__libc_init_array+0x44>)
 8003e30:	f000 f818 	bl	8003e64 <_init>
 8003e34:	1b64      	subs	r4, r4, r5
 8003e36:	10a4      	asrs	r4, r4, #2
 8003e38:	2600      	movs	r6, #0
 8003e3a:	42a6      	cmp	r6, r4
 8003e3c:	d105      	bne.n	8003e4a <__libc_init_array+0x2e>
 8003e3e:	bd70      	pop	{r4, r5, r6, pc}
 8003e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e44:	4798      	blx	r3
 8003e46:	3601      	adds	r6, #1
 8003e48:	e7ee      	b.n	8003e28 <__libc_init_array+0xc>
 8003e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e4e:	4798      	blx	r3
 8003e50:	3601      	adds	r6, #1
 8003e52:	e7f2      	b.n	8003e3a <__libc_init_array+0x1e>
 8003e54:	08003eb8 	.word	0x08003eb8
 8003e58:	08003eb8 	.word	0x08003eb8
 8003e5c:	08003eb8 	.word	0x08003eb8
 8003e60:	08003ebc 	.word	0x08003ebc

08003e64 <_init>:
 8003e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e66:	bf00      	nop
 8003e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6a:	bc08      	pop	{r3}
 8003e6c:	469e      	mov	lr, r3
 8003e6e:	4770      	bx	lr

08003e70 <_fini>:
 8003e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e72:	bf00      	nop
 8003e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e76:	bc08      	pop	{r3}
 8003e78:	469e      	mov	lr, r3
 8003e7a:	4770      	bx	lr
