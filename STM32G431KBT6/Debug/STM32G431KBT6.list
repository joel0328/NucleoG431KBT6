
STM32G431KBT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004690  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004870  08004870  00014870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004910  08004910  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004910  08004910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004918  08004918  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004918  08004918  00014918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800491c  0800491c  0001491c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  2000005c  0800497c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  0800497c  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000119aa  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002617  00000000  00000000  00031a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  00034090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bbe  00000000  00000000  00034fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e70f  00000000  00000000  00035b76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013039  00000000  00000000  00054285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c004e  00000000  00000000  000672be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043f8  00000000  00000000  0012730c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0012b704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004858 	.word	0x08004858

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08004858 	.word	0x08004858

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x7E // change this according to ur setup  //4E for PCF8574 and 7E for PCF8574A (2 line display)

void lcd_send_cmd (char cmd)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af02      	add	r7, sp, #8
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	f023 030f 	bic.w	r3, r3, #15
 80005cc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	011b      	lsls	r3, r3, #4
 80005d2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	f043 030c 	orr.w	r3, r3, #12
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	f043 0308 	orr.w	r3, r3, #8
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80005e8:	7bbb      	ldrb	r3, [r7, #14]
 80005ea:	f043 030c 	orr.w	r3, r3, #12
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80005f2:	7bbb      	ldrb	r3, [r7, #14]
 80005f4:	f043 0308 	orr.w	r3, r3, #8
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005fc:	f107 0208 	add.w	r2, r7, #8
 8000600:	2364      	movs	r3, #100	; 0x64
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2304      	movs	r3, #4
 8000606:	217e      	movs	r1, #126	; 0x7e
 8000608:	4803      	ldr	r0, [pc, #12]	; (8000618 <lcd_send_cmd+0x5c>)
 800060a:	f001 f825 	bl	8001658 <HAL_I2C_Master_Transmit>
}
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000078 	.word	0x20000078

0800061c <lcd_send_data>:

void lcd_send_data (char data)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af02      	add	r7, sp, #8
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	f023 030f 	bic.w	r3, r3, #15
 800062c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	011b      	lsls	r3, r3, #4
 8000632:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	f043 030d 	orr.w	r3, r3, #13
 800063a:	b2db      	uxtb	r3, r3
 800063c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	f043 0309 	orr.w	r3, r3, #9
 8000644:	b2db      	uxtb	r3, r3
 8000646:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000648:	7bbb      	ldrb	r3, [r7, #14]
 800064a:	f043 030d 	orr.w	r3, r3, #13
 800064e:	b2db      	uxtb	r3, r3
 8000650:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000652:	7bbb      	ldrb	r3, [r7, #14]
 8000654:	f043 0309 	orr.w	r3, r3, #9
 8000658:	b2db      	uxtb	r3, r3
 800065a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800065c:	f107 0208 	add.w	r2, r7, #8
 8000660:	2364      	movs	r3, #100	; 0x64
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2304      	movs	r3, #4
 8000666:	217e      	movs	r1, #126	; 0x7e
 8000668:	4803      	ldr	r0, [pc, #12]	; (8000678 <lcd_send_data+0x5c>)
 800066a:	f000 fff5 	bl	8001658 <HAL_I2C_Master_Transmit>
}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000078 	.word	0x20000078

0800067c <lcd_clear>:

void lcd_clear (void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000682:	2080      	movs	r0, #128	; 0x80
 8000684:	f7ff ff9a 	bl	80005bc <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	e005      	b.n	800069a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800068e:	2020      	movs	r0, #32
 8000690:	f7ff ffc4 	bl	800061c <lcd_send_data>
	for (int i=0; i<70; i++)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3301      	adds	r3, #1
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2b45      	cmp	r3, #69	; 0x45
 800069e:	ddf6      	ble.n	800068e <lcd_clear+0x12>
	}
}
 80006a0:	bf00      	nop
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
    switch (row)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	d81f      	bhi.n	80006fc <lcd_put_cur+0x50>
 80006bc:	a201      	add	r2, pc, #4	; (adr r2, 80006c4 <lcd_put_cur+0x18>)
 80006be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c2:	bf00      	nop
 80006c4:	080006d5 	.word	0x080006d5
 80006c8:	080006df 	.word	0x080006df
 80006cc:	080006e9 	.word	0x080006e9
 80006d0:	080006f3 	.word	0x080006f3
    {
        case 0:
            col |= 0x80;
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006da:	603b      	str	r3, [r7, #0]
            break;
 80006dc:	e00e      	b.n	80006fc <lcd_put_cur+0x50>
        case 1:
            col |= 0xC0;
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80006e4:	603b      	str	r3, [r7, #0]
            break;
 80006e6:	e009      	b.n	80006fc <lcd_put_cur+0x50>
        case 2:
			col |= 0x94;
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	f043 0394 	orr.w	r3, r3, #148	; 0x94
 80006ee:	603b      	str	r3, [r7, #0]
        	break;
 80006f0:	e004      	b.n	80006fc <lcd_put_cur+0x50>
        case 3:
		    col |= 0xD4;
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	f043 03d4 	orr.w	r3, r3, #212	; 0xd4
 80006f8:	603b      	str	r3, [r7, #0]
        	break;
 80006fa:	bf00      	nop
    }
    lcd_send_cmd (col);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ff5b 	bl	80005bc <lcd_send_cmd>
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop

08000710 <lcd_init>:


void lcd_init (void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000714:	2032      	movs	r0, #50	; 0x32
 8000716:	f000 fc87 	bl	8001028 <HAL_Delay>
	lcd_send_cmd (0x30);
 800071a:	2030      	movs	r0, #48	; 0x30
 800071c:	f7ff ff4e 	bl	80005bc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000720:	2005      	movs	r0, #5
 8000722:	f000 fc81 	bl	8001028 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000726:	2030      	movs	r0, #48	; 0x30
 8000728:	f7ff ff48 	bl	80005bc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800072c:	2001      	movs	r0, #1
 800072e:	f000 fc7b 	bl	8001028 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000732:	2030      	movs	r0, #48	; 0x30
 8000734:	f7ff ff42 	bl	80005bc <lcd_send_cmd>
	HAL_Delay(10);
 8000738:	200a      	movs	r0, #10
 800073a:	f000 fc75 	bl	8001028 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800073e:	2020      	movs	r0, #32
 8000740:	f7ff ff3c 	bl	80005bc <lcd_send_cmd>
	HAL_Delay(10);
 8000744:	200a      	movs	r0, #10
 8000746:	f000 fc6f 	bl	8001028 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800074a:	2028      	movs	r0, #40	; 0x28
 800074c:	f7ff ff36 	bl	80005bc <lcd_send_cmd>
	HAL_Delay(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f000 fc69 	bl	8001028 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000756:	2008      	movs	r0, #8
 8000758:	f7ff ff30 	bl	80005bc <lcd_send_cmd>
	HAL_Delay(1);
 800075c:	2001      	movs	r0, #1
 800075e:	f000 fc63 	bl	8001028 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000762:	2001      	movs	r0, #1
 8000764:	f7ff ff2a 	bl	80005bc <lcd_send_cmd>
	HAL_Delay(1);
 8000768:	2001      	movs	r0, #1
 800076a:	f000 fc5d 	bl	8001028 <HAL_Delay>
	HAL_Delay(1);
 800076e:	2001      	movs	r0, #1
 8000770:	f000 fc5a 	bl	8001028 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000774:	2006      	movs	r0, #6
 8000776:	f7ff ff21 	bl	80005bc <lcd_send_cmd>
	HAL_Delay(1);
 800077a:	2001      	movs	r0, #1
 800077c:	f000 fc54 	bl	8001028 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000780:	200c      	movs	r0, #12
 8000782:	f7ff ff1b 	bl	80005bc <lcd_send_cmd>
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}

0800078a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000792:	e006      	b.n	80007a2 <lcd_send_string+0x18>
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	1c5a      	adds	r2, r3, #1
 8000798:	607a      	str	r2, [r7, #4]
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff3d 	bl	800061c <lcd_send_data>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d1f4      	bne.n	8000794 <lcd_send_string+0xa>
}
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <Display_Row1>:

RTC_DateTypeDef gDate;
RTC_TimeTypeDef gTime;

void Display_Row1 (void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	lcd_put_cur(0, 0);
 80007b8:	2100      	movs	r1, #0
 80007ba:	2000      	movs	r0, #0
 80007bc:	f7ff ff76 	bl	80006ac <lcd_put_cur>
	lcd_send_string(time);
 80007c0:	4802      	ldr	r0, [pc, #8]	; (80007cc <Display_Row1+0x18>)
 80007c2:	f7ff ffe2 	bl	800078a <lcd_send_string>
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	2000017c 	.word	0x2000017c

080007d0 <Display_Row2>:

void Display_Row2 (void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	lcd_put_cur(1, 0);
 80007d4:	2100      	movs	r1, #0
 80007d6:	2001      	movs	r0, #1
 80007d8:	f7ff ff68 	bl	80006ac <lcd_put_cur>
	lcd_send_string(date);
 80007dc:	4802      	ldr	r0, [pc, #8]	; (80007e8 <Display_Row2+0x18>)
 80007de:	f7ff ffd4 	bl	800078a <lcd_send_string>
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000188 	.word	0x20000188

080007ec <set_time>:

void set_time (void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
    /**Initialize RTC and set the Time and Date
    */
  sTime.Hours = 0x15;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <set_time+0x74>)
 80007f2:	2215      	movs	r2, #21
 80007f4:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x31;
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <set_time+0x74>)
 80007f8:	2231      	movs	r2, #49	; 0x31
 80007fa:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x45;
 80007fc:	4b18      	ldr	r3, [pc, #96]	; (8000860 <set_time+0x74>)
 80007fe:	2245      	movs	r2, #69	; 0x45
 8000800:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <set_time+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <set_time+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800080e:	2201      	movs	r2, #1
 8000810:	4913      	ldr	r1, [pc, #76]	; (8000860 <set_time+0x74>)
 8000812:	4814      	ldr	r0, [pc, #80]	; (8000864 <set_time+0x78>)
 8000814:	f002 fae7 	bl	8002de6 <HAL_RTC_SetTime>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <set_time+0x36>
   {
     Error_Handler();
 800081e:	f000 f9a5 	bl	8000b6c <Error_Handler>
   }

  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <set_time+0x7c>)
 8000824:	2202      	movs	r2, #2
 8000826:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <set_time+0x7c>)
 800082a:	2208      	movs	r2, #8
 800082c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x08;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <set_time+0x7c>)
 8000830:	2208      	movs	r2, #8
 8000832:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x23;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <set_time+0x7c>)
 8000836:	2223      	movs	r2, #35	; 0x23
 8000838:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800083a:	2201      	movs	r2, #1
 800083c:	490a      	ldr	r1, [pc, #40]	; (8000868 <set_time+0x7c>)
 800083e:	4809      	ldr	r0, [pc, #36]	; (8000864 <set_time+0x78>)
 8000840:	f002 fbca 	bl	8002fd8 <HAL_RTC_SetDate>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <set_time+0x62>
  {
    Error_Handler();
 800084a:	f000 f98f 	bl	8000b6c <Error_Handler>
  }

  /* USER CODE BEGIN RTC_Init 4 */

  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);  // backup register
 800084e:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000852:	2101      	movs	r1, #1
 8000854:	4803      	ldr	r0, [pc, #12]	; (8000864 <set_time+0x78>)
 8000856:	f002 fd6f 	bl	8003338 <HAL_RTCEx_BKUPWrite>

  /* USER CODE END RTC_Init 4 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000194 	.word	0x20000194
 8000864:	200000c4 	.word	0x200000c4
 8000868:	200001a8 	.word	0x200001a8

0800086c <get_time>:
void get_time(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af02      	add	r7, sp, #8
  /* Get the RTC current Time */
  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8000872:	2200      	movs	r2, #0
 8000874:	4914      	ldr	r1, [pc, #80]	; (80008c8 <get_time+0x5c>)
 8000876:	4815      	ldr	r0, [pc, #84]	; (80008cc <get_time+0x60>)
 8000878:	f002 fb52 	bl	8002f20 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800087c:	2200      	movs	r2, #0
 800087e:	4914      	ldr	r1, [pc, #80]	; (80008d0 <get_time+0x64>)
 8000880:	4812      	ldr	r0, [pc, #72]	; (80008cc <get_time+0x60>)
 8000882:	f002 fc30 	bl	80030e6 <HAL_RTC_GetDate>

  /* Display time Format: hh:mm:ss */
  sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <get_time+0x5c>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	461a      	mov	r2, r3
 800088c:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <get_time+0x5c>)
 800088e:	785b      	ldrb	r3, [r3, #1]
 8000890:	4619      	mov	r1, r3
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <get_time+0x5c>)
 8000894:	789b      	ldrb	r3, [r3, #2]
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	460b      	mov	r3, r1
 800089a:	490e      	ldr	r1, [pc, #56]	; (80008d4 <get_time+0x68>)
 800089c:	480e      	ldr	r0, [pc, #56]	; (80008d8 <get_time+0x6c>)
 800089e:	f003 fb37 	bl	8003f10 <siprintf>

  /* Display date Format: mm-dd-yy */
  sprintf((char*)date,"%02d-%02d-%2d",gDate.Month, gDate.Date, 2000 + gDate.Year);  // I like the date first
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <get_time+0x64>)
 80008a4:	785b      	ldrb	r3, [r3, #1]
 80008a6:	461a      	mov	r2, r3
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <get_time+0x64>)
 80008aa:	789b      	ldrb	r3, [r3, #2]
 80008ac:	4619      	mov	r1, r3
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <get_time+0x64>)
 80008b0:	78db      	ldrb	r3, [r3, #3]
 80008b2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	460b      	mov	r3, r1
 80008ba:	4908      	ldr	r1, [pc, #32]	; (80008dc <get_time+0x70>)
 80008bc:	4808      	ldr	r0, [pc, #32]	; (80008e0 <get_time+0x74>)
 80008be:	f003 fb27 	bl	8003f10 <siprintf>
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200001b0 	.word	0x200001b0
 80008cc:	200000c4 	.word	0x200000c4
 80008d0:	200001ac 	.word	0x200001ac
 80008d4:	08004870 	.word	0x08004870
 80008d8:	2000017c 	.word	0x2000017c
 80008dc:	08004880 	.word	0x08004880
 80008e0:	20000188 	.word	0x20000188

080008e4 <display_time>:

//Let's display the time and date on lcd
void display_time (void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	Display_Row1();
 80008e8:	f7ff ff64 	bl	80007b4 <Display_Row1>
	Display_Row2();
 80008ec:	f7ff ff70 	bl	80007d0 <Display_Row2>
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f8:	f000 fb25 	bl	8000f46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008fc:	f000 f818 	bl	8000930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000900:	f000 f910 	bl	8000b24 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000904:	f000 f856 	bl	80009b4 <MX_I2C1_Init>
  MX_RTC_Init();
 8000908:	f000 f894 	bl	8000a34 <MX_RTC_Init>
  MX_USART1_UART_Init();
 800090c:	f000 f8be 	bl	8000a8c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000910:	f7ff fefe 	bl	8000710 <lcd_init>
  lcd_send_string("<<init>>");
 8000914:	4805      	ldr	r0, [pc, #20]	; (800092c <main+0x38>)
 8000916:	f7ff ff38 	bl	800078a <lcd_send_string>
  lcd_clear();
 800091a:	f7ff feaf 	bl	800067c <lcd_clear>
  set_time();
 800091e:	f7ff ff65 	bl	80007ec <set_time>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  get_time();
 8000922:	f7ff ffa3 	bl	800086c <get_time>
	  display_time();
 8000926:	f7ff ffdd 	bl	80008e4 <display_time>
	  get_time();
 800092a:	e7fa      	b.n	8000922 <main+0x2e>
 800092c:	08004890 	.word	0x08004890

08000930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b094      	sub	sp, #80	; 0x50
 8000934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000936:	f107 0318 	add.w	r3, r7, #24
 800093a:	2238      	movs	r2, #56	; 0x38
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f003 fb06 	bl	8003f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000952:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000956:	f001 fa09 	bl	8001d6c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800095a:	230a      	movs	r3, #10
 800095c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800095e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000964:	2340      	movs	r3, #64	; 0x40
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000968:	2301      	movs	r3, #1
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800096c:	2300      	movs	r3, #0
 800096e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000970:	f107 0318 	add.w	r3, r7, #24
 8000974:	4618      	mov	r0, r3
 8000976:	f001 fa9d 	bl	8001eb4 <HAL_RCC_OscConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000980:	f000 f8f4 	bl	8000b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000984:	230f      	movs	r3, #15
 8000986:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000988:	2301      	movs	r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f001 fda1 	bl	80024e4 <HAL_RCC_ClockConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80009a8:	f000 f8e0 	bl	8000b6c <Error_Handler>
  }
}
 80009ac:	bf00      	nop
 80009ae:	3750      	adds	r7, #80	; 0x50
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009ba:	4a1c      	ldr	r2, [pc, #112]	; (8000a2c <MX_I2C1_Init+0x78>)
 80009bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009c0:	4a1b      	ldr	r2, [pc, #108]	; (8000a30 <MX_I2C1_Init+0x7c>)
 80009c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009c4:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009d0:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ee:	480e      	ldr	r0, [pc, #56]	; (8000a28 <MX_I2C1_Init+0x74>)
 80009f0:	f000 fda2 	bl	8001538 <HAL_I2C_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009fa:	f000 f8b7 	bl	8000b6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009fe:	2100      	movs	r1, #0
 8000a00:	4809      	ldr	r0, [pc, #36]	; (8000a28 <MX_I2C1_Init+0x74>)
 8000a02:	f001 f91b 	bl	8001c3c <HAL_I2CEx_ConfigAnalogFilter>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a0c:	f000 f8ae 	bl	8000b6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a10:	2100      	movs	r1, #0
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_I2C1_Init+0x74>)
 8000a14:	f001 f95d 	bl	8001cd2 <HAL_I2CEx_ConfigDigitalFilter>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a1e:	f000 f8a5 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000078 	.word	0x20000078
 8000a2c:	40005400 	.word	0x40005400
 8000a30:	00303d5b 	.word	0x00303d5b

08000a34 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MX_RTC_Init+0x50>)
 8000a3a:	4a13      	ldr	r2, [pc, #76]	; (8000a88 <MX_RTC_Init+0x54>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_RTC_Init+0x50>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_RTC_Init+0x50>)
 8000a46:	227f      	movs	r2, #127	; 0x7f
 8000a48:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_RTC_Init+0x50>)
 8000a4c:	22ff      	movs	r2, #255	; 0xff
 8000a4e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_RTC_Init+0x50>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MX_RTC_Init+0x50>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_RTC_Init+0x50>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <MX_RTC_Init+0x50>)
 8000a64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a68:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_RTC_Init+0x50>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a70:	4804      	ldr	r0, [pc, #16]	; (8000a84 <MX_RTC_Init+0x50>)
 8000a72:	f002 f943 	bl	8002cfc <HAL_RTC_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000a7c:	f000 f876 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200000c4 	.word	0x200000c4
 8000a88:	40002800 	.word	0x40002800

08000a8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a90:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000a92:	4a23      	ldr	r2, [pc, #140]	; (8000b20 <MX_USART1_UART_Init+0x94>)
 8000a94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a96:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9e:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ad4:	4811      	ldr	r0, [pc, #68]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000ad6:	f002 fc47 	bl	8003368 <HAL_UART_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ae0:	f000 f844 	bl	8000b6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	480d      	ldr	r0, [pc, #52]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000ae8:	f003 f948 	bl	8003d7c <HAL_UARTEx_SetTxFifoThreshold>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000af2:	f000 f83b 	bl	8000b6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af6:	2100      	movs	r1, #0
 8000af8:	4808      	ldr	r0, [pc, #32]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000afa:	f003 f97d 	bl	8003df8 <HAL_UARTEx_SetRxFifoThreshold>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b04:	f000 f832 	bl	8000b6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <MX_USART1_UART_Init+0x90>)
 8000b0a:	f003 f8fe 	bl	8003d0a <HAL_UARTEx_DisableFifoMode>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b14:	f000 f82a 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200000ec 	.word	0x200000ec
 8000b20:	40013800 	.word	0x40013800

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_GPIO_Init+0x44>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <MX_GPIO_Init+0x44>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_GPIO_Init+0x44>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_GPIO_Init+0x44>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <MX_GPIO_Init+0x44>)
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_GPIO_Init+0x44>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40021000 	.word	0x40021000

08000b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
}
 8000b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <Error_Handler+0x8>
	...

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <HAL_MspInit+0x44>)
 8000b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b82:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <HAL_MspInit+0x44>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6613      	str	r3, [r2, #96]	; 0x60
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <HAL_MspInit+0x44>)
 8000b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <HAL_MspInit+0x44>)
 8000b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9a:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <HAL_MspInit+0x44>)
 8000b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_MspInit+0x44>)
 8000ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b09c      	sub	sp, #112	; 0x70
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bd8:	f107 0318 	add.w	r3, r7, #24
 8000bdc:	2244      	movs	r2, #68	; 0x44
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f003 f9b5 	bl	8003f50 <memset>
  if(hi2c->Instance==I2C1)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a2d      	ldr	r2, [pc, #180]	; (8000ca0 <HAL_I2C_MspInit+0xe0>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d153      	bne.n	8000c98 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bf0:	2340      	movs	r3, #64	; 0x40
 8000bf2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf8:	f107 0318 	add.w	r3, r7, #24
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f001 fe8d 	bl	800291c <HAL_RCCEx_PeriphCLKConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c08:	f7ff ffb0 	bl	8000b6c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <HAL_I2C_MspInit+0xe4>)
 8000c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c10:	4a24      	ldr	r2, [pc, #144]	; (8000ca4 <HAL_I2C_MspInit+0xe4>)
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c18:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <HAL_I2C_MspInit+0xe4>)
 8000c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	617b      	str	r3, [r7, #20]
 8000c22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c24:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <HAL_I2C_MspInit+0xe4>)
 8000c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c28:	4a1e      	ldr	r2, [pc, #120]	; (8000ca4 <HAL_I2C_MspInit+0xe4>)
 8000c2a:	f043 0302 	orr.w	r3, r3, #2
 8000c2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c30:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <HAL_I2C_MspInit+0xe4>)
 8000c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c34:	f003 0302 	and.w	r3, r3, #2
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c40:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c42:	2312      	movs	r3, #18
 8000c44:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c4e:	2304      	movs	r3, #4
 8000c50:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c56:	4619      	mov	r1, r3
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f000 faea 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c60:	2380      	movs	r3, #128	; 0x80
 8000c62:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c64:	2312      	movs	r3, #18
 8000c66:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c70:	2304      	movs	r3, #4
 8000c72:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <HAL_I2C_MspInit+0xe8>)
 8000c7c:	f000 fada 	bl	8001234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_I2C_MspInit+0xe4>)
 8000c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c84:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <HAL_I2C_MspInit+0xe4>)
 8000c86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c8a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <HAL_I2C_MspInit+0xe4>)
 8000c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c98:	bf00      	nop
 8000c9a:	3770      	adds	r7, #112	; 0x70
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40005400 	.word	0x40005400
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	48000400 	.word	0x48000400

08000cac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b094      	sub	sp, #80	; 0x50
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	2244      	movs	r2, #68	; 0x44
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f003 f947 	bl	8003f50 <memset>
  if(hrtc->Instance==RTC)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a15      	ldr	r2, [pc, #84]	; (8000d1c <HAL_RTC_MspInit+0x70>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d123      	bne.n	8000d14 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ccc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000cd0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cd6:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd8:	f107 030c 	add.w	r3, r7, #12
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f001 fe1d 	bl	800291c <HAL_RCCEx_PeriphCLKConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000ce8:	f7ff ff40 	bl	8000b6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <HAL_RTC_MspInit+0x74>)
 8000cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <HAL_RTC_MspInit+0x74>)
 8000cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <HAL_RTC_MspInit+0x74>)
 8000cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d00:	4a07      	ldr	r2, [pc, #28]	; (8000d20 <HAL_RTC_MspInit+0x74>)
 8000d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d06:	6593      	str	r3, [r2, #88]	; 0x58
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <HAL_RTC_MspInit+0x74>)
 8000d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d14:	bf00      	nop
 8000d16:	3750      	adds	r7, #80	; 0x50
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40002800 	.word	0x40002800
 8000d20:	40021000 	.word	0x40021000

08000d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b09c      	sub	sp, #112	; 0x70
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d3c:	f107 0318 	add.w	r3, r7, #24
 8000d40:	2244      	movs	r2, #68	; 0x44
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f003 f903 	bl	8003f50 <memset>
  if(huart->Instance==USART1)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a2d      	ldr	r2, [pc, #180]	; (8000e04 <HAL_UART_MspInit+0xe0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d153      	bne.n	8000dfc <HAL_UART_MspInit+0xd8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d54:	2301      	movs	r3, #1
 8000d56:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d5c:	f107 0318 	add.w	r3, r7, #24
 8000d60:	4618      	mov	r0, r3
 8000d62:	f001 fddb 	bl	800291c <HAL_RCCEx_PeriphCLKConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d6c:	f7ff fefe 	bl	8000b6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d70:	4b25      	ldr	r3, [pc, #148]	; (8000e08 <HAL_UART_MspInit+0xe4>)
 8000d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d74:	4a24      	ldr	r2, [pc, #144]	; (8000e08 <HAL_UART_MspInit+0xe4>)
 8000d76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7a:	6613      	str	r3, [r2, #96]	; 0x60
 8000d7c:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <HAL_UART_MspInit+0xe4>)
 8000d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <HAL_UART_MspInit+0xe4>)
 8000d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8c:	4a1e      	ldr	r2, [pc, #120]	; (8000e08 <HAL_UART_MspInit+0xe4>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d94:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <HAL_UART_MspInit+0xe4>)
 8000d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <HAL_UART_MspInit+0xe4>)
 8000da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da4:	4a18      	ldr	r2, [pc, #96]	; (8000e08 <HAL_UART_MspInit+0xe4>)
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dac:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <HAL_UART_MspInit+0xe4>)
 8000dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dca:	2307      	movs	r3, #7
 8000dcc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd8:	f000 fa2c 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ddc:	2340      	movs	r3, #64	; 0x40
 8000dde:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dec:	2307      	movs	r3, #7
 8000dee:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000df4:	4619      	mov	r1, r3
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <HAL_UART_MspInit+0xe8>)
 8000df8:	f000 fa1c 	bl	8001234 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	3770      	adds	r7, #112	; 0x70
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40013800 	.word	0x40013800
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	48000400 	.word	0x48000400

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <NMI_Handler+0x4>

08000e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <MemManage_Handler+0x4>

08000e22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <BusFault_Handler+0x4>

08000e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <UsageFault_Handler+0x4>

08000e2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e5c:	f000 f8c6 	bl	8000fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e6c:	4a14      	ldr	r2, [pc, #80]	; (8000ec0 <_sbrk+0x5c>)
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <_sbrk+0x60>)
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d102      	bne.n	8000e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <_sbrk+0x64>)
 8000e82:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <_sbrk+0x68>)
 8000e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d207      	bcs.n	8000ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e94:	f003 f864 	bl	8003f60 <__errno>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea2:	e009      	b.n	8000eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <_sbrk+0x64>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <_sbrk+0x64>)
 8000eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20008000 	.word	0x20008000
 8000ec4:	00000400 	.word	0x00000400
 8000ec8:	200001c4 	.word	0x200001c4
 8000ecc:	20000318 	.word	0x20000318

08000ed0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <SystemInit+0x20>)
 8000ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <SystemInit+0x20>)
 8000edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ef4:	480d      	ldr	r0, [pc, #52]	; (8000f2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ef6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef8:	480d      	ldr	r0, [pc, #52]	; (8000f30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000efa:	490e      	ldr	r1, [pc, #56]	; (8000f34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000efc:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <LoopForever+0xe>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f00:	e002      	b.n	8000f08 <LoopCopyDataInit>

08000f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f06:	3304      	adds	r3, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f0c:	d3f9      	bcc.n	8000f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0e:	4a0b      	ldr	r2, [pc, #44]	; (8000f3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f10:	4c0b      	ldr	r4, [pc, #44]	; (8000f40 <LoopForever+0x16>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f14:	e001      	b.n	8000f1a <LoopFillZerobss>

08000f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f18:	3204      	adds	r2, #4

08000f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f1c:	d3fb      	bcc.n	8000f16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f1e:	f7ff ffd7 	bl	8000ed0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f22:	f003 f823 	bl	8003f6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f26:	f7ff fce5 	bl	80008f4 <main>

08000f2a <LoopForever>:

LoopForever:
    b LoopForever
 8000f2a:	e7fe      	b.n	8000f2a <LoopForever>
  ldr   r0, =_estack
 8000f2c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f34:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f38:	08004920 	.word	0x08004920
  ldr r2, =_sbss
 8000f3c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f40:	20000314 	.word	0x20000314

08000f44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f44:	e7fe      	b.n	8000f44 <ADC1_2_IRQHandler>

08000f46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f50:	2003      	movs	r0, #3
 8000f52:	f000 f93d 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f56:	200f      	movs	r0, #15
 8000f58:	f000 f80e 	bl	8000f78 <HAL_InitTick>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d002      	beq.n	8000f68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	71fb      	strb	r3, [r7, #7]
 8000f66:	e001      	b.n	8000f6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f68:	f7ff fe06 	bl	8000b78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f6c:	79fb      	ldrb	r3, [r7, #7]

}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f80:	2300      	movs	r3, #0
 8000f82:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <HAL_InitTick+0x68>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d022      	beq.n	8000fd2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f8c:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <HAL_InitTick+0x6c>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <HAL_InitTick+0x68>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f98:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 f93a 	bl	800121a <HAL_SYSTICK_Config>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d10f      	bne.n	8000fcc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b0f      	cmp	r3, #15
 8000fb0:	d809      	bhi.n	8000fc6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fba:	f000 f914 	bl	80011e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <HAL_InitTick+0x70>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	e007      	b.n	8000fd6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	73fb      	strb	r3, [r7, #15]
 8000fca:	e004      	b.n	8000fd6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
 8000fd0:	e001      	b.n	8000fd6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	20000004 	.word	0x20000004

08000fec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <HAL_IncTick+0x1c>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <HAL_IncTick+0x20>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	4a03      	ldr	r2, [pc, #12]	; (8001008 <HAL_IncTick+0x1c>)
 8000ffc:	6013      	str	r3, [r2, #0]
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	200001c8 	.word	0x200001c8
 800100c:	20000008 	.word	0x20000008

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	200001c8 	.word	0x200001c8

08001028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff ffee 	bl	8001010 <HAL_GetTick>
 8001034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001040:	d004      	beq.n	800104c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_Delay+0x40>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	4413      	add	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800104c:	bf00      	nop
 800104e:	f7ff ffdf 	bl	8001010 <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	429a      	cmp	r2, r3
 800105c:	d8f7      	bhi.n	800104e <HAL_Delay+0x26>
  {
  }
}
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000008 	.word	0x20000008

0800106c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	60d3      	str	r3, [r2, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <__NVIC_GetPriorityGrouping+0x18>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	f003 0307 	and.w	r3, r3, #7
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	db0a      	blt.n	80010fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	490c      	ldr	r1, [pc, #48]	; (800111c <__NVIC_SetPriority+0x4c>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	0112      	lsls	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	440b      	add	r3, r1
 80010f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f8:	e00a      	b.n	8001110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4908      	ldr	r1, [pc, #32]	; (8001120 <__NVIC_SetPriority+0x50>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	3b04      	subs	r3, #4
 8001108:	0112      	lsls	r2, r2, #4
 800110a:	b2d2      	uxtb	r2, r2
 800110c:	440b      	add	r3, r1
 800110e:	761a      	strb	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000e100 	.word	0xe000e100
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	; 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f1c3 0307 	rsb	r3, r3, #7
 800113e:	2b04      	cmp	r3, #4
 8001140:	bf28      	it	cs
 8001142:	2304      	movcs	r3, #4
 8001144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3304      	adds	r3, #4
 800114a:	2b06      	cmp	r3, #6
 800114c:	d902      	bls.n	8001154 <NVIC_EncodePriority+0x30>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3b03      	subs	r3, #3
 8001152:	e000      	b.n	8001156 <NVIC_EncodePriority+0x32>
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	f04f 32ff 	mov.w	r2, #4294967295
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800116c:	f04f 31ff 	mov.w	r1, #4294967295
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	43d9      	mvns	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	4313      	orrs	r3, r2
         );
}
 800117e:	4618      	mov	r0, r3
 8001180:	3724      	adds	r7, #36	; 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800119c:	d301      	bcc.n	80011a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119e:	2301      	movs	r3, #1
 80011a0:	e00f      	b.n	80011c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <SysTick_Config+0x40>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011aa:	210f      	movs	r1, #15
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f7ff ff8e 	bl	80010d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <SysTick_Config+0x40>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ba:	4b04      	ldr	r3, [pc, #16]	; (80011cc <SysTick_Config+0x40>)
 80011bc:	2207      	movs	r2, #7
 80011be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	e000e010 	.word	0xe000e010

080011d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff47 	bl	800106c <__NVIC_SetPriorityGrouping>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011f4:	f7ff ff5e 	bl	80010b4 <__NVIC_GetPriorityGrouping>
 80011f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f7ff ff90 	bl	8001124 <NVIC_EncodePriority>
 8001204:	4602      	mov	r2, r0
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff5f 	bl	80010d0 <__NVIC_SetPriority>
}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffb2 	bl	800118c <SysTick_Config>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b480      	push	{r7}
 8001236:	b087      	sub	sp, #28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001242:	e15a      	b.n	80014fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	2101      	movs	r1, #1
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	4013      	ands	r3, r2
 8001252:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 814c 	beq.w	80014f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b01      	cmp	r3, #1
 8001266:	d005      	beq.n	8001274 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001270:	2b02      	cmp	r3, #2
 8001272:	d130      	bne.n	80012d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012aa:	2201      	movs	r2, #1
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	091b      	lsrs	r3, r3, #4
 80012c0:	f003 0201 	and.w	r2, r3, #1
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d017      	beq.n	8001312 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	2203      	movs	r2, #3
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d123      	bne.n	8001366 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	08da      	lsrs	r2, r3, #3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3208      	adds	r2, #8
 8001326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800132a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	220f      	movs	r2, #15
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	691a      	ldr	r2, [r3, #16]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	08da      	lsrs	r2, r3, #3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3208      	adds	r2, #8
 8001360:	6939      	ldr	r1, [r7, #16]
 8001362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	2203      	movs	r2, #3
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0203 	and.w	r2, r3, #3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 80a6 	beq.w	80014f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a8:	4b5b      	ldr	r3, [pc, #364]	; (8001518 <HAL_GPIO_Init+0x2e4>)
 80013aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ac:	4a5a      	ldr	r2, [pc, #360]	; (8001518 <HAL_GPIO_Init+0x2e4>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6613      	str	r3, [r2, #96]	; 0x60
 80013b4:	4b58      	ldr	r3, [pc, #352]	; (8001518 <HAL_GPIO_Init+0x2e4>)
 80013b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013c0:	4a56      	ldr	r2, [pc, #344]	; (800151c <HAL_GPIO_Init+0x2e8>)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	3302      	adds	r3, #2
 80013c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	220f      	movs	r2, #15
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013ea:	d01f      	beq.n	800142c <HAL_GPIO_Init+0x1f8>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a4c      	ldr	r2, [pc, #304]	; (8001520 <HAL_GPIO_Init+0x2ec>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d019      	beq.n	8001428 <HAL_GPIO_Init+0x1f4>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a4b      	ldr	r2, [pc, #300]	; (8001524 <HAL_GPIO_Init+0x2f0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d013      	beq.n	8001424 <HAL_GPIO_Init+0x1f0>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a4a      	ldr	r2, [pc, #296]	; (8001528 <HAL_GPIO_Init+0x2f4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d00d      	beq.n	8001420 <HAL_GPIO_Init+0x1ec>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a49      	ldr	r2, [pc, #292]	; (800152c <HAL_GPIO_Init+0x2f8>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d007      	beq.n	800141c <HAL_GPIO_Init+0x1e8>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a48      	ldr	r2, [pc, #288]	; (8001530 <HAL_GPIO_Init+0x2fc>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d101      	bne.n	8001418 <HAL_GPIO_Init+0x1e4>
 8001414:	2305      	movs	r3, #5
 8001416:	e00a      	b.n	800142e <HAL_GPIO_Init+0x1fa>
 8001418:	2306      	movs	r3, #6
 800141a:	e008      	b.n	800142e <HAL_GPIO_Init+0x1fa>
 800141c:	2304      	movs	r3, #4
 800141e:	e006      	b.n	800142e <HAL_GPIO_Init+0x1fa>
 8001420:	2303      	movs	r3, #3
 8001422:	e004      	b.n	800142e <HAL_GPIO_Init+0x1fa>
 8001424:	2302      	movs	r3, #2
 8001426:	e002      	b.n	800142e <HAL_GPIO_Init+0x1fa>
 8001428:	2301      	movs	r3, #1
 800142a:	e000      	b.n	800142e <HAL_GPIO_Init+0x1fa>
 800142c:	2300      	movs	r3, #0
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	f002 0203 	and.w	r2, r2, #3
 8001434:	0092      	lsls	r2, r2, #2
 8001436:	4093      	lsls	r3, r2
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800143e:	4937      	ldr	r1, [pc, #220]	; (800151c <HAL_GPIO_Init+0x2e8>)
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	3302      	adds	r3, #2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800144c:	4b39      	ldr	r3, [pc, #228]	; (8001534 <HAL_GPIO_Init+0x300>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001470:	4a30      	ldr	r2, [pc, #192]	; (8001534 <HAL_GPIO_Init+0x300>)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001476:	4b2f      	ldr	r3, [pc, #188]	; (8001534 <HAL_GPIO_Init+0x300>)
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	43db      	mvns	r3, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800149a:	4a26      	ldr	r2, [pc, #152]	; (8001534 <HAL_GPIO_Init+0x300>)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80014a0:	4b24      	ldr	r3, [pc, #144]	; (8001534 <HAL_GPIO_Init+0x300>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014c4:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <HAL_GPIO_Init+0x300>)
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014ca:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <HAL_GPIO_Init+0x300>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014ee:	4a11      	ldr	r2, [pc, #68]	; (8001534 <HAL_GPIO_Init+0x300>)
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	3301      	adds	r3, #1
 80014f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	fa22 f303 	lsr.w	r3, r2, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	f47f ae9d 	bne.w	8001244 <HAL_GPIO_Init+0x10>
  }
}
 800150a:	bf00      	nop
 800150c:	bf00      	nop
 800150e:	371c      	adds	r7, #28
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	40021000 	.word	0x40021000
 800151c:	40010000 	.word	0x40010000
 8001520:	48000400 	.word	0x48000400
 8001524:	48000800 	.word	0x48000800
 8001528:	48000c00 	.word	0x48000c00
 800152c:	48001000 	.word	0x48001000
 8001530:	48001400 	.word	0x48001400
 8001534:	40010400 	.word	0x40010400

08001538 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e081      	b.n	800164e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d106      	bne.n	8001564 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff fb2e 	bl	8000bc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2224      	movs	r2, #36	; 0x24
 8001568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0201 	bic.w	r2, r2, #1
 800157a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001588:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001598:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d107      	bne.n	80015b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	e006      	b.n	80015c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80015be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d104      	bne.n	80015d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691a      	ldr	r2, [r3, #16]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69d9      	ldr	r1, [r3, #28]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a1a      	ldr	r2, [r3, #32]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 0201 	orr.w	r2, r2, #1
 800162e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2220      	movs	r2, #32
 800163a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af02      	add	r7, sp, #8
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	461a      	mov	r2, r3
 8001664:	460b      	mov	r3, r1
 8001666:	817b      	strh	r3, [r7, #10]
 8001668:	4613      	mov	r3, r2
 800166a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b20      	cmp	r3, #32
 8001676:	f040 80da 	bne.w	800182e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001680:	2b01      	cmp	r3, #1
 8001682:	d101      	bne.n	8001688 <HAL_I2C_Master_Transmit+0x30>
 8001684:	2302      	movs	r3, #2
 8001686:	e0d3      	b.n	8001830 <HAL_I2C_Master_Transmit+0x1d8>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001690:	f7ff fcbe 	bl	8001010 <HAL_GetTick>
 8001694:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	2319      	movs	r3, #25
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f000 f8f0 	bl	8001888 <I2C_WaitOnFlagUntilTimeout>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e0be      	b.n	8001830 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2221      	movs	r2, #33	; 0x21
 80016b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2210      	movs	r2, #16
 80016be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	893a      	ldrh	r2, [r7, #8]
 80016d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016de:	b29b      	uxth	r3, r3
 80016e0:	2bff      	cmp	r3, #255	; 0xff
 80016e2:	d90e      	bls.n	8001702 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	22ff      	movs	r2, #255	; 0xff
 80016e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	8979      	ldrh	r1, [r7, #10]
 80016f2:	4b51      	ldr	r3, [pc, #324]	; (8001838 <HAL_I2C_Master_Transmit+0x1e0>)
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f000 fa6c 	bl	8001bd8 <I2C_TransferConfig>
 8001700:	e06c      	b.n	80017dc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001706:	b29a      	uxth	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001710:	b2da      	uxtb	r2, r3
 8001712:	8979      	ldrh	r1, [r7, #10]
 8001714:	4b48      	ldr	r3, [pc, #288]	; (8001838 <HAL_I2C_Master_Transmit+0x1e0>)
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f000 fa5b 	bl	8001bd8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001722:	e05b      	b.n	80017dc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	6a39      	ldr	r1, [r7, #32]
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f000 f8ed 	bl	8001908 <I2C_WaitOnTXISFlagUntilTimeout>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e07b      	b.n	8001830 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	781a      	ldrb	r2, [r3, #0]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	1c5a      	adds	r2, r3, #1
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001752:	b29b      	uxth	r3, r3
 8001754:	3b01      	subs	r3, #1
 8001756:	b29a      	uxth	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001760:	3b01      	subs	r3, #1
 8001762:	b29a      	uxth	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176c:	b29b      	uxth	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d034      	beq.n	80017dc <HAL_I2C_Master_Transmit+0x184>
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001776:	2b00      	cmp	r3, #0
 8001778:	d130      	bne.n	80017dc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	2200      	movs	r2, #0
 8001782:	2180      	movs	r1, #128	; 0x80
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f000 f87f 	bl	8001888 <I2C_WaitOnFlagUntilTimeout>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e04d      	b.n	8001830 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001798:	b29b      	uxth	r3, r3
 800179a:	2bff      	cmp	r3, #255	; 0xff
 800179c:	d90e      	bls.n	80017bc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	22ff      	movs	r2, #255	; 0xff
 80017a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	8979      	ldrh	r1, [r7, #10]
 80017ac:	2300      	movs	r3, #0
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f000 fa0f 	bl	8001bd8 <I2C_TransferConfig>
 80017ba:	e00f      	b.n	80017dc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	8979      	ldrh	r1, [r7, #10]
 80017ce:	2300      	movs	r3, #0
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f000 f9fe 	bl	8001bd8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d19e      	bne.n	8001724 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	6a39      	ldr	r1, [r7, #32]
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 f8cc 	bl	8001988 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e01a      	b.n	8001830 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2220      	movs	r2, #32
 8001800:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6859      	ldr	r1, [r3, #4]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_I2C_Master_Transmit+0x1e4>)
 800180e:	400b      	ands	r3, r1
 8001810:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2220      	movs	r2, #32
 8001816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	e000      	b.n	8001830 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800182e:	2302      	movs	r3, #2
  }
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	80002000 	.word	0x80002000
 800183c:	fe00e800 	.word	0xfe00e800

08001840 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b02      	cmp	r3, #2
 8001854:	d103      	bne.n	800185e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2200      	movs	r2, #0
 800185c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b01      	cmp	r3, #1
 800186a:	d007      	beq.n	800187c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	699a      	ldr	r2, [r3, #24]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 0201 	orr.w	r2, r2, #1
 800187a:	619a      	str	r2, [r3, #24]
  }
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	4613      	mov	r3, r2
 8001896:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001898:	e022      	b.n	80018e0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a0:	d01e      	beq.n	80018e0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018a2:	f7ff fbb5 	bl	8001010 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d302      	bcc.n	80018b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d113      	bne.n	80018e0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018bc:	f043 0220 	orr.w	r2, r3, #32
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2220      	movs	r2, #32
 80018c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e00f      	b.n	8001900 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	699a      	ldr	r2, [r3, #24]
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	4013      	ands	r3, r2
 80018ea:	68ba      	ldr	r2, [r7, #8]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	bf0c      	ite	eq
 80018f0:	2301      	moveq	r3, #1
 80018f2:	2300      	movne	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d0cd      	beq.n	800189a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001914:	e02c      	b.n	8001970 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f000 f870 	bl	8001a00 <I2C_IsErrorOccurred>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e02a      	b.n	8001980 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001930:	d01e      	beq.n	8001970 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001932:	f7ff fb6d 	bl	8001010 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	429a      	cmp	r2, r3
 8001940:	d302      	bcc.n	8001948 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d113      	bne.n	8001970 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194c:	f043 0220 	orr.w	r2, r3, #32
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2220      	movs	r2, #32
 8001958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e007      	b.n	8001980 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b02      	cmp	r3, #2
 800197c:	d1cb      	bne.n	8001916 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001994:	e028      	b.n	80019e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	68b9      	ldr	r1, [r7, #8]
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 f830 	bl	8001a00 <I2C_IsErrorOccurred>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e026      	b.n	80019f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019aa:	f7ff fb31 	bl	8001010 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	68ba      	ldr	r2, [r7, #8]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d302      	bcc.n	80019c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d113      	bne.n	80019e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c4:	f043 0220 	orr.w	r2, r3, #32
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2220      	movs	r2, #32
 80019d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e007      	b.n	80019f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f003 0320 	and.w	r3, r3, #32
 80019f2:	2b20      	cmp	r3, #32
 80019f4:	d1cf      	bne.n	8001996 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	; 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	f003 0310 	and.w	r3, r3, #16
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d075      	beq.n	8001b18 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2210      	movs	r2, #16
 8001a32:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a34:	e056      	b.n	8001ae4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a3c:	d052      	beq.n	8001ae4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a3e:	f7ff fae7 	bl	8001010 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	68ba      	ldr	r2, [r7, #8]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d302      	bcc.n	8001a54 <I2C_IsErrorOccurred+0x54>
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d147      	bne.n	8001ae4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a66:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a76:	d12e      	bne.n	8001ad6 <I2C_IsErrorOccurred+0xd6>
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a7e:	d02a      	beq.n	8001ad6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001a80:	7cfb      	ldrb	r3, [r7, #19]
 8001a82:	2b20      	cmp	r3, #32
 8001a84:	d027      	beq.n	8001ad6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a94:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001a96:	f7ff fabb 	bl	8001010 <HAL_GetTick>
 8001a9a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a9c:	e01b      	b.n	8001ad6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001a9e:	f7ff fab7 	bl	8001010 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b19      	cmp	r3, #25
 8001aaa:	d914      	bls.n	8001ad6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab0:	f043 0220 	orr.w	r2, r3, #32
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2220      	movs	r2, #32
 8001abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f003 0320 	and.w	r3, r3, #32
 8001ae0:	2b20      	cmp	r3, #32
 8001ae2:	d1dc      	bne.n	8001a9e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	f003 0320 	and.w	r3, r3, #32
 8001aee:	2b20      	cmp	r3, #32
 8001af0:	d003      	beq.n	8001afa <I2C_IsErrorOccurred+0xfa>
 8001af2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d09d      	beq.n	8001a36 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001afa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d103      	bne.n	8001b0a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2220      	movs	r2, #32
 8001b08:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	f043 0304 	orr.w	r3, r3, #4
 8001b10:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00b      	beq.n	8001b42 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b3a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00b      	beq.n	8001b64 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	f043 0308 	orr.w	r3, r3, #8
 8001b52:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00b      	beq.n	8001b86 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	f043 0302 	orr.w	r3, r3, #2
 8001b74:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001b86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d01c      	beq.n	8001bc8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f7ff fe56 	bl	8001840 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6859      	ldr	r1, [r3, #4]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <I2C_IsErrorOccurred+0x1d4>)
 8001ba0:	400b      	ands	r3, r1
 8001ba2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3728      	adds	r7, #40	; 0x28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	fe00e800 	.word	0xfe00e800

08001bd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	460b      	mov	r3, r1
 8001be4:	817b      	strh	r3, [r7, #10]
 8001be6:	4613      	mov	r3, r2
 8001be8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bea:	897b      	ldrh	r3, [r7, #10]
 8001bec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001bf0:	7a7b      	ldrb	r3, [r7, #9]
 8001bf2:	041b      	lsls	r3, r3, #16
 8001bf4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bf8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c06:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	0d5b      	lsrs	r3, r3, #21
 8001c12:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001c16:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <I2C_TransferConfig+0x60>)
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	ea02 0103 	and.w	r1, r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001c2a:	bf00      	nop
 8001c2c:	371c      	adds	r7, #28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	03ff63ff 	.word	0x03ff63ff

08001c3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b20      	cmp	r3, #32
 8001c50:	d138      	bne.n	8001cc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d101      	bne.n	8001c60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e032      	b.n	8001cc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2224      	movs	r2, #36	; 0x24
 8001c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6819      	ldr	r1, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	e000      	b.n	8001cc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001cc4:	2302      	movs	r3, #2
  }
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b085      	sub	sp, #20
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b20      	cmp	r3, #32
 8001ce6:	d139      	bne.n	8001d5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e033      	b.n	8001d5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2224      	movs	r2, #36	; 0x24
 8001d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0201 	bic.w	r2, r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	021b      	lsls	r3, r3, #8
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e000      	b.n	8001d5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d5c:	2302      	movs	r3, #2
  }
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d141      	bne.n	8001dfe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d7a:	4b4b      	ldr	r3, [pc, #300]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d86:	d131      	bne.n	8001dec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d88:	4b47      	ldr	r3, [pc, #284]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d8e:	4a46      	ldr	r2, [pc, #280]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d98:	4b43      	ldr	r3, [pc, #268]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001da0:	4a41      	ldr	r2, [pc, #260]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001da6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001da8:	4b40      	ldr	r3, [pc, #256]	; (8001eac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2232      	movs	r2, #50	; 0x32
 8001dae:	fb02 f303 	mul.w	r3, r2, r3
 8001db2:	4a3f      	ldr	r2, [pc, #252]	; (8001eb0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001db4:	fba2 2303 	umull	r2, r3, r2, r3
 8001db8:	0c9b      	lsrs	r3, r3, #18
 8001dba:	3301      	adds	r3, #1
 8001dbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dbe:	e002      	b.n	8001dc6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dc6:	4b38      	ldr	r3, [pc, #224]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dd2:	d102      	bne.n	8001dda <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f2      	bne.n	8001dc0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dda:	4b33      	ldr	r3, [pc, #204]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de6:	d158      	bne.n	8001e9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e057      	b.n	8001e9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dec:	4b2e      	ldr	r3, [pc, #184]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001df2:	4a2d      	ldr	r2, [pc, #180]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001df8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001dfc:	e04d      	b.n	8001e9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e04:	d141      	bne.n	8001e8a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e06:	4b28      	ldr	r3, [pc, #160]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e12:	d131      	bne.n	8001e78 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e14:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e1a:	4a23      	ldr	r2, [pc, #140]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e24:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e2c:	4a1e      	ldr	r2, [pc, #120]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e34:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2232      	movs	r2, #50	; 0x32
 8001e3a:	fb02 f303 	mul.w	r3, r2, r3
 8001e3e:	4a1c      	ldr	r2, [pc, #112]	; (8001eb0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e40:	fba2 2303 	umull	r2, r3, r2, r3
 8001e44:	0c9b      	lsrs	r3, r3, #18
 8001e46:	3301      	adds	r3, #1
 8001e48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e4a:	e002      	b.n	8001e52 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e5e:	d102      	bne.n	8001e66 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f2      	bne.n	8001e4c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e66:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e72:	d112      	bne.n	8001e9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e011      	b.n	8001e9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e88:	e007      	b.n	8001e9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e92:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e98:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	40007000 	.word	0x40007000
 8001eac:	20000000 	.word	0x20000000
 8001eb0:	431bde83 	.word	0x431bde83

08001eb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e306      	b.n	80024d4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d075      	beq.n	8001fbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ed2:	4b97      	ldr	r3, [pc, #604]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001edc:	4b94      	ldr	r3, [pc, #592]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	2b0c      	cmp	r3, #12
 8001eea:	d102      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x3e>
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	d002      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x44>
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d10b      	bne.n	8001f10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef8:	4b8d      	ldr	r3, [pc, #564]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d05b      	beq.n	8001fbc <HAL_RCC_OscConfig+0x108>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d157      	bne.n	8001fbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e2e1      	b.n	80024d4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f18:	d106      	bne.n	8001f28 <HAL_RCC_OscConfig+0x74>
 8001f1a:	4b85      	ldr	r3, [pc, #532]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a84      	ldr	r2, [pc, #528]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 8001f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	e01d      	b.n	8001f64 <HAL_RCC_OscConfig+0xb0>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f30:	d10c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x98>
 8001f32:	4b7f      	ldr	r3, [pc, #508]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a7e      	ldr	r2, [pc, #504]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 8001f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	4b7c      	ldr	r3, [pc, #496]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a7b      	ldr	r2, [pc, #492]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 8001f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	e00b      	b.n	8001f64 <HAL_RCC_OscConfig+0xb0>
 8001f4c:	4b78      	ldr	r3, [pc, #480]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a77      	ldr	r2, [pc, #476]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 8001f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	4b75      	ldr	r3, [pc, #468]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a74      	ldr	r2, [pc, #464]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 8001f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d013      	beq.n	8001f94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6c:	f7ff f850 	bl	8001010 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f74:	f7ff f84c 	bl	8001010 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b64      	cmp	r3, #100	; 0x64
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e2a6      	b.n	80024d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f86:	4b6a      	ldr	r3, [pc, #424]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCC_OscConfig+0xc0>
 8001f92:	e014      	b.n	8001fbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7ff f83c 	bl	8001010 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f9c:	f7ff f838 	bl	8001010 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b64      	cmp	r3, #100	; 0x64
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e292      	b.n	80024d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fae:	4b60      	ldr	r3, [pc, #384]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0xe8>
 8001fba:	e000      	b.n	8001fbe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d075      	beq.n	80020b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fca:	4b59      	ldr	r3, [pc, #356]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fd4:	4b56      	ldr	r3, [pc, #344]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	2b0c      	cmp	r3, #12
 8001fe2:	d102      	bne.n	8001fea <HAL_RCC_OscConfig+0x136>
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d002      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x13c>
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d11f      	bne.n	8002030 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ff0:	4b4f      	ldr	r3, [pc, #316]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_OscConfig+0x154>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e265      	b.n	80024d4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002008:	4b49      	ldr	r3, [pc, #292]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	061b      	lsls	r3, r3, #24
 8002016:	4946      	ldr	r1, [pc, #280]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 8002018:	4313      	orrs	r3, r2
 800201a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800201c:	4b45      	ldr	r3, [pc, #276]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe ffa9 	bl	8000f78 <HAL_InitTick>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d043      	beq.n	80020b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e251      	b.n	80024d4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d023      	beq.n	8002080 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002038:	4b3d      	ldr	r3, [pc, #244]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a3c      	ldr	r2, [pc, #240]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 800203e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7fe ffe4 	bl	8001010 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800204c:	f7fe ffe0 	bl	8001010 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e23a      	b.n	80024d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800205e:	4b34      	ldr	r3, [pc, #208]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206a:	4b31      	ldr	r3, [pc, #196]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	061b      	lsls	r3, r3, #24
 8002078:	492d      	ldr	r1, [pc, #180]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 800207a:	4313      	orrs	r3, r2
 800207c:	604b      	str	r3, [r1, #4]
 800207e:	e01a      	b.n	80020b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002080:	4b2b      	ldr	r3, [pc, #172]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a2a      	ldr	r2, [pc, #168]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 8002086:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800208a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7fe ffc0 	bl	8001010 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002094:	f7fe ffbc 	bl	8001010 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e216      	b.n	80024d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020a6:	4b22      	ldr	r3, [pc, #136]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x1e0>
 80020b2:	e000      	b.n	80020b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d041      	beq.n	8002146 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d01c      	beq.n	8002104 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ca:	4b19      	ldr	r3, [pc, #100]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 80020cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020d0:	4a17      	ldr	r2, [pc, #92]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020da:	f7fe ff99 	bl	8001010 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e2:	f7fe ff95 	bl	8001010 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e1ef      	b.n	80024d4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020f4:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 80020f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0ef      	beq.n	80020e2 <HAL_RCC_OscConfig+0x22e>
 8002102:	e020      	b.n	8002146 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002104:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 8002106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800210a:	4a09      	ldr	r2, [pc, #36]	; (8002130 <HAL_RCC_OscConfig+0x27c>)
 800210c:	f023 0301 	bic.w	r3, r3, #1
 8002110:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002114:	f7fe ff7c 	bl	8001010 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800211a:	e00d      	b.n	8002138 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800211c:	f7fe ff78 	bl	8001010 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d906      	bls.n	8002138 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e1d2      	b.n	80024d4 <HAL_RCC_OscConfig+0x620>
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000
 8002134:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002138:	4b8c      	ldr	r3, [pc, #560]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 800213a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1ea      	bne.n	800211c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 80a6 	beq.w	80022a0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002154:	2300      	movs	r3, #0
 8002156:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002158:	4b84      	ldr	r3, [pc, #528]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 800215a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_RCC_OscConfig+0x2b4>
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <HAL_RCC_OscConfig+0x2b6>
 8002168:	2300      	movs	r3, #0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00d      	beq.n	800218a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800216e:	4b7f      	ldr	r3, [pc, #508]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 8002170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002172:	4a7e      	ldr	r2, [pc, #504]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 8002174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002178:	6593      	str	r3, [r2, #88]	; 0x58
 800217a:	4b7c      	ldr	r3, [pc, #496]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 800217c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002186:	2301      	movs	r3, #1
 8002188:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800218a:	4b79      	ldr	r3, [pc, #484]	; (8002370 <HAL_RCC_OscConfig+0x4bc>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002192:	2b00      	cmp	r3, #0
 8002194:	d118      	bne.n	80021c8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002196:	4b76      	ldr	r3, [pc, #472]	; (8002370 <HAL_RCC_OscConfig+0x4bc>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a75      	ldr	r2, [pc, #468]	; (8002370 <HAL_RCC_OscConfig+0x4bc>)
 800219c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021a2:	f7fe ff35 	bl	8001010 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021aa:	f7fe ff31 	bl	8001010 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e18b      	b.n	80024d4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021bc:	4b6c      	ldr	r3, [pc, #432]	; (8002370 <HAL_RCC_OscConfig+0x4bc>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d108      	bne.n	80021e2 <HAL_RCC_OscConfig+0x32e>
 80021d0:	4b66      	ldr	r3, [pc, #408]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 80021d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d6:	4a65      	ldr	r2, [pc, #404]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021e0:	e024      	b.n	800222c <HAL_RCC_OscConfig+0x378>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b05      	cmp	r3, #5
 80021e8:	d110      	bne.n	800220c <HAL_RCC_OscConfig+0x358>
 80021ea:	4b60      	ldr	r3, [pc, #384]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f0:	4a5e      	ldr	r2, [pc, #376]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 80021f2:	f043 0304 	orr.w	r3, r3, #4
 80021f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021fa:	4b5c      	ldr	r3, [pc, #368]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 80021fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002200:	4a5a      	ldr	r2, [pc, #360]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800220a:	e00f      	b.n	800222c <HAL_RCC_OscConfig+0x378>
 800220c:	4b57      	ldr	r3, [pc, #348]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 800220e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002212:	4a56      	ldr	r2, [pc, #344]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800221c:	4b53      	ldr	r3, [pc, #332]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 800221e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002222:	4a52      	ldr	r2, [pc, #328]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 8002224:	f023 0304 	bic.w	r3, r3, #4
 8002228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d016      	beq.n	8002262 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002234:	f7fe feec 	bl	8001010 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800223a:	e00a      	b.n	8002252 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223c:	f7fe fee8 	bl	8001010 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f241 3288 	movw	r2, #5000	; 0x1388
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e140      	b.n	80024d4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002252:	4b46      	ldr	r3, [pc, #280]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 8002254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0ed      	beq.n	800223c <HAL_RCC_OscConfig+0x388>
 8002260:	e015      	b.n	800228e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002262:	f7fe fed5 	bl	8001010 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002268:	e00a      	b.n	8002280 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226a:	f7fe fed1 	bl	8001010 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f241 3288 	movw	r2, #5000	; 0x1388
 8002278:	4293      	cmp	r3, r2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e129      	b.n	80024d4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002280:	4b3a      	ldr	r3, [pc, #232]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 8002282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1ed      	bne.n	800226a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800228e:	7ffb      	ldrb	r3, [r7, #31]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d105      	bne.n	80022a0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002294:	4b35      	ldr	r3, [pc, #212]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 8002296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002298:	4a34      	ldr	r2, [pc, #208]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 800229a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800229e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0320 	and.w	r3, r3, #32
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d03c      	beq.n	8002326 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d01c      	beq.n	80022ee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022b4:	4b2d      	ldr	r3, [pc, #180]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 80022b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022ba:	4a2c      	ldr	r2, [pc, #176]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c4:	f7fe fea4 	bl	8001010 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022cc:	f7fe fea0 	bl	8001010 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e0fa      	b.n	80024d4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022de:	4b23      	ldr	r3, [pc, #140]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 80022e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0ef      	beq.n	80022cc <HAL_RCC_OscConfig+0x418>
 80022ec:	e01b      	b.n	8002326 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022ee:	4b1f      	ldr	r3, [pc, #124]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 80022f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022f4:	4a1d      	ldr	r2, [pc, #116]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 80022f6:	f023 0301 	bic.w	r3, r3, #1
 80022fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fe:	f7fe fe87 	bl	8001010 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002306:	f7fe fe83 	bl	8001010 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e0dd      	b.n	80024d4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002318:	4b14      	ldr	r3, [pc, #80]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 800231a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1ef      	bne.n	8002306 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 80d1 	beq.w	80024d2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002330:	4b0e      	ldr	r3, [pc, #56]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b0c      	cmp	r3, #12
 800233a:	f000 808b 	beq.w	8002454 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d15e      	bne.n	8002404 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a08      	ldr	r2, [pc, #32]	; (800236c <HAL_RCC_OscConfig+0x4b8>)
 800234c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002352:	f7fe fe5d 	bl	8001010 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002358:	e00c      	b.n	8002374 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235a:	f7fe fe59 	bl	8001010 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d905      	bls.n	8002374 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e0b3      	b.n	80024d4 <HAL_RCC_OscConfig+0x620>
 800236c:	40021000 	.word	0x40021000
 8002370:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002374:	4b59      	ldr	r3, [pc, #356]	; (80024dc <HAL_RCC_OscConfig+0x628>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1ec      	bne.n	800235a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002380:	4b56      	ldr	r3, [pc, #344]	; (80024dc <HAL_RCC_OscConfig+0x628>)
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	4b56      	ldr	r3, [pc, #344]	; (80024e0 <HAL_RCC_OscConfig+0x62c>)
 8002386:	4013      	ands	r3, r2
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6a11      	ldr	r1, [r2, #32]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002390:	3a01      	subs	r2, #1
 8002392:	0112      	lsls	r2, r2, #4
 8002394:	4311      	orrs	r1, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800239a:	0212      	lsls	r2, r2, #8
 800239c:	4311      	orrs	r1, r2
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023a2:	0852      	lsrs	r2, r2, #1
 80023a4:	3a01      	subs	r2, #1
 80023a6:	0552      	lsls	r2, r2, #21
 80023a8:	4311      	orrs	r1, r2
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023ae:	0852      	lsrs	r2, r2, #1
 80023b0:	3a01      	subs	r2, #1
 80023b2:	0652      	lsls	r2, r2, #25
 80023b4:	4311      	orrs	r1, r2
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80023ba:	06d2      	lsls	r2, r2, #27
 80023bc:	430a      	orrs	r2, r1
 80023be:	4947      	ldr	r1, [pc, #284]	; (80024dc <HAL_RCC_OscConfig+0x628>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c4:	4b45      	ldr	r3, [pc, #276]	; (80024dc <HAL_RCC_OscConfig+0x628>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a44      	ldr	r2, [pc, #272]	; (80024dc <HAL_RCC_OscConfig+0x628>)
 80023ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023d0:	4b42      	ldr	r3, [pc, #264]	; (80024dc <HAL_RCC_OscConfig+0x628>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4a41      	ldr	r2, [pc, #260]	; (80024dc <HAL_RCC_OscConfig+0x628>)
 80023d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7fe fe18 	bl	8001010 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e4:	f7fe fe14 	bl	8001010 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e06e      	b.n	80024d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023f6:	4b39      	ldr	r3, [pc, #228]	; (80024dc <HAL_RCC_OscConfig+0x628>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCC_OscConfig+0x530>
 8002402:	e066      	b.n	80024d2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002404:	4b35      	ldr	r3, [pc, #212]	; (80024dc <HAL_RCC_OscConfig+0x628>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a34      	ldr	r2, [pc, #208]	; (80024dc <HAL_RCC_OscConfig+0x628>)
 800240a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800240e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002410:	4b32      	ldr	r3, [pc, #200]	; (80024dc <HAL_RCC_OscConfig+0x628>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4a31      	ldr	r2, [pc, #196]	; (80024dc <HAL_RCC_OscConfig+0x628>)
 8002416:	f023 0303 	bic.w	r3, r3, #3
 800241a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800241c:	4b2f      	ldr	r3, [pc, #188]	; (80024dc <HAL_RCC_OscConfig+0x628>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4a2e      	ldr	r2, [pc, #184]	; (80024dc <HAL_RCC_OscConfig+0x628>)
 8002422:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800242a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7fe fdf0 	bl	8001010 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002434:	f7fe fdec 	bl	8001010 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e046      	b.n	80024d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002446:	4b25      	ldr	r3, [pc, #148]	; (80024dc <HAL_RCC_OscConfig+0x628>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0x580>
 8002452:	e03e      	b.n	80024d2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e039      	b.n	80024d4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002460:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <HAL_RCC_OscConfig+0x628>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f003 0203 	and.w	r2, r3, #3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	429a      	cmp	r2, r3
 8002472:	d12c      	bne.n	80024ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	3b01      	subs	r3, #1
 8002480:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002482:	429a      	cmp	r2, r3
 8002484:	d123      	bne.n	80024ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002490:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002492:	429a      	cmp	r2, r3
 8002494:	d11b      	bne.n	80024ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d113      	bne.n	80024ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	085b      	lsrs	r3, r3, #1
 80024b2:	3b01      	subs	r3, #1
 80024b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d109      	bne.n	80024ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c4:	085b      	lsrs	r3, r3, #1
 80024c6:	3b01      	subs	r3, #1
 80024c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d001      	beq.n	80024d2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3720      	adds	r7, #32
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40021000 	.word	0x40021000
 80024e0:	019f800c 	.word	0x019f800c

080024e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e11e      	b.n	800273a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024fc:	4b91      	ldr	r3, [pc, #580]	; (8002744 <HAL_RCC_ClockConfig+0x260>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d910      	bls.n	800252c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250a:	4b8e      	ldr	r3, [pc, #568]	; (8002744 <HAL_RCC_ClockConfig+0x260>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 020f 	bic.w	r2, r3, #15
 8002512:	498c      	ldr	r1, [pc, #560]	; (8002744 <HAL_RCC_ClockConfig+0x260>)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	4313      	orrs	r3, r2
 8002518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	4b8a      	ldr	r3, [pc, #552]	; (8002744 <HAL_RCC_ClockConfig+0x260>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e106      	b.n	800273a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	d073      	beq.n	8002620 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b03      	cmp	r3, #3
 800253e:	d129      	bne.n	8002594 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002540:	4b81      	ldr	r3, [pc, #516]	; (8002748 <HAL_RCC_ClockConfig+0x264>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0f4      	b.n	800273a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002550:	f000 f99e 	bl	8002890 <RCC_GetSysClockFreqFromPLLSource>
 8002554:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4a7c      	ldr	r2, [pc, #496]	; (800274c <HAL_RCC_ClockConfig+0x268>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d93f      	bls.n	80025de <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800255e:	4b7a      	ldr	r3, [pc, #488]	; (8002748 <HAL_RCC_ClockConfig+0x264>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d009      	beq.n	800257e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002572:	2b00      	cmp	r3, #0
 8002574:	d033      	beq.n	80025de <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800257a:	2b00      	cmp	r3, #0
 800257c:	d12f      	bne.n	80025de <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800257e:	4b72      	ldr	r3, [pc, #456]	; (8002748 <HAL_RCC_ClockConfig+0x264>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002586:	4a70      	ldr	r2, [pc, #448]	; (8002748 <HAL_RCC_ClockConfig+0x264>)
 8002588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800258c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800258e:	2380      	movs	r3, #128	; 0x80
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	e024      	b.n	80025de <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d107      	bne.n	80025ac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800259c:	4b6a      	ldr	r3, [pc, #424]	; (8002748 <HAL_RCC_ClockConfig+0x264>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d109      	bne.n	80025bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0c6      	b.n	800273a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025ac:	4b66      	ldr	r3, [pc, #408]	; (8002748 <HAL_RCC_ClockConfig+0x264>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0be      	b.n	800273a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80025bc:	f000 f8ce 	bl	800275c <HAL_RCC_GetSysClockFreq>
 80025c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4a61      	ldr	r2, [pc, #388]	; (800274c <HAL_RCC_ClockConfig+0x268>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d909      	bls.n	80025de <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025ca:	4b5f      	ldr	r3, [pc, #380]	; (8002748 <HAL_RCC_ClockConfig+0x264>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025d2:	4a5d      	ldr	r2, [pc, #372]	; (8002748 <HAL_RCC_ClockConfig+0x264>)
 80025d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025de:	4b5a      	ldr	r3, [pc, #360]	; (8002748 <HAL_RCC_ClockConfig+0x264>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f023 0203 	bic.w	r2, r3, #3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	4957      	ldr	r1, [pc, #348]	; (8002748 <HAL_RCC_ClockConfig+0x264>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025f0:	f7fe fd0e 	bl	8001010 <HAL_GetTick>
 80025f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f6:	e00a      	b.n	800260e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f8:	f7fe fd0a 	bl	8001010 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	f241 3288 	movw	r2, #5000	; 0x1388
 8002606:	4293      	cmp	r3, r2
 8002608:	d901      	bls.n	800260e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e095      	b.n	800273a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260e:	4b4e      	ldr	r3, [pc, #312]	; (8002748 <HAL_RCC_ClockConfig+0x264>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 020c 	and.w	r2, r3, #12
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	429a      	cmp	r2, r3
 800261e:	d1eb      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d023      	beq.n	8002674 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002638:	4b43      	ldr	r3, [pc, #268]	; (8002748 <HAL_RCC_ClockConfig+0x264>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4a42      	ldr	r2, [pc, #264]	; (8002748 <HAL_RCC_ClockConfig+0x264>)
 800263e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002642:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b00      	cmp	r3, #0
 800264e:	d007      	beq.n	8002660 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002650:	4b3d      	ldr	r3, [pc, #244]	; (8002748 <HAL_RCC_ClockConfig+0x264>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002658:	4a3b      	ldr	r2, [pc, #236]	; (8002748 <HAL_RCC_ClockConfig+0x264>)
 800265a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800265e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002660:	4b39      	ldr	r3, [pc, #228]	; (8002748 <HAL_RCC_ClockConfig+0x264>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	4936      	ldr	r1, [pc, #216]	; (8002748 <HAL_RCC_ClockConfig+0x264>)
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
 8002672:	e008      	b.n	8002686 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2b80      	cmp	r3, #128	; 0x80
 8002678:	d105      	bne.n	8002686 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800267a:	4b33      	ldr	r3, [pc, #204]	; (8002748 <HAL_RCC_ClockConfig+0x264>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	4a32      	ldr	r2, [pc, #200]	; (8002748 <HAL_RCC_ClockConfig+0x264>)
 8002680:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002684:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002686:	4b2f      	ldr	r3, [pc, #188]	; (8002744 <HAL_RCC_ClockConfig+0x260>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d21d      	bcs.n	80026d0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002694:	4b2b      	ldr	r3, [pc, #172]	; (8002744 <HAL_RCC_ClockConfig+0x260>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f023 020f 	bic.w	r2, r3, #15
 800269c:	4929      	ldr	r1, [pc, #164]	; (8002744 <HAL_RCC_ClockConfig+0x260>)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026a4:	f7fe fcb4 	bl	8001010 <HAL_GetTick>
 80026a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026aa:	e00a      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ac:	f7fe fcb0 	bl	8001010 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e03b      	b.n	800273a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c2:	4b20      	ldr	r3, [pc, #128]	; (8002744 <HAL_RCC_ClockConfig+0x260>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d1ed      	bne.n	80026ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026dc:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <HAL_RCC_ClockConfig+0x264>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4917      	ldr	r1, [pc, #92]	; (8002748 <HAL_RCC_ClockConfig+0x264>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d009      	beq.n	800270e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026fa:	4b13      	ldr	r3, [pc, #76]	; (8002748 <HAL_RCC_ClockConfig+0x264>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	490f      	ldr	r1, [pc, #60]	; (8002748 <HAL_RCC_ClockConfig+0x264>)
 800270a:	4313      	orrs	r3, r2
 800270c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800270e:	f000 f825 	bl	800275c <HAL_RCC_GetSysClockFreq>
 8002712:	4602      	mov	r2, r0
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <HAL_RCC_ClockConfig+0x264>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	091b      	lsrs	r3, r3, #4
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	490c      	ldr	r1, [pc, #48]	; (8002750 <HAL_RCC_ClockConfig+0x26c>)
 8002720:	5ccb      	ldrb	r3, [r1, r3]
 8002722:	f003 031f 	and.w	r3, r3, #31
 8002726:	fa22 f303 	lsr.w	r3, r2, r3
 800272a:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <HAL_RCC_ClockConfig+0x270>)
 800272c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_RCC_ClockConfig+0x274>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7fe fc20 	bl	8000f78 <HAL_InitTick>
 8002738:	4603      	mov	r3, r0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40022000 	.word	0x40022000
 8002748:	40021000 	.word	0x40021000
 800274c:	04c4b400 	.word	0x04c4b400
 8002750:	0800489c 	.word	0x0800489c
 8002754:	20000000 	.word	0x20000000
 8002758:	20000004 	.word	0x20000004

0800275c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002762:	4b2c      	ldr	r3, [pc, #176]	; (8002814 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 030c 	and.w	r3, r3, #12
 800276a:	2b04      	cmp	r3, #4
 800276c:	d102      	bne.n	8002774 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800276e:	4b2a      	ldr	r3, [pc, #168]	; (8002818 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	e047      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002774:	4b27      	ldr	r3, [pc, #156]	; (8002814 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 030c 	and.w	r3, r3, #12
 800277c:	2b08      	cmp	r3, #8
 800277e:	d102      	bne.n	8002786 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002780:	4b26      	ldr	r3, [pc, #152]	; (800281c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	e03e      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002786:	4b23      	ldr	r3, [pc, #140]	; (8002814 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b0c      	cmp	r3, #12
 8002790:	d136      	bne.n	8002800 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002792:	4b20      	ldr	r3, [pc, #128]	; (8002814 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800279c:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <HAL_RCC_GetSysClockFreq+0xb8>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	3301      	adds	r3, #1
 80027a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d10c      	bne.n	80027ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027b0:	4a1a      	ldr	r2, [pc, #104]	; (800281c <HAL_RCC_GetSysClockFreq+0xc0>)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b8:	4a16      	ldr	r2, [pc, #88]	; (8002814 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027ba:	68d2      	ldr	r2, [r2, #12]
 80027bc:	0a12      	lsrs	r2, r2, #8
 80027be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027c2:	fb02 f303 	mul.w	r3, r2, r3
 80027c6:	617b      	str	r3, [r7, #20]
      break;
 80027c8:	e00c      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027ca:	4a13      	ldr	r2, [pc, #76]	; (8002818 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d2:	4a10      	ldr	r2, [pc, #64]	; (8002814 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027d4:	68d2      	ldr	r2, [r2, #12]
 80027d6:	0a12      	lsrs	r2, r2, #8
 80027d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027dc:	fb02 f303 	mul.w	r3, r2, r3
 80027e0:	617b      	str	r3, [r7, #20]
      break;
 80027e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027e4:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	0e5b      	lsrs	r3, r3, #25
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	3301      	adds	r3, #1
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	e001      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002804:	693b      	ldr	r3, [r7, #16]
}
 8002806:	4618      	mov	r0, r3
 8002808:	371c      	adds	r7, #28
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000
 8002818:	00f42400 	.word	0x00f42400
 800281c:	007a1200 	.word	0x007a1200

08002820 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002824:	4b03      	ldr	r3, [pc, #12]	; (8002834 <HAL_RCC_GetHCLKFreq+0x14>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20000000 	.word	0x20000000

08002838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800283c:	f7ff fff0 	bl	8002820 <HAL_RCC_GetHCLKFreq>
 8002840:	4602      	mov	r2, r0
 8002842:	4b06      	ldr	r3, [pc, #24]	; (800285c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	0a1b      	lsrs	r3, r3, #8
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	4904      	ldr	r1, [pc, #16]	; (8002860 <HAL_RCC_GetPCLK1Freq+0x28>)
 800284e:	5ccb      	ldrb	r3, [r1, r3]
 8002850:	f003 031f 	and.w	r3, r3, #31
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002858:	4618      	mov	r0, r3
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000
 8002860:	080048ac 	.word	0x080048ac

08002864 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002868:	f7ff ffda 	bl	8002820 <HAL_RCC_GetHCLKFreq>
 800286c:	4602      	mov	r2, r0
 800286e:	4b06      	ldr	r3, [pc, #24]	; (8002888 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	0adb      	lsrs	r3, r3, #11
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	4904      	ldr	r1, [pc, #16]	; (800288c <HAL_RCC_GetPCLK2Freq+0x28>)
 800287a:	5ccb      	ldrb	r3, [r1, r3]
 800287c:	f003 031f 	and.w	r3, r3, #31
 8002880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002884:	4618      	mov	r0, r3
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40021000 	.word	0x40021000
 800288c:	080048ac 	.word	0x080048ac

08002890 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002896:	4b1e      	ldr	r3, [pc, #120]	; (8002910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028a0:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	3301      	adds	r3, #1
 80028ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d10c      	bne.n	80028ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028b4:	4a17      	ldr	r2, [pc, #92]	; (8002914 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028bc:	4a14      	ldr	r2, [pc, #80]	; (8002910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028be:	68d2      	ldr	r2, [r2, #12]
 80028c0:	0a12      	lsrs	r2, r2, #8
 80028c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028c6:	fb02 f303 	mul.w	r3, r2, r3
 80028ca:	617b      	str	r3, [r7, #20]
    break;
 80028cc:	e00c      	b.n	80028e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028ce:	4a12      	ldr	r2, [pc, #72]	; (8002918 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d6:	4a0e      	ldr	r2, [pc, #56]	; (8002910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028d8:	68d2      	ldr	r2, [r2, #12]
 80028da:	0a12      	lsrs	r2, r2, #8
 80028dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028e0:	fb02 f303 	mul.w	r3, r2, r3
 80028e4:	617b      	str	r3, [r7, #20]
    break;
 80028e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028e8:	4b09      	ldr	r3, [pc, #36]	; (8002910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	0e5b      	lsrs	r3, r3, #25
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	3301      	adds	r3, #1
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002900:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002902:	687b      	ldr	r3, [r7, #4]
}
 8002904:	4618      	mov	r0, r3
 8002906:	371c      	adds	r7, #28
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	40021000 	.word	0x40021000
 8002914:	007a1200 	.word	0x007a1200
 8002918:	00f42400 	.word	0x00f42400

0800291c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002924:	2300      	movs	r3, #0
 8002926:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002928:	2300      	movs	r3, #0
 800292a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 8098 	beq.w	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800293a:	2300      	movs	r3, #0
 800293c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800293e:	4b43      	ldr	r3, [pc, #268]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10d      	bne.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800294a:	4b40      	ldr	r3, [pc, #256]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800294c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294e:	4a3f      	ldr	r2, [pc, #252]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002954:	6593      	str	r3, [r2, #88]	; 0x58
 8002956:	4b3d      	ldr	r3, [pc, #244]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002962:	2301      	movs	r3, #1
 8002964:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002966:	4b3a      	ldr	r3, [pc, #232]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a39      	ldr	r2, [pc, #228]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800296c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002970:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002972:	f7fe fb4d 	bl	8001010 <HAL_GetTick>
 8002976:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002978:	e009      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297a:	f7fe fb49 	bl	8001010 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d902      	bls.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	74fb      	strb	r3, [r7, #19]
        break;
 800298c:	e005      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800298e:	4b30      	ldr	r3, [pc, #192]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0ef      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800299a:	7cfb      	ldrb	r3, [r7, #19]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d159      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029a0:	4b2a      	ldr	r3, [pc, #168]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d01e      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d019      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029bc:	4b23      	ldr	r3, [pc, #140]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029c8:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ce:	4a1f      	ldr	r2, [pc, #124]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029d8:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029de:	4a1b      	ldr	r2, [pc, #108]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029e8:	4a18      	ldr	r2, [pc, #96]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d016      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fa:	f7fe fb09 	bl	8001010 <HAL_GetTick>
 80029fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a00:	e00b      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a02:	f7fe fb05 	bl	8001010 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d902      	bls.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	74fb      	strb	r3, [r7, #19]
            break;
 8002a18:	e006      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a1a:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0ec      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002a28:	7cfb      	ldrb	r3, [r7, #19]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10b      	bne.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a2e:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	4903      	ldr	r1, [pc, #12]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a44:	e008      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a46:	7cfb      	ldrb	r3, [r7, #19]
 8002a48:	74bb      	strb	r3, [r7, #18]
 8002a4a:	e005      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a54:	7cfb      	ldrb	r3, [r7, #19]
 8002a56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a58:	7c7b      	ldrb	r3, [r7, #17]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d105      	bne.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a5e:	4ba6      	ldr	r3, [pc, #664]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a62:	4aa5      	ldr	r2, [pc, #660]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a68:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a76:	4ba0      	ldr	r3, [pc, #640]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7c:	f023 0203 	bic.w	r2, r3, #3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	499c      	ldr	r1, [pc, #624]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00a      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a98:	4b97      	ldr	r3, [pc, #604]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9e:	f023 020c 	bic.w	r2, r3, #12
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	4994      	ldr	r1, [pc, #592]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002aba:	4b8f      	ldr	r3, [pc, #572]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	498b      	ldr	r1, [pc, #556]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00a      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002adc:	4b86      	ldr	r3, [pc, #536]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	4983      	ldr	r1, [pc, #524]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00a      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002afe:	4b7e      	ldr	r3, [pc, #504]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b04:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	497a      	ldr	r1, [pc, #488]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b20:	4b75      	ldr	r3, [pc, #468]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	4972      	ldr	r1, [pc, #456]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00a      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b42:	4b6d      	ldr	r3, [pc, #436]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	4969      	ldr	r1, [pc, #420]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b64:	4b64      	ldr	r3, [pc, #400]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	4961      	ldr	r1, [pc, #388]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00a      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b86:	4b5c      	ldr	r3, [pc, #368]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	4958      	ldr	r1, [pc, #352]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d015      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ba8:	4b53      	ldr	r3, [pc, #332]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb6:	4950      	ldr	r1, [pc, #320]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bc6:	d105      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bc8:	4b4b      	ldr	r3, [pc, #300]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	4a4a      	ldr	r2, [pc, #296]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bd2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d015      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002be0:	4b45      	ldr	r3, [pc, #276]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	4942      	ldr	r1, [pc, #264]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bfe:	d105      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c00:	4b3d      	ldr	r3, [pc, #244]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4a3c      	ldr	r2, [pc, #240]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c0a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d015      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c18:	4b37      	ldr	r3, [pc, #220]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	4934      	ldr	r1, [pc, #208]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c36:	d105      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c38:	4b2f      	ldr	r3, [pc, #188]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	4a2e      	ldr	r2, [pc, #184]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c42:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d015      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c50:	4b29      	ldr	r3, [pc, #164]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5e:	4926      	ldr	r1, [pc, #152]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c6e:	d105      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c70:	4b21      	ldr	r3, [pc, #132]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	4a20      	ldr	r2, [pc, #128]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c7a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d015      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c88:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c96:	4918      	ldr	r1, [pc, #96]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ca6:	d105      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ca8:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4a12      	ldr	r2, [pc, #72]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cb2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d015      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002cc0:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cce:	490a      	ldr	r1, [pc, #40]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cde:	d105      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	4a04      	ldr	r2, [pc, #16]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002cec:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000

08002cfc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d066      	beq.n	8002ddc <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fd ffc2 	bl	8000cac <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	22ca      	movs	r2, #202	; 0xca
 8002d36:	625a      	str	r2, [r3, #36]	; 0x24
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2253      	movs	r2, #83	; 0x53
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 fa43 	bl	80031cc <RTC_EnterInitMode>
 8002d46:	4603      	mov	r3, r0
 8002d48:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d13a      	bne.n	8002dc6 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6812      	ldr	r2, [r2, #0]
 8002d5a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8002d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d62:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6999      	ldr	r1, [r3, #24]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68d9      	ldr	r1, [r3, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	041a      	lsls	r2, r3, #16
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 fa4f 	bl	8003238 <RTC_ExitInitMode>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d110      	bne.n	8002dc6 <HAL_RTC_Init+0xca>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1a      	ldr	r2, [r3, #32]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	619a      	str	r2, [r3, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	22ff      	movs	r2, #255	; 0xff
 8002dcc:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d103      	bne.n	8002ddc <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002de6:	b590      	push	{r4, r7, lr}
 8002de8:	b087      	sub	sp, #28
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d101      	bne.n	8002e00 <HAL_RTC_SetTime+0x1a>
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	e08b      	b.n	8002f18 <HAL_RTC_SetTime+0x132>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	22ca      	movs	r2, #202	; 0xca
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2253      	movs	r2, #83	; 0x53
 8002e1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 f9d3 	bl	80031cc <RTC_EnterInitMode>
 8002e26:	4603      	mov	r3, r0
 8002e28:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002e2a:	7cfb      	ldrb	r3, [r7, #19]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d163      	bne.n	8002ef8 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d126      	bne.n	8002e84 <HAL_RTC_SetTime+0x9e>
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d102      	bne.n	8002e4a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2200      	movs	r2, #0
 8002e48:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 fa35 	bl	80032be <RTC_ByteToBcd2>
 8002e54:	4603      	mov	r3, r0
 8002e56:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	785b      	ldrb	r3, [r3, #1]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 fa2e 	bl	80032be <RTC_ByteToBcd2>
 8002e62:	4603      	mov	r3, r0
 8002e64:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e66:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	789b      	ldrb	r3, [r3, #2]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 fa26 	bl	80032be <RTC_ByteToBcd2>
 8002e72:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e74:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	78db      	ldrb	r3, [r3, #3]
 8002e7c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	e018      	b.n	8002eb6 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d102      	bne.n	8002e98 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2200      	movs	r2, #0
 8002e96:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	785b      	ldrb	r3, [r3, #1]
 8002ea2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ea4:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002eaa:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	78db      	ldrb	r3, [r3, #3]
 8002eb0:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(hrtc->Instance->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002ec0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002ec4:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BKP);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699a      	ldr	r2, [r3, #24]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ed4:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(hrtc->Instance->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6999      	ldr	r1, [r3, #24]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f9a2 	bl	8003238 <RTC_ExitInitMode>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	74fb      	strb	r3, [r7, #19]
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	22ff      	movs	r2, #255	; 0xff
 8002efe:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002f00:	7cfb      	ldrb	r3, [r7, #19]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d103      	bne.n	8002f0e <HAL_RTC_SetTime+0x128>
  {
     hrtc->State = HAL_RTC_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
    __HAL_UNLOCK(hrtc);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002f16:	7cfb      	ldrb	r3, [r7, #19]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	371c      	adds	r7, #28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd90      	pop	{r4, r7, pc}

08002f20 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(hrtc->Instance->SSR);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(READ_REG(hrtc->Instance->PRER) & RTC_PRER_PREDIV_S);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(READ_REG(hrtc->Instance->TR) & RTC_TR_RESERVED_MASK);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002f4e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002f52:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	0c1b      	lsrs	r3, r3, #16
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	0a1b      	lsrs	r3, r3, #8
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	0d9b      	lsrs	r3, r3, #22
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d11a      	bne.n	8002fce <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 f9ae 	bl	80032fe <RTC_Bcd2ToByte>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	785b      	ldrb	r3, [r3, #1]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 f9a5 	bl	80032fe <RTC_Bcd2ToByte>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	789b      	ldrb	r3, [r3, #2]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 f99c 	bl	80032fe <RTC_Bcd2ToByte>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	461a      	mov	r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002fd8:	b590      	push	{r4, r7, lr}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_RTC_SetDate+0x1a>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e075      	b.n	80030de <HAL_RTC_SetDate+0x106>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10e      	bne.n	8003026 <HAL_RTC_SetDate+0x4e>
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	785b      	ldrb	r3, [r3, #1]
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	785b      	ldrb	r3, [r3, #1]
 8003018:	f023 0310 	bic.w	r3, r3, #16
 800301c:	b2db      	uxtb	r3, r3
 800301e:	330a      	adds	r3, #10
 8003020:	b2da      	uxtb	r2, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d11c      	bne.n	8003066 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	78db      	ldrb	r3, [r3, #3]
 8003030:	4618      	mov	r0, r3
 8003032:	f000 f944 	bl	80032be <RTC_ByteToBcd2>
 8003036:	4603      	mov	r3, r0
 8003038:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	785b      	ldrb	r3, [r3, #1]
 800303e:	4618      	mov	r0, r3
 8003040:	f000 f93d 	bl	80032be <RTC_ByteToBcd2>
 8003044:	4603      	mov	r3, r0
 8003046:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003048:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	789b      	ldrb	r3, [r3, #2]
 800304e:	4618      	mov	r0, r3
 8003050:	f000 f935 	bl	80032be <RTC_ByteToBcd2>
 8003054:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003056:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003060:	4313      	orrs	r3, r2
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	e00e      	b.n	8003084 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	78db      	ldrb	r3, [r3, #3]
 800306a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	785b      	ldrb	r3, [r3, #1]
 8003070:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003072:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003078:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	22ca      	movs	r2, #202	; 0xca
 800308a:	625a      	str	r2, [r3, #36]	; 0x24
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2253      	movs	r2, #83	; 0x53
 8003092:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 f899 	bl	80031cc <RTC_EnterInitMode>
 800309a:	4603      	mov	r3, r0
 800309c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800309e:	7cfb      	ldrb	r3, [r7, #19]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10c      	bne.n	80030be <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    WRITE_REG(hrtc->Instance->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80030ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80030b2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 f8bf 	bl	8003238 <RTC_ExitInitMode>
 80030ba:	4603      	mov	r3, r0
 80030bc:	74fb      	strb	r3, [r7, #19]
  }
	
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	22ff      	movs	r2, #255	; 0xff
 80030c4:	625a      	str	r2, [r3, #36]	; 0x24
 
  if (status == HAL_OK)
 80030c6:	7cfb      	ldrb	r3, [r7, #19]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d103      	bne.n	80030d4 <HAL_RTC_SetDate+0xfc>
  {

    hrtc->State = HAL_RTC_STATE_READY ;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80030dc:	7cfb      	ldrb	r3, [r7, #19]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	371c      	adds	r7, #28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd90      	pop	{r4, r7, pc}

080030e6 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b086      	sub	sp, #24
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(hrtc->Instance->DR) & RTC_DR_RESERVED_MASK);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80030fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003100:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	0c1b      	lsrs	r3, r3, #16
 8003106:	b2da      	uxtb	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	0a1b      	lsrs	r3, r3, #8
 8003110:	b2db      	uxtb	r3, r3
 8003112:	f003 031f 	and.w	r3, r3, #31
 8003116:	b2da      	uxtb	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	b2db      	uxtb	r3, r3
 8003120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003124:	b2da      	uxtb	r2, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	0b5b      	lsrs	r3, r3, #13
 800312e:	b2db      	uxtb	r3, r3
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	b2da      	uxtb	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d11a      	bne.n	8003176 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	78db      	ldrb	r3, [r3, #3]
 8003144:	4618      	mov	r0, r3
 8003146:	f000 f8da 	bl	80032fe <RTC_Bcd2ToByte>
 800314a:	4603      	mov	r3, r0
 800314c:	461a      	mov	r2, r3
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	785b      	ldrb	r3, [r3, #1]
 8003156:	4618      	mov	r0, r3
 8003158:	f000 f8d1 	bl	80032fe <RTC_Bcd2ToByte>
 800315c:	4603      	mov	r3, r0
 800315e:	461a      	mov	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	789b      	ldrb	r3, [r3, #2]
 8003168:	4618      	mov	r0, r3
 800316a:	f000 f8c8 	bl	80032fe <RTC_Bcd2ToByte>
 800316e:	4603      	mov	r3, r0
 8003170:	461a      	mov	r2, r3
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0220 	bic.w	r2, r2, #32
 8003196:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003198:	f7fd ff3a 	bl	8001010 <HAL_GetTick>
 800319c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800319e:	e009      	b.n	80031b4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80031a0:	f7fd ff36 	bl	8001010 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031ae:	d901      	bls.n	80031b4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e007      	b.n	80031c4 <HAL_RTC_WaitForSynchro+0x44>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0ee      	beq.n	80031a0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d123      	bne.n	800322e <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031f4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80031f6:	f7fd ff0b 	bl	8001010 <HAL_GetTick>
 80031fa:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80031fc:	e00d      	b.n	800321a <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80031fe:	f7fd ff07 	bl	8001010 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800320c:	d905      	bls.n	800321a <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2203      	movs	r2, #3
 8003216:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003224:	2b00      	cmp	r3, #0
 8003226:	d102      	bne.n	800322e <RTC_EnterInitMode+0x62>
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	2b03      	cmp	r3, #3
 800322c:	d1e7      	bne.n	80031fe <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800322e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003240:	2300      	movs	r3, #0
 8003242:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003252:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	f003 0320 	and.w	r3, r3, #32
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10c      	bne.n	800327c <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff ff8c 	bl	8003180 <HAL_RTC_WaitForSynchro>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d022      	beq.n	80032b4 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2203      	movs	r2, #3
 8003272:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	73fb      	strb	r3, [r7, #15]
 800327a:	e01b      	b.n	80032b4 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0220 	bic.w	r2, r2, #32
 800328a:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7ff ff77 	bl	8003180 <HAL_RTC_WaitForSynchro>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2203      	movs	r2, #3
 800329c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699a      	ldr	r2, [r3, #24]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0220 	orr.w	r2, r2, #32
 80032b2:	619a      	str	r2, [r3, #24]
  }

  return status;
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80032be:	b480      	push	{r7}
 80032c0:	b085      	sub	sp, #20
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	4603      	mov	r3, r0
 80032c6:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80032cc:	79fb      	ldrb	r3, [r7, #7]
 80032ce:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80032d0:	e005      	b.n	80032de <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	3301      	adds	r3, #1
 80032d6:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80032d8:	7afb      	ldrb	r3, [r7, #11]
 80032da:	3b0a      	subs	r3, #10
 80032dc:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80032de:	7afb      	ldrb	r3, [r7, #11]
 80032e0:	2b09      	cmp	r3, #9
 80032e2:	d8f6      	bhi.n	80032d2 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	7afb      	ldrb	r3, [r7, #11]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	b2db      	uxtb	r3, r3
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80032fe:	b480      	push	{r7}
 8003300:	b085      	sub	sp, #20
 8003302:	af00      	add	r7, sp, #0
 8003304:	4603      	mov	r3, r0
 8003306:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	091b      	lsrs	r3, r3, #4
 800330c:	b2db      	uxtb	r3, r3
 800330e:	461a      	mov	r2, r3
 8003310:	4613      	mov	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	b2da      	uxtb	r2, r3
 800331e:	79fb      	ldrb	r3, [r7, #7]
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	b2db      	uxtb	r3, r3
 8003326:	4413      	add	r3, r2
 8003328:	b2db      	uxtb	r3, r3
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified TAMP Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 8003344:	4b07      	ldr	r3, [pc, #28]	; (8003364 <HAL_RTCEx_BKUPWrite+0x2c>)
 8003346:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	4413      	add	r3, r2
 8003350:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	601a      	str	r2, [r3, #0]
}
 8003358:	bf00      	nop
 800335a:	371c      	adds	r7, #28
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	40002500 	.word	0x40002500

08003368 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e042      	b.n	8003400 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003380:	2b00      	cmp	r3, #0
 8003382:	d106      	bne.n	8003392 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7fd fcc9 	bl	8000d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2224      	movs	r2, #36	; 0x24
 8003396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0201 	bic.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f82c 	bl	8003408 <UART_SetConfig>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d101      	bne.n	80033ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e022      	b.n	8003400 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 faec 	bl	80039a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 fb73 	bl	8003ae4 <UART_CheckIdleState>
 80033fe:	4603      	mov	r3, r0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800340c:	b08c      	sub	sp, #48	; 0x30
 800340e:	af00      	add	r7, sp, #0
 8003410:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	431a      	orrs	r2, r3
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	431a      	orrs	r2, r3
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	4313      	orrs	r3, r2
 800342e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4bab      	ldr	r3, [pc, #684]	; (80036e4 <UART_SetConfig+0x2dc>)
 8003438:	4013      	ands	r3, r2
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	6812      	ldr	r2, [r2, #0]
 800343e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003440:	430b      	orrs	r3, r1
 8003442:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4aa0      	ldr	r2, [pc, #640]	; (80036e8 <UART_SetConfig+0x2e0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d004      	beq.n	8003474 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003470:	4313      	orrs	r3, r2
 8003472:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800347e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	6812      	ldr	r2, [r2, #0]
 8003486:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003488:	430b      	orrs	r3, r1
 800348a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	f023 010f 	bic.w	r1, r3, #15
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a91      	ldr	r2, [pc, #580]	; (80036ec <UART_SetConfig+0x2e4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d125      	bne.n	80034f8 <UART_SetConfig+0xf0>
 80034ac:	4b90      	ldr	r3, [pc, #576]	; (80036f0 <UART_SetConfig+0x2e8>)
 80034ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	d81a      	bhi.n	80034f0 <UART_SetConfig+0xe8>
 80034ba:	a201      	add	r2, pc, #4	; (adr r2, 80034c0 <UART_SetConfig+0xb8>)
 80034bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c0:	080034d1 	.word	0x080034d1
 80034c4:	080034e1 	.word	0x080034e1
 80034c8:	080034d9 	.word	0x080034d9
 80034cc:	080034e9 	.word	0x080034e9
 80034d0:	2301      	movs	r3, #1
 80034d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034d6:	e0d6      	b.n	8003686 <UART_SetConfig+0x27e>
 80034d8:	2302      	movs	r3, #2
 80034da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034de:	e0d2      	b.n	8003686 <UART_SetConfig+0x27e>
 80034e0:	2304      	movs	r3, #4
 80034e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034e6:	e0ce      	b.n	8003686 <UART_SetConfig+0x27e>
 80034e8:	2308      	movs	r3, #8
 80034ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ee:	e0ca      	b.n	8003686 <UART_SetConfig+0x27e>
 80034f0:	2310      	movs	r3, #16
 80034f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034f6:	e0c6      	b.n	8003686 <UART_SetConfig+0x27e>
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a7d      	ldr	r2, [pc, #500]	; (80036f4 <UART_SetConfig+0x2ec>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d138      	bne.n	8003574 <UART_SetConfig+0x16c>
 8003502:	4b7b      	ldr	r3, [pc, #492]	; (80036f0 <UART_SetConfig+0x2e8>)
 8003504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003508:	f003 030c 	and.w	r3, r3, #12
 800350c:	2b0c      	cmp	r3, #12
 800350e:	d82d      	bhi.n	800356c <UART_SetConfig+0x164>
 8003510:	a201      	add	r2, pc, #4	; (adr r2, 8003518 <UART_SetConfig+0x110>)
 8003512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003516:	bf00      	nop
 8003518:	0800354d 	.word	0x0800354d
 800351c:	0800356d 	.word	0x0800356d
 8003520:	0800356d 	.word	0x0800356d
 8003524:	0800356d 	.word	0x0800356d
 8003528:	0800355d 	.word	0x0800355d
 800352c:	0800356d 	.word	0x0800356d
 8003530:	0800356d 	.word	0x0800356d
 8003534:	0800356d 	.word	0x0800356d
 8003538:	08003555 	.word	0x08003555
 800353c:	0800356d 	.word	0x0800356d
 8003540:	0800356d 	.word	0x0800356d
 8003544:	0800356d 	.word	0x0800356d
 8003548:	08003565 	.word	0x08003565
 800354c:	2300      	movs	r3, #0
 800354e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003552:	e098      	b.n	8003686 <UART_SetConfig+0x27e>
 8003554:	2302      	movs	r3, #2
 8003556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800355a:	e094      	b.n	8003686 <UART_SetConfig+0x27e>
 800355c:	2304      	movs	r3, #4
 800355e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003562:	e090      	b.n	8003686 <UART_SetConfig+0x27e>
 8003564:	2308      	movs	r3, #8
 8003566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800356a:	e08c      	b.n	8003686 <UART_SetConfig+0x27e>
 800356c:	2310      	movs	r3, #16
 800356e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003572:	e088      	b.n	8003686 <UART_SetConfig+0x27e>
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a5f      	ldr	r2, [pc, #380]	; (80036f8 <UART_SetConfig+0x2f0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d125      	bne.n	80035ca <UART_SetConfig+0x1c2>
 800357e:	4b5c      	ldr	r3, [pc, #368]	; (80036f0 <UART_SetConfig+0x2e8>)
 8003580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003584:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003588:	2b30      	cmp	r3, #48	; 0x30
 800358a:	d016      	beq.n	80035ba <UART_SetConfig+0x1b2>
 800358c:	2b30      	cmp	r3, #48	; 0x30
 800358e:	d818      	bhi.n	80035c2 <UART_SetConfig+0x1ba>
 8003590:	2b20      	cmp	r3, #32
 8003592:	d00a      	beq.n	80035aa <UART_SetConfig+0x1a2>
 8003594:	2b20      	cmp	r3, #32
 8003596:	d814      	bhi.n	80035c2 <UART_SetConfig+0x1ba>
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <UART_SetConfig+0x19a>
 800359c:	2b10      	cmp	r3, #16
 800359e:	d008      	beq.n	80035b2 <UART_SetConfig+0x1aa>
 80035a0:	e00f      	b.n	80035c2 <UART_SetConfig+0x1ba>
 80035a2:	2300      	movs	r3, #0
 80035a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035a8:	e06d      	b.n	8003686 <UART_SetConfig+0x27e>
 80035aa:	2302      	movs	r3, #2
 80035ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035b0:	e069      	b.n	8003686 <UART_SetConfig+0x27e>
 80035b2:	2304      	movs	r3, #4
 80035b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035b8:	e065      	b.n	8003686 <UART_SetConfig+0x27e>
 80035ba:	2308      	movs	r3, #8
 80035bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035c0:	e061      	b.n	8003686 <UART_SetConfig+0x27e>
 80035c2:	2310      	movs	r3, #16
 80035c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035c8:	e05d      	b.n	8003686 <UART_SetConfig+0x27e>
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a4b      	ldr	r2, [pc, #300]	; (80036fc <UART_SetConfig+0x2f4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d125      	bne.n	8003620 <UART_SetConfig+0x218>
 80035d4:	4b46      	ldr	r3, [pc, #280]	; (80036f0 <UART_SetConfig+0x2e8>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035de:	2bc0      	cmp	r3, #192	; 0xc0
 80035e0:	d016      	beq.n	8003610 <UART_SetConfig+0x208>
 80035e2:	2bc0      	cmp	r3, #192	; 0xc0
 80035e4:	d818      	bhi.n	8003618 <UART_SetConfig+0x210>
 80035e6:	2b80      	cmp	r3, #128	; 0x80
 80035e8:	d00a      	beq.n	8003600 <UART_SetConfig+0x1f8>
 80035ea:	2b80      	cmp	r3, #128	; 0x80
 80035ec:	d814      	bhi.n	8003618 <UART_SetConfig+0x210>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <UART_SetConfig+0x1f0>
 80035f2:	2b40      	cmp	r3, #64	; 0x40
 80035f4:	d008      	beq.n	8003608 <UART_SetConfig+0x200>
 80035f6:	e00f      	b.n	8003618 <UART_SetConfig+0x210>
 80035f8:	2300      	movs	r3, #0
 80035fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035fe:	e042      	b.n	8003686 <UART_SetConfig+0x27e>
 8003600:	2302      	movs	r3, #2
 8003602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003606:	e03e      	b.n	8003686 <UART_SetConfig+0x27e>
 8003608:	2304      	movs	r3, #4
 800360a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800360e:	e03a      	b.n	8003686 <UART_SetConfig+0x27e>
 8003610:	2308      	movs	r3, #8
 8003612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003616:	e036      	b.n	8003686 <UART_SetConfig+0x27e>
 8003618:	2310      	movs	r3, #16
 800361a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800361e:	e032      	b.n	8003686 <UART_SetConfig+0x27e>
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a30      	ldr	r2, [pc, #192]	; (80036e8 <UART_SetConfig+0x2e0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d12a      	bne.n	8003680 <UART_SetConfig+0x278>
 800362a:	4b31      	ldr	r3, [pc, #196]	; (80036f0 <UART_SetConfig+0x2e8>)
 800362c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003630:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003634:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003638:	d01a      	beq.n	8003670 <UART_SetConfig+0x268>
 800363a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800363e:	d81b      	bhi.n	8003678 <UART_SetConfig+0x270>
 8003640:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003644:	d00c      	beq.n	8003660 <UART_SetConfig+0x258>
 8003646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800364a:	d815      	bhi.n	8003678 <UART_SetConfig+0x270>
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <UART_SetConfig+0x250>
 8003650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003654:	d008      	beq.n	8003668 <UART_SetConfig+0x260>
 8003656:	e00f      	b.n	8003678 <UART_SetConfig+0x270>
 8003658:	2300      	movs	r3, #0
 800365a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800365e:	e012      	b.n	8003686 <UART_SetConfig+0x27e>
 8003660:	2302      	movs	r3, #2
 8003662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003666:	e00e      	b.n	8003686 <UART_SetConfig+0x27e>
 8003668:	2304      	movs	r3, #4
 800366a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800366e:	e00a      	b.n	8003686 <UART_SetConfig+0x27e>
 8003670:	2308      	movs	r3, #8
 8003672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003676:	e006      	b.n	8003686 <UART_SetConfig+0x27e>
 8003678:	2310      	movs	r3, #16
 800367a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800367e:	e002      	b.n	8003686 <UART_SetConfig+0x27e>
 8003680:	2310      	movs	r3, #16
 8003682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a17      	ldr	r2, [pc, #92]	; (80036e8 <UART_SetConfig+0x2e0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	f040 80a8 	bne.w	80037e2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003692:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003696:	2b08      	cmp	r3, #8
 8003698:	d834      	bhi.n	8003704 <UART_SetConfig+0x2fc>
 800369a:	a201      	add	r2, pc, #4	; (adr r2, 80036a0 <UART_SetConfig+0x298>)
 800369c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a0:	080036c5 	.word	0x080036c5
 80036a4:	08003705 	.word	0x08003705
 80036a8:	080036cd 	.word	0x080036cd
 80036ac:	08003705 	.word	0x08003705
 80036b0:	080036d3 	.word	0x080036d3
 80036b4:	08003705 	.word	0x08003705
 80036b8:	08003705 	.word	0x08003705
 80036bc:	08003705 	.word	0x08003705
 80036c0:	080036db 	.word	0x080036db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c4:	f7ff f8b8 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
 80036c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036ca:	e021      	b.n	8003710 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <UART_SetConfig+0x2f8>)
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036d0:	e01e      	b.n	8003710 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036d2:	f7ff f843 	bl	800275c <HAL_RCC_GetSysClockFreq>
 80036d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036d8:	e01a      	b.n	8003710 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036e0:	e016      	b.n	8003710 <UART_SetConfig+0x308>
 80036e2:	bf00      	nop
 80036e4:	cfff69f3 	.word	0xcfff69f3
 80036e8:	40008000 	.word	0x40008000
 80036ec:	40013800 	.word	0x40013800
 80036f0:	40021000 	.word	0x40021000
 80036f4:	40004400 	.word	0x40004400
 80036f8:	40004800 	.word	0x40004800
 80036fc:	40004c00 	.word	0x40004c00
 8003700:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800370e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 812a 	beq.w	800396c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	4a9e      	ldr	r2, [pc, #632]	; (8003998 <UART_SetConfig+0x590>)
 800371e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003722:	461a      	mov	r2, r3
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	fbb3 f3f2 	udiv	r3, r3, r2
 800372a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	4413      	add	r3, r2
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	429a      	cmp	r2, r3
 800373a:	d305      	bcc.n	8003748 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	429a      	cmp	r2, r3
 8003746:	d903      	bls.n	8003750 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800374e:	e10d      	b.n	800396c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	2200      	movs	r2, #0
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	60fa      	str	r2, [r7, #12]
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	4a8e      	ldr	r2, [pc, #568]	; (8003998 <UART_SetConfig+0x590>)
 800375e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003762:	b29b      	uxth	r3, r3
 8003764:	2200      	movs	r2, #0
 8003766:	603b      	str	r3, [r7, #0]
 8003768:	607a      	str	r2, [r7, #4]
 800376a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800376e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003772:	f7fc fda5 	bl	80002c0 <__aeabi_uldivmod>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	4610      	mov	r0, r2
 800377c:	4619      	mov	r1, r3
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	f04f 0300 	mov.w	r3, #0
 8003786:	020b      	lsls	r3, r1, #8
 8003788:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800378c:	0202      	lsls	r2, r0, #8
 800378e:	6979      	ldr	r1, [r7, #20]
 8003790:	6849      	ldr	r1, [r1, #4]
 8003792:	0849      	lsrs	r1, r1, #1
 8003794:	2000      	movs	r0, #0
 8003796:	460c      	mov	r4, r1
 8003798:	4605      	mov	r5, r0
 800379a:	eb12 0804 	adds.w	r8, r2, r4
 800379e:	eb43 0905 	adc.w	r9, r3, r5
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	469a      	mov	sl, r3
 80037aa:	4693      	mov	fp, r2
 80037ac:	4652      	mov	r2, sl
 80037ae:	465b      	mov	r3, fp
 80037b0:	4640      	mov	r0, r8
 80037b2:	4649      	mov	r1, r9
 80037b4:	f7fc fd84 	bl	80002c0 <__aeabi_uldivmod>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4613      	mov	r3, r2
 80037be:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037c6:	d308      	bcc.n	80037da <UART_SetConfig+0x3d2>
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037ce:	d204      	bcs.n	80037da <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6a3a      	ldr	r2, [r7, #32]
 80037d6:	60da      	str	r2, [r3, #12]
 80037d8:	e0c8      	b.n	800396c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80037e0:	e0c4      	b.n	800396c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ea:	d167      	bne.n	80038bc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80037ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d828      	bhi.n	8003846 <UART_SetConfig+0x43e>
 80037f4:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <UART_SetConfig+0x3f4>)
 80037f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fa:	bf00      	nop
 80037fc:	08003821 	.word	0x08003821
 8003800:	08003829 	.word	0x08003829
 8003804:	08003831 	.word	0x08003831
 8003808:	08003847 	.word	0x08003847
 800380c:	08003837 	.word	0x08003837
 8003810:	08003847 	.word	0x08003847
 8003814:	08003847 	.word	0x08003847
 8003818:	08003847 	.word	0x08003847
 800381c:	0800383f 	.word	0x0800383f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003820:	f7ff f80a 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
 8003824:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003826:	e014      	b.n	8003852 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003828:	f7ff f81c 	bl	8002864 <HAL_RCC_GetPCLK2Freq>
 800382c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800382e:	e010      	b.n	8003852 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003830:	4b5a      	ldr	r3, [pc, #360]	; (800399c <UART_SetConfig+0x594>)
 8003832:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003834:	e00d      	b.n	8003852 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003836:	f7fe ff91 	bl	800275c <HAL_RCC_GetSysClockFreq>
 800383a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800383c:	e009      	b.n	8003852 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800383e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003844:	e005      	b.n	8003852 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003846:	2300      	movs	r3, #0
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003850:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 8089 	beq.w	800396c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	4a4e      	ldr	r2, [pc, #312]	; (8003998 <UART_SetConfig+0x590>)
 8003860:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003864:	461a      	mov	r2, r3
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	fbb3 f3f2 	udiv	r3, r3, r2
 800386c:	005a      	lsls	r2, r3, #1
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	085b      	lsrs	r3, r3, #1
 8003874:	441a      	add	r2, r3
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	fbb2 f3f3 	udiv	r3, r2, r3
 800387e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	2b0f      	cmp	r3, #15
 8003884:	d916      	bls.n	80038b4 <UART_SetConfig+0x4ac>
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800388c:	d212      	bcs.n	80038b4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	b29b      	uxth	r3, r3
 8003892:	f023 030f 	bic.w	r3, r3, #15
 8003896:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	085b      	lsrs	r3, r3, #1
 800389c:	b29b      	uxth	r3, r3
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	8bfb      	ldrh	r3, [r7, #30]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	8bfa      	ldrh	r2, [r7, #30]
 80038b0:	60da      	str	r2, [r3, #12]
 80038b2:	e05b      	b.n	800396c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80038ba:	e057      	b.n	800396c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d828      	bhi.n	8003916 <UART_SetConfig+0x50e>
 80038c4:	a201      	add	r2, pc, #4	; (adr r2, 80038cc <UART_SetConfig+0x4c4>)
 80038c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ca:	bf00      	nop
 80038cc:	080038f1 	.word	0x080038f1
 80038d0:	080038f9 	.word	0x080038f9
 80038d4:	08003901 	.word	0x08003901
 80038d8:	08003917 	.word	0x08003917
 80038dc:	08003907 	.word	0x08003907
 80038e0:	08003917 	.word	0x08003917
 80038e4:	08003917 	.word	0x08003917
 80038e8:	08003917 	.word	0x08003917
 80038ec:	0800390f 	.word	0x0800390f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038f0:	f7fe ffa2 	bl	8002838 <HAL_RCC_GetPCLK1Freq>
 80038f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038f6:	e014      	b.n	8003922 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038f8:	f7fe ffb4 	bl	8002864 <HAL_RCC_GetPCLK2Freq>
 80038fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038fe:	e010      	b.n	8003922 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003900:	4b26      	ldr	r3, [pc, #152]	; (800399c <UART_SetConfig+0x594>)
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003904:	e00d      	b.n	8003922 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003906:	f7fe ff29 	bl	800275c <HAL_RCC_GetSysClockFreq>
 800390a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800390c:	e009      	b.n	8003922 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800390e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003912:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003914:	e005      	b.n	8003922 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003916:	2300      	movs	r3, #0
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003920:	bf00      	nop
    }

    if (pclk != 0U)
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	2b00      	cmp	r3, #0
 8003926:	d021      	beq.n	800396c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	4a1a      	ldr	r2, [pc, #104]	; (8003998 <UART_SetConfig+0x590>)
 800392e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003932:	461a      	mov	r2, r3
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	fbb3 f2f2 	udiv	r2, r3, r2
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	085b      	lsrs	r3, r3, #1
 8003940:	441a      	add	r2, r3
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	fbb2 f3f3 	udiv	r3, r2, r3
 800394a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	2b0f      	cmp	r3, #15
 8003950:	d909      	bls.n	8003966 <UART_SetConfig+0x55e>
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003958:	d205      	bcs.n	8003966 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	b29a      	uxth	r2, r3
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	60da      	str	r2, [r3, #12]
 8003964:	e002      	b.n	800396c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	2201      	movs	r2, #1
 8003970:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	2201      	movs	r2, #1
 8003978:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2200      	movs	r2, #0
 8003980:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2200      	movs	r2, #0
 8003986:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003988:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800398c:	4618      	mov	r0, r3
 800398e:	3730      	adds	r7, #48	; 0x30
 8003990:	46bd      	mov	sp, r7
 8003992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003996:	bf00      	nop
 8003998:	080048b4 	.word	0x080048b4
 800399c:	00f42400 	.word	0x00f42400

080039a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00a      	beq.n	80039ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a34:	f003 0310 	and.w	r3, r3, #16
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d01a      	beq.n	8003ab6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a9e:	d10a      	bne.n	8003ab6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	605a      	str	r2, [r3, #4]
  }
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af02      	add	r7, sp, #8
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003af4:	f7fd fa8c 	bl	8001010 <HAL_GetTick>
 8003af8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0308 	and.w	r3, r3, #8
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d10e      	bne.n	8003b26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f82f 	bl	8003b7a <UART_WaitOnFlagUntilTimeout>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e025      	b.n	8003b72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d10e      	bne.n	8003b52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f819 	bl	8003b7a <UART_WaitOnFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e00f      	b.n	8003b72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b09c      	sub	sp, #112	; 0x70
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	603b      	str	r3, [r7, #0]
 8003b86:	4613      	mov	r3, r2
 8003b88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8a:	e0a9      	b.n	8003ce0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b92:	f000 80a5 	beq.w	8003ce0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b96:	f7fd fa3b 	bl	8001010 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d302      	bcc.n	8003bac <UART_WaitOnFlagUntilTimeout+0x32>
 8003ba6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d140      	bne.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bb4:	e853 3f00 	ldrex	r3, [r3]
 8003bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bc0:	667b      	str	r3, [r7, #100]	; 0x64
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bcc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003bd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003bd2:	e841 2300 	strex	r3, r2, [r1]
 8003bd6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1e6      	bne.n	8003bac <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3308      	adds	r3, #8
 8003be4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be8:	e853 3f00 	ldrex	r3, [r3]
 8003bec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf0:	f023 0301 	bic.w	r3, r3, #1
 8003bf4:	663b      	str	r3, [r7, #96]	; 0x60
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	3308      	adds	r3, #8
 8003bfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003bfe:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c06:	e841 2300 	strex	r3, r2, [r1]
 8003c0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1e5      	bne.n	8003bde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e069      	b.n	8003d02 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d051      	beq.n	8003ce0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c4a:	d149      	bne.n	8003ce0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5e:	e853 3f00 	ldrex	r3, [r3]
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c74:	637b      	str	r3, [r7, #52]	; 0x34
 8003c76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c7c:	e841 2300 	strex	r3, r2, [r1]
 8003c80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e6      	bne.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3308      	adds	r3, #8
 8003c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	e853 3f00 	ldrex	r3, [r3]
 8003c96:	613b      	str	r3, [r7, #16]
   return(result);
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f023 0301 	bic.w	r3, r3, #1
 8003c9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3308      	adds	r3, #8
 8003ca6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ca8:	623a      	str	r2, [r7, #32]
 8003caa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cac:	69f9      	ldr	r1, [r7, #28]
 8003cae:	6a3a      	ldr	r2, [r7, #32]
 8003cb0:	e841 2300 	strex	r3, r2, [r1]
 8003cb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e5      	bne.n	8003c88 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e010      	b.n	8003d02 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	69da      	ldr	r2, [r3, #28]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	bf0c      	ite	eq
 8003cf0:	2301      	moveq	r3, #1
 8003cf2:	2300      	movne	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	f43f af46 	beq.w	8003b8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3770      	adds	r7, #112	; 0x70
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b085      	sub	sp, #20
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d101      	bne.n	8003d20 <HAL_UARTEx_DisableFifoMode+0x16>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e027      	b.n	8003d70 <HAL_UARTEx_DisableFifoMode+0x66>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2224      	movs	r2, #36	; 0x24
 8003d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0201 	bic.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003d4e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e02d      	b.n	8003df0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2224      	movs	r2, #36	; 0x24
 8003da0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0201 	bic.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f84f 	bl	8003e74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e02d      	b.n	8003e6c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2224      	movs	r2, #36	; 0x24
 8003e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0201 	bic.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f811 	bl	8003e74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d108      	bne.n	8003e96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003e94:	e031      	b.n	8003efa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003e96:	2308      	movs	r3, #8
 8003e98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003e9a:	2308      	movs	r3, #8
 8003e9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	0e5b      	lsrs	r3, r3, #25
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	0f5b      	lsrs	r3, r3, #29
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ebe:	7bbb      	ldrb	r3, [r7, #14]
 8003ec0:	7b3a      	ldrb	r2, [r7, #12]
 8003ec2:	4911      	ldr	r1, [pc, #68]	; (8003f08 <UARTEx_SetNbDataToProcess+0x94>)
 8003ec4:	5c8a      	ldrb	r2, [r1, r2]
 8003ec6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003eca:	7b3a      	ldrb	r2, [r7, #12]
 8003ecc:	490f      	ldr	r1, [pc, #60]	; (8003f0c <UARTEx_SetNbDataToProcess+0x98>)
 8003ece:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ed0:	fb93 f3f2 	sdiv	r3, r3, r2
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
 8003ede:	7b7a      	ldrb	r2, [r7, #13]
 8003ee0:	4909      	ldr	r1, [pc, #36]	; (8003f08 <UARTEx_SetNbDataToProcess+0x94>)
 8003ee2:	5c8a      	ldrb	r2, [r1, r2]
 8003ee4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003ee8:	7b7a      	ldrb	r2, [r7, #13]
 8003eea:	4908      	ldr	r1, [pc, #32]	; (8003f0c <UARTEx_SetNbDataToProcess+0x98>)
 8003eec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003eee:	fb93 f3f2 	sdiv	r3, r3, r2
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003efa:	bf00      	nop
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	080048cc 	.word	0x080048cc
 8003f0c:	080048d4 	.word	0x080048d4

08003f10 <siprintf>:
 8003f10:	b40e      	push	{r1, r2, r3}
 8003f12:	b500      	push	{lr}
 8003f14:	b09c      	sub	sp, #112	; 0x70
 8003f16:	ab1d      	add	r3, sp, #116	; 0x74
 8003f18:	9002      	str	r0, [sp, #8]
 8003f1a:	9006      	str	r0, [sp, #24]
 8003f1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f20:	4809      	ldr	r0, [pc, #36]	; (8003f48 <siprintf+0x38>)
 8003f22:	9107      	str	r1, [sp, #28]
 8003f24:	9104      	str	r1, [sp, #16]
 8003f26:	4909      	ldr	r1, [pc, #36]	; (8003f4c <siprintf+0x3c>)
 8003f28:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f2c:	9105      	str	r1, [sp, #20]
 8003f2e:	6800      	ldr	r0, [r0, #0]
 8003f30:	9301      	str	r3, [sp, #4]
 8003f32:	a902      	add	r1, sp, #8
 8003f34:	f000 f992 	bl	800425c <_svfiprintf_r>
 8003f38:	9b02      	ldr	r3, [sp, #8]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	701a      	strb	r2, [r3, #0]
 8003f3e:	b01c      	add	sp, #112	; 0x70
 8003f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f44:	b003      	add	sp, #12
 8003f46:	4770      	bx	lr
 8003f48:	20000058 	.word	0x20000058
 8003f4c:	ffff0208 	.word	0xffff0208

08003f50 <memset>:
 8003f50:	4402      	add	r2, r0
 8003f52:	4603      	mov	r3, r0
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d100      	bne.n	8003f5a <memset+0xa>
 8003f58:	4770      	bx	lr
 8003f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f5e:	e7f9      	b.n	8003f54 <memset+0x4>

08003f60 <__errno>:
 8003f60:	4b01      	ldr	r3, [pc, #4]	; (8003f68 <__errno+0x8>)
 8003f62:	6818      	ldr	r0, [r3, #0]
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	20000058 	.word	0x20000058

08003f6c <__libc_init_array>:
 8003f6c:	b570      	push	{r4, r5, r6, lr}
 8003f6e:	4d0d      	ldr	r5, [pc, #52]	; (8003fa4 <__libc_init_array+0x38>)
 8003f70:	4c0d      	ldr	r4, [pc, #52]	; (8003fa8 <__libc_init_array+0x3c>)
 8003f72:	1b64      	subs	r4, r4, r5
 8003f74:	10a4      	asrs	r4, r4, #2
 8003f76:	2600      	movs	r6, #0
 8003f78:	42a6      	cmp	r6, r4
 8003f7a:	d109      	bne.n	8003f90 <__libc_init_array+0x24>
 8003f7c:	4d0b      	ldr	r5, [pc, #44]	; (8003fac <__libc_init_array+0x40>)
 8003f7e:	4c0c      	ldr	r4, [pc, #48]	; (8003fb0 <__libc_init_array+0x44>)
 8003f80:	f000 fc6a 	bl	8004858 <_init>
 8003f84:	1b64      	subs	r4, r4, r5
 8003f86:	10a4      	asrs	r4, r4, #2
 8003f88:	2600      	movs	r6, #0
 8003f8a:	42a6      	cmp	r6, r4
 8003f8c:	d105      	bne.n	8003f9a <__libc_init_array+0x2e>
 8003f8e:	bd70      	pop	{r4, r5, r6, pc}
 8003f90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f94:	4798      	blx	r3
 8003f96:	3601      	adds	r6, #1
 8003f98:	e7ee      	b.n	8003f78 <__libc_init_array+0xc>
 8003f9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f9e:	4798      	blx	r3
 8003fa0:	3601      	adds	r6, #1
 8003fa2:	e7f2      	b.n	8003f8a <__libc_init_array+0x1e>
 8003fa4:	08004918 	.word	0x08004918
 8003fa8:	08004918 	.word	0x08004918
 8003fac:	08004918 	.word	0x08004918
 8003fb0:	0800491c 	.word	0x0800491c

08003fb4 <__retarget_lock_acquire_recursive>:
 8003fb4:	4770      	bx	lr

08003fb6 <__retarget_lock_release_recursive>:
 8003fb6:	4770      	bx	lr

08003fb8 <_free_r>:
 8003fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fba:	2900      	cmp	r1, #0
 8003fbc:	d044      	beq.n	8004048 <_free_r+0x90>
 8003fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fc2:	9001      	str	r0, [sp, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f1a1 0404 	sub.w	r4, r1, #4
 8003fca:	bfb8      	it	lt
 8003fcc:	18e4      	addlt	r4, r4, r3
 8003fce:	f000 f8df 	bl	8004190 <__malloc_lock>
 8003fd2:	4a1e      	ldr	r2, [pc, #120]	; (800404c <_free_r+0x94>)
 8003fd4:	9801      	ldr	r0, [sp, #4]
 8003fd6:	6813      	ldr	r3, [r2, #0]
 8003fd8:	b933      	cbnz	r3, 8003fe8 <_free_r+0x30>
 8003fda:	6063      	str	r3, [r4, #4]
 8003fdc:	6014      	str	r4, [r2, #0]
 8003fde:	b003      	add	sp, #12
 8003fe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fe4:	f000 b8da 	b.w	800419c <__malloc_unlock>
 8003fe8:	42a3      	cmp	r3, r4
 8003fea:	d908      	bls.n	8003ffe <_free_r+0x46>
 8003fec:	6825      	ldr	r5, [r4, #0]
 8003fee:	1961      	adds	r1, r4, r5
 8003ff0:	428b      	cmp	r3, r1
 8003ff2:	bf01      	itttt	eq
 8003ff4:	6819      	ldreq	r1, [r3, #0]
 8003ff6:	685b      	ldreq	r3, [r3, #4]
 8003ff8:	1949      	addeq	r1, r1, r5
 8003ffa:	6021      	streq	r1, [r4, #0]
 8003ffc:	e7ed      	b.n	8003fda <_free_r+0x22>
 8003ffe:	461a      	mov	r2, r3
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	b10b      	cbz	r3, 8004008 <_free_r+0x50>
 8004004:	42a3      	cmp	r3, r4
 8004006:	d9fa      	bls.n	8003ffe <_free_r+0x46>
 8004008:	6811      	ldr	r1, [r2, #0]
 800400a:	1855      	adds	r5, r2, r1
 800400c:	42a5      	cmp	r5, r4
 800400e:	d10b      	bne.n	8004028 <_free_r+0x70>
 8004010:	6824      	ldr	r4, [r4, #0]
 8004012:	4421      	add	r1, r4
 8004014:	1854      	adds	r4, r2, r1
 8004016:	42a3      	cmp	r3, r4
 8004018:	6011      	str	r1, [r2, #0]
 800401a:	d1e0      	bne.n	8003fde <_free_r+0x26>
 800401c:	681c      	ldr	r4, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	6053      	str	r3, [r2, #4]
 8004022:	440c      	add	r4, r1
 8004024:	6014      	str	r4, [r2, #0]
 8004026:	e7da      	b.n	8003fde <_free_r+0x26>
 8004028:	d902      	bls.n	8004030 <_free_r+0x78>
 800402a:	230c      	movs	r3, #12
 800402c:	6003      	str	r3, [r0, #0]
 800402e:	e7d6      	b.n	8003fde <_free_r+0x26>
 8004030:	6825      	ldr	r5, [r4, #0]
 8004032:	1961      	adds	r1, r4, r5
 8004034:	428b      	cmp	r3, r1
 8004036:	bf04      	itt	eq
 8004038:	6819      	ldreq	r1, [r3, #0]
 800403a:	685b      	ldreq	r3, [r3, #4]
 800403c:	6063      	str	r3, [r4, #4]
 800403e:	bf04      	itt	eq
 8004040:	1949      	addeq	r1, r1, r5
 8004042:	6021      	streq	r1, [r4, #0]
 8004044:	6054      	str	r4, [r2, #4]
 8004046:	e7ca      	b.n	8003fde <_free_r+0x26>
 8004048:	b003      	add	sp, #12
 800404a:	bd30      	pop	{r4, r5, pc}
 800404c:	2000030c 	.word	0x2000030c

08004050 <sbrk_aligned>:
 8004050:	b570      	push	{r4, r5, r6, lr}
 8004052:	4e0e      	ldr	r6, [pc, #56]	; (800408c <sbrk_aligned+0x3c>)
 8004054:	460c      	mov	r4, r1
 8004056:	6831      	ldr	r1, [r6, #0]
 8004058:	4605      	mov	r5, r0
 800405a:	b911      	cbnz	r1, 8004062 <sbrk_aligned+0x12>
 800405c:	f000 fba6 	bl	80047ac <_sbrk_r>
 8004060:	6030      	str	r0, [r6, #0]
 8004062:	4621      	mov	r1, r4
 8004064:	4628      	mov	r0, r5
 8004066:	f000 fba1 	bl	80047ac <_sbrk_r>
 800406a:	1c43      	adds	r3, r0, #1
 800406c:	d00a      	beq.n	8004084 <sbrk_aligned+0x34>
 800406e:	1cc4      	adds	r4, r0, #3
 8004070:	f024 0403 	bic.w	r4, r4, #3
 8004074:	42a0      	cmp	r0, r4
 8004076:	d007      	beq.n	8004088 <sbrk_aligned+0x38>
 8004078:	1a21      	subs	r1, r4, r0
 800407a:	4628      	mov	r0, r5
 800407c:	f000 fb96 	bl	80047ac <_sbrk_r>
 8004080:	3001      	adds	r0, #1
 8004082:	d101      	bne.n	8004088 <sbrk_aligned+0x38>
 8004084:	f04f 34ff 	mov.w	r4, #4294967295
 8004088:	4620      	mov	r0, r4
 800408a:	bd70      	pop	{r4, r5, r6, pc}
 800408c:	20000310 	.word	0x20000310

08004090 <_malloc_r>:
 8004090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004094:	1ccd      	adds	r5, r1, #3
 8004096:	f025 0503 	bic.w	r5, r5, #3
 800409a:	3508      	adds	r5, #8
 800409c:	2d0c      	cmp	r5, #12
 800409e:	bf38      	it	cc
 80040a0:	250c      	movcc	r5, #12
 80040a2:	2d00      	cmp	r5, #0
 80040a4:	4607      	mov	r7, r0
 80040a6:	db01      	blt.n	80040ac <_malloc_r+0x1c>
 80040a8:	42a9      	cmp	r1, r5
 80040aa:	d905      	bls.n	80040b8 <_malloc_r+0x28>
 80040ac:	230c      	movs	r3, #12
 80040ae:	603b      	str	r3, [r7, #0]
 80040b0:	2600      	movs	r6, #0
 80040b2:	4630      	mov	r0, r6
 80040b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800418c <_malloc_r+0xfc>
 80040bc:	f000 f868 	bl	8004190 <__malloc_lock>
 80040c0:	f8d8 3000 	ldr.w	r3, [r8]
 80040c4:	461c      	mov	r4, r3
 80040c6:	bb5c      	cbnz	r4, 8004120 <_malloc_r+0x90>
 80040c8:	4629      	mov	r1, r5
 80040ca:	4638      	mov	r0, r7
 80040cc:	f7ff ffc0 	bl	8004050 <sbrk_aligned>
 80040d0:	1c43      	adds	r3, r0, #1
 80040d2:	4604      	mov	r4, r0
 80040d4:	d155      	bne.n	8004182 <_malloc_r+0xf2>
 80040d6:	f8d8 4000 	ldr.w	r4, [r8]
 80040da:	4626      	mov	r6, r4
 80040dc:	2e00      	cmp	r6, #0
 80040de:	d145      	bne.n	800416c <_malloc_r+0xdc>
 80040e0:	2c00      	cmp	r4, #0
 80040e2:	d048      	beq.n	8004176 <_malloc_r+0xe6>
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	4631      	mov	r1, r6
 80040e8:	4638      	mov	r0, r7
 80040ea:	eb04 0903 	add.w	r9, r4, r3
 80040ee:	f000 fb5d 	bl	80047ac <_sbrk_r>
 80040f2:	4581      	cmp	r9, r0
 80040f4:	d13f      	bne.n	8004176 <_malloc_r+0xe6>
 80040f6:	6821      	ldr	r1, [r4, #0]
 80040f8:	1a6d      	subs	r5, r5, r1
 80040fa:	4629      	mov	r1, r5
 80040fc:	4638      	mov	r0, r7
 80040fe:	f7ff ffa7 	bl	8004050 <sbrk_aligned>
 8004102:	3001      	adds	r0, #1
 8004104:	d037      	beq.n	8004176 <_malloc_r+0xe6>
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	442b      	add	r3, r5
 800410a:	6023      	str	r3, [r4, #0]
 800410c:	f8d8 3000 	ldr.w	r3, [r8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d038      	beq.n	8004186 <_malloc_r+0xf6>
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	42a2      	cmp	r2, r4
 8004118:	d12b      	bne.n	8004172 <_malloc_r+0xe2>
 800411a:	2200      	movs	r2, #0
 800411c:	605a      	str	r2, [r3, #4]
 800411e:	e00f      	b.n	8004140 <_malloc_r+0xb0>
 8004120:	6822      	ldr	r2, [r4, #0]
 8004122:	1b52      	subs	r2, r2, r5
 8004124:	d41f      	bmi.n	8004166 <_malloc_r+0xd6>
 8004126:	2a0b      	cmp	r2, #11
 8004128:	d917      	bls.n	800415a <_malloc_r+0xca>
 800412a:	1961      	adds	r1, r4, r5
 800412c:	42a3      	cmp	r3, r4
 800412e:	6025      	str	r5, [r4, #0]
 8004130:	bf18      	it	ne
 8004132:	6059      	strne	r1, [r3, #4]
 8004134:	6863      	ldr	r3, [r4, #4]
 8004136:	bf08      	it	eq
 8004138:	f8c8 1000 	streq.w	r1, [r8]
 800413c:	5162      	str	r2, [r4, r5]
 800413e:	604b      	str	r3, [r1, #4]
 8004140:	4638      	mov	r0, r7
 8004142:	f104 060b 	add.w	r6, r4, #11
 8004146:	f000 f829 	bl	800419c <__malloc_unlock>
 800414a:	f026 0607 	bic.w	r6, r6, #7
 800414e:	1d23      	adds	r3, r4, #4
 8004150:	1af2      	subs	r2, r6, r3
 8004152:	d0ae      	beq.n	80040b2 <_malloc_r+0x22>
 8004154:	1b9b      	subs	r3, r3, r6
 8004156:	50a3      	str	r3, [r4, r2]
 8004158:	e7ab      	b.n	80040b2 <_malloc_r+0x22>
 800415a:	42a3      	cmp	r3, r4
 800415c:	6862      	ldr	r2, [r4, #4]
 800415e:	d1dd      	bne.n	800411c <_malloc_r+0x8c>
 8004160:	f8c8 2000 	str.w	r2, [r8]
 8004164:	e7ec      	b.n	8004140 <_malloc_r+0xb0>
 8004166:	4623      	mov	r3, r4
 8004168:	6864      	ldr	r4, [r4, #4]
 800416a:	e7ac      	b.n	80040c6 <_malloc_r+0x36>
 800416c:	4634      	mov	r4, r6
 800416e:	6876      	ldr	r6, [r6, #4]
 8004170:	e7b4      	b.n	80040dc <_malloc_r+0x4c>
 8004172:	4613      	mov	r3, r2
 8004174:	e7cc      	b.n	8004110 <_malloc_r+0x80>
 8004176:	230c      	movs	r3, #12
 8004178:	603b      	str	r3, [r7, #0]
 800417a:	4638      	mov	r0, r7
 800417c:	f000 f80e 	bl	800419c <__malloc_unlock>
 8004180:	e797      	b.n	80040b2 <_malloc_r+0x22>
 8004182:	6025      	str	r5, [r4, #0]
 8004184:	e7dc      	b.n	8004140 <_malloc_r+0xb0>
 8004186:	605b      	str	r3, [r3, #4]
 8004188:	deff      	udf	#255	; 0xff
 800418a:	bf00      	nop
 800418c:	2000030c 	.word	0x2000030c

08004190 <__malloc_lock>:
 8004190:	4801      	ldr	r0, [pc, #4]	; (8004198 <__malloc_lock+0x8>)
 8004192:	f7ff bf0f 	b.w	8003fb4 <__retarget_lock_acquire_recursive>
 8004196:	bf00      	nop
 8004198:	20000308 	.word	0x20000308

0800419c <__malloc_unlock>:
 800419c:	4801      	ldr	r0, [pc, #4]	; (80041a4 <__malloc_unlock+0x8>)
 800419e:	f7ff bf0a 	b.w	8003fb6 <__retarget_lock_release_recursive>
 80041a2:	bf00      	nop
 80041a4:	20000308 	.word	0x20000308

080041a8 <__ssputs_r>:
 80041a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041ac:	688e      	ldr	r6, [r1, #8]
 80041ae:	461f      	mov	r7, r3
 80041b0:	42be      	cmp	r6, r7
 80041b2:	680b      	ldr	r3, [r1, #0]
 80041b4:	4682      	mov	sl, r0
 80041b6:	460c      	mov	r4, r1
 80041b8:	4690      	mov	r8, r2
 80041ba:	d82c      	bhi.n	8004216 <__ssputs_r+0x6e>
 80041bc:	898a      	ldrh	r2, [r1, #12]
 80041be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041c2:	d026      	beq.n	8004212 <__ssputs_r+0x6a>
 80041c4:	6965      	ldr	r5, [r4, #20]
 80041c6:	6909      	ldr	r1, [r1, #16]
 80041c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041cc:	eba3 0901 	sub.w	r9, r3, r1
 80041d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041d4:	1c7b      	adds	r3, r7, #1
 80041d6:	444b      	add	r3, r9
 80041d8:	106d      	asrs	r5, r5, #1
 80041da:	429d      	cmp	r5, r3
 80041dc:	bf38      	it	cc
 80041de:	461d      	movcc	r5, r3
 80041e0:	0553      	lsls	r3, r2, #21
 80041e2:	d527      	bpl.n	8004234 <__ssputs_r+0x8c>
 80041e4:	4629      	mov	r1, r5
 80041e6:	f7ff ff53 	bl	8004090 <_malloc_r>
 80041ea:	4606      	mov	r6, r0
 80041ec:	b360      	cbz	r0, 8004248 <__ssputs_r+0xa0>
 80041ee:	6921      	ldr	r1, [r4, #16]
 80041f0:	464a      	mov	r2, r9
 80041f2:	f000 faeb 	bl	80047cc <memcpy>
 80041f6:	89a3      	ldrh	r3, [r4, #12]
 80041f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004200:	81a3      	strh	r3, [r4, #12]
 8004202:	6126      	str	r6, [r4, #16]
 8004204:	6165      	str	r5, [r4, #20]
 8004206:	444e      	add	r6, r9
 8004208:	eba5 0509 	sub.w	r5, r5, r9
 800420c:	6026      	str	r6, [r4, #0]
 800420e:	60a5      	str	r5, [r4, #8]
 8004210:	463e      	mov	r6, r7
 8004212:	42be      	cmp	r6, r7
 8004214:	d900      	bls.n	8004218 <__ssputs_r+0x70>
 8004216:	463e      	mov	r6, r7
 8004218:	6820      	ldr	r0, [r4, #0]
 800421a:	4632      	mov	r2, r6
 800421c:	4641      	mov	r1, r8
 800421e:	f000 faab 	bl	8004778 <memmove>
 8004222:	68a3      	ldr	r3, [r4, #8]
 8004224:	1b9b      	subs	r3, r3, r6
 8004226:	60a3      	str	r3, [r4, #8]
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	4433      	add	r3, r6
 800422c:	6023      	str	r3, [r4, #0]
 800422e:	2000      	movs	r0, #0
 8004230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004234:	462a      	mov	r2, r5
 8004236:	f000 fad7 	bl	80047e8 <_realloc_r>
 800423a:	4606      	mov	r6, r0
 800423c:	2800      	cmp	r0, #0
 800423e:	d1e0      	bne.n	8004202 <__ssputs_r+0x5a>
 8004240:	6921      	ldr	r1, [r4, #16]
 8004242:	4650      	mov	r0, sl
 8004244:	f7ff feb8 	bl	8003fb8 <_free_r>
 8004248:	230c      	movs	r3, #12
 800424a:	f8ca 3000 	str.w	r3, [sl]
 800424e:	89a3      	ldrh	r3, [r4, #12]
 8004250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004254:	81a3      	strh	r3, [r4, #12]
 8004256:	f04f 30ff 	mov.w	r0, #4294967295
 800425a:	e7e9      	b.n	8004230 <__ssputs_r+0x88>

0800425c <_svfiprintf_r>:
 800425c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004260:	4698      	mov	r8, r3
 8004262:	898b      	ldrh	r3, [r1, #12]
 8004264:	061b      	lsls	r3, r3, #24
 8004266:	b09d      	sub	sp, #116	; 0x74
 8004268:	4607      	mov	r7, r0
 800426a:	460d      	mov	r5, r1
 800426c:	4614      	mov	r4, r2
 800426e:	d50e      	bpl.n	800428e <_svfiprintf_r+0x32>
 8004270:	690b      	ldr	r3, [r1, #16]
 8004272:	b963      	cbnz	r3, 800428e <_svfiprintf_r+0x32>
 8004274:	2140      	movs	r1, #64	; 0x40
 8004276:	f7ff ff0b 	bl	8004090 <_malloc_r>
 800427a:	6028      	str	r0, [r5, #0]
 800427c:	6128      	str	r0, [r5, #16]
 800427e:	b920      	cbnz	r0, 800428a <_svfiprintf_r+0x2e>
 8004280:	230c      	movs	r3, #12
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	f04f 30ff 	mov.w	r0, #4294967295
 8004288:	e0d0      	b.n	800442c <_svfiprintf_r+0x1d0>
 800428a:	2340      	movs	r3, #64	; 0x40
 800428c:	616b      	str	r3, [r5, #20]
 800428e:	2300      	movs	r3, #0
 8004290:	9309      	str	r3, [sp, #36]	; 0x24
 8004292:	2320      	movs	r3, #32
 8004294:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004298:	f8cd 800c 	str.w	r8, [sp, #12]
 800429c:	2330      	movs	r3, #48	; 0x30
 800429e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004444 <_svfiprintf_r+0x1e8>
 80042a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042a6:	f04f 0901 	mov.w	r9, #1
 80042aa:	4623      	mov	r3, r4
 80042ac:	469a      	mov	sl, r3
 80042ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042b2:	b10a      	cbz	r2, 80042b8 <_svfiprintf_r+0x5c>
 80042b4:	2a25      	cmp	r2, #37	; 0x25
 80042b6:	d1f9      	bne.n	80042ac <_svfiprintf_r+0x50>
 80042b8:	ebba 0b04 	subs.w	fp, sl, r4
 80042bc:	d00b      	beq.n	80042d6 <_svfiprintf_r+0x7a>
 80042be:	465b      	mov	r3, fp
 80042c0:	4622      	mov	r2, r4
 80042c2:	4629      	mov	r1, r5
 80042c4:	4638      	mov	r0, r7
 80042c6:	f7ff ff6f 	bl	80041a8 <__ssputs_r>
 80042ca:	3001      	adds	r0, #1
 80042cc:	f000 80a9 	beq.w	8004422 <_svfiprintf_r+0x1c6>
 80042d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042d2:	445a      	add	r2, fp
 80042d4:	9209      	str	r2, [sp, #36]	; 0x24
 80042d6:	f89a 3000 	ldrb.w	r3, [sl]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 80a1 	beq.w	8004422 <_svfiprintf_r+0x1c6>
 80042e0:	2300      	movs	r3, #0
 80042e2:	f04f 32ff 	mov.w	r2, #4294967295
 80042e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042ea:	f10a 0a01 	add.w	sl, sl, #1
 80042ee:	9304      	str	r3, [sp, #16]
 80042f0:	9307      	str	r3, [sp, #28]
 80042f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042f6:	931a      	str	r3, [sp, #104]	; 0x68
 80042f8:	4654      	mov	r4, sl
 80042fa:	2205      	movs	r2, #5
 80042fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004300:	4850      	ldr	r0, [pc, #320]	; (8004444 <_svfiprintf_r+0x1e8>)
 8004302:	f7fb ff8d 	bl	8000220 <memchr>
 8004306:	9a04      	ldr	r2, [sp, #16]
 8004308:	b9d8      	cbnz	r0, 8004342 <_svfiprintf_r+0xe6>
 800430a:	06d0      	lsls	r0, r2, #27
 800430c:	bf44      	itt	mi
 800430e:	2320      	movmi	r3, #32
 8004310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004314:	0711      	lsls	r1, r2, #28
 8004316:	bf44      	itt	mi
 8004318:	232b      	movmi	r3, #43	; 0x2b
 800431a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800431e:	f89a 3000 	ldrb.w	r3, [sl]
 8004322:	2b2a      	cmp	r3, #42	; 0x2a
 8004324:	d015      	beq.n	8004352 <_svfiprintf_r+0xf6>
 8004326:	9a07      	ldr	r2, [sp, #28]
 8004328:	4654      	mov	r4, sl
 800432a:	2000      	movs	r0, #0
 800432c:	f04f 0c0a 	mov.w	ip, #10
 8004330:	4621      	mov	r1, r4
 8004332:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004336:	3b30      	subs	r3, #48	; 0x30
 8004338:	2b09      	cmp	r3, #9
 800433a:	d94d      	bls.n	80043d8 <_svfiprintf_r+0x17c>
 800433c:	b1b0      	cbz	r0, 800436c <_svfiprintf_r+0x110>
 800433e:	9207      	str	r2, [sp, #28]
 8004340:	e014      	b.n	800436c <_svfiprintf_r+0x110>
 8004342:	eba0 0308 	sub.w	r3, r0, r8
 8004346:	fa09 f303 	lsl.w	r3, r9, r3
 800434a:	4313      	orrs	r3, r2
 800434c:	9304      	str	r3, [sp, #16]
 800434e:	46a2      	mov	sl, r4
 8004350:	e7d2      	b.n	80042f8 <_svfiprintf_r+0x9c>
 8004352:	9b03      	ldr	r3, [sp, #12]
 8004354:	1d19      	adds	r1, r3, #4
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	9103      	str	r1, [sp, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	bfbb      	ittet	lt
 800435e:	425b      	neglt	r3, r3
 8004360:	f042 0202 	orrlt.w	r2, r2, #2
 8004364:	9307      	strge	r3, [sp, #28]
 8004366:	9307      	strlt	r3, [sp, #28]
 8004368:	bfb8      	it	lt
 800436a:	9204      	strlt	r2, [sp, #16]
 800436c:	7823      	ldrb	r3, [r4, #0]
 800436e:	2b2e      	cmp	r3, #46	; 0x2e
 8004370:	d10c      	bne.n	800438c <_svfiprintf_r+0x130>
 8004372:	7863      	ldrb	r3, [r4, #1]
 8004374:	2b2a      	cmp	r3, #42	; 0x2a
 8004376:	d134      	bne.n	80043e2 <_svfiprintf_r+0x186>
 8004378:	9b03      	ldr	r3, [sp, #12]
 800437a:	1d1a      	adds	r2, r3, #4
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	9203      	str	r2, [sp, #12]
 8004380:	2b00      	cmp	r3, #0
 8004382:	bfb8      	it	lt
 8004384:	f04f 33ff 	movlt.w	r3, #4294967295
 8004388:	3402      	adds	r4, #2
 800438a:	9305      	str	r3, [sp, #20]
 800438c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004454 <_svfiprintf_r+0x1f8>
 8004390:	7821      	ldrb	r1, [r4, #0]
 8004392:	2203      	movs	r2, #3
 8004394:	4650      	mov	r0, sl
 8004396:	f7fb ff43 	bl	8000220 <memchr>
 800439a:	b138      	cbz	r0, 80043ac <_svfiprintf_r+0x150>
 800439c:	9b04      	ldr	r3, [sp, #16]
 800439e:	eba0 000a 	sub.w	r0, r0, sl
 80043a2:	2240      	movs	r2, #64	; 0x40
 80043a4:	4082      	lsls	r2, r0
 80043a6:	4313      	orrs	r3, r2
 80043a8:	3401      	adds	r4, #1
 80043aa:	9304      	str	r3, [sp, #16]
 80043ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043b0:	4825      	ldr	r0, [pc, #148]	; (8004448 <_svfiprintf_r+0x1ec>)
 80043b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043b6:	2206      	movs	r2, #6
 80043b8:	f7fb ff32 	bl	8000220 <memchr>
 80043bc:	2800      	cmp	r0, #0
 80043be:	d038      	beq.n	8004432 <_svfiprintf_r+0x1d6>
 80043c0:	4b22      	ldr	r3, [pc, #136]	; (800444c <_svfiprintf_r+0x1f0>)
 80043c2:	bb1b      	cbnz	r3, 800440c <_svfiprintf_r+0x1b0>
 80043c4:	9b03      	ldr	r3, [sp, #12]
 80043c6:	3307      	adds	r3, #7
 80043c8:	f023 0307 	bic.w	r3, r3, #7
 80043cc:	3308      	adds	r3, #8
 80043ce:	9303      	str	r3, [sp, #12]
 80043d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043d2:	4433      	add	r3, r6
 80043d4:	9309      	str	r3, [sp, #36]	; 0x24
 80043d6:	e768      	b.n	80042aa <_svfiprintf_r+0x4e>
 80043d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80043dc:	460c      	mov	r4, r1
 80043de:	2001      	movs	r0, #1
 80043e0:	e7a6      	b.n	8004330 <_svfiprintf_r+0xd4>
 80043e2:	2300      	movs	r3, #0
 80043e4:	3401      	adds	r4, #1
 80043e6:	9305      	str	r3, [sp, #20]
 80043e8:	4619      	mov	r1, r3
 80043ea:	f04f 0c0a 	mov.w	ip, #10
 80043ee:	4620      	mov	r0, r4
 80043f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043f4:	3a30      	subs	r2, #48	; 0x30
 80043f6:	2a09      	cmp	r2, #9
 80043f8:	d903      	bls.n	8004402 <_svfiprintf_r+0x1a6>
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0c6      	beq.n	800438c <_svfiprintf_r+0x130>
 80043fe:	9105      	str	r1, [sp, #20]
 8004400:	e7c4      	b.n	800438c <_svfiprintf_r+0x130>
 8004402:	fb0c 2101 	mla	r1, ip, r1, r2
 8004406:	4604      	mov	r4, r0
 8004408:	2301      	movs	r3, #1
 800440a:	e7f0      	b.n	80043ee <_svfiprintf_r+0x192>
 800440c:	ab03      	add	r3, sp, #12
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	462a      	mov	r2, r5
 8004412:	4b0f      	ldr	r3, [pc, #60]	; (8004450 <_svfiprintf_r+0x1f4>)
 8004414:	a904      	add	r1, sp, #16
 8004416:	4638      	mov	r0, r7
 8004418:	f3af 8000 	nop.w
 800441c:	1c42      	adds	r2, r0, #1
 800441e:	4606      	mov	r6, r0
 8004420:	d1d6      	bne.n	80043d0 <_svfiprintf_r+0x174>
 8004422:	89ab      	ldrh	r3, [r5, #12]
 8004424:	065b      	lsls	r3, r3, #25
 8004426:	f53f af2d 	bmi.w	8004284 <_svfiprintf_r+0x28>
 800442a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800442c:	b01d      	add	sp, #116	; 0x74
 800442e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004432:	ab03      	add	r3, sp, #12
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	462a      	mov	r2, r5
 8004438:	4b05      	ldr	r3, [pc, #20]	; (8004450 <_svfiprintf_r+0x1f4>)
 800443a:	a904      	add	r1, sp, #16
 800443c:	4638      	mov	r0, r7
 800443e:	f000 f879 	bl	8004534 <_printf_i>
 8004442:	e7eb      	b.n	800441c <_svfiprintf_r+0x1c0>
 8004444:	080048dc 	.word	0x080048dc
 8004448:	080048e6 	.word	0x080048e6
 800444c:	00000000 	.word	0x00000000
 8004450:	080041a9 	.word	0x080041a9
 8004454:	080048e2 	.word	0x080048e2

08004458 <_printf_common>:
 8004458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800445c:	4616      	mov	r6, r2
 800445e:	4699      	mov	r9, r3
 8004460:	688a      	ldr	r2, [r1, #8]
 8004462:	690b      	ldr	r3, [r1, #16]
 8004464:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004468:	4293      	cmp	r3, r2
 800446a:	bfb8      	it	lt
 800446c:	4613      	movlt	r3, r2
 800446e:	6033      	str	r3, [r6, #0]
 8004470:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004474:	4607      	mov	r7, r0
 8004476:	460c      	mov	r4, r1
 8004478:	b10a      	cbz	r2, 800447e <_printf_common+0x26>
 800447a:	3301      	adds	r3, #1
 800447c:	6033      	str	r3, [r6, #0]
 800447e:	6823      	ldr	r3, [r4, #0]
 8004480:	0699      	lsls	r1, r3, #26
 8004482:	bf42      	ittt	mi
 8004484:	6833      	ldrmi	r3, [r6, #0]
 8004486:	3302      	addmi	r3, #2
 8004488:	6033      	strmi	r3, [r6, #0]
 800448a:	6825      	ldr	r5, [r4, #0]
 800448c:	f015 0506 	ands.w	r5, r5, #6
 8004490:	d106      	bne.n	80044a0 <_printf_common+0x48>
 8004492:	f104 0a19 	add.w	sl, r4, #25
 8004496:	68e3      	ldr	r3, [r4, #12]
 8004498:	6832      	ldr	r2, [r6, #0]
 800449a:	1a9b      	subs	r3, r3, r2
 800449c:	42ab      	cmp	r3, r5
 800449e:	dc26      	bgt.n	80044ee <_printf_common+0x96>
 80044a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044a4:	1e13      	subs	r3, r2, #0
 80044a6:	6822      	ldr	r2, [r4, #0]
 80044a8:	bf18      	it	ne
 80044aa:	2301      	movne	r3, #1
 80044ac:	0692      	lsls	r2, r2, #26
 80044ae:	d42b      	bmi.n	8004508 <_printf_common+0xb0>
 80044b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044b4:	4649      	mov	r1, r9
 80044b6:	4638      	mov	r0, r7
 80044b8:	47c0      	blx	r8
 80044ba:	3001      	adds	r0, #1
 80044bc:	d01e      	beq.n	80044fc <_printf_common+0xa4>
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	6922      	ldr	r2, [r4, #16]
 80044c2:	f003 0306 	and.w	r3, r3, #6
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	bf02      	ittt	eq
 80044ca:	68e5      	ldreq	r5, [r4, #12]
 80044cc:	6833      	ldreq	r3, [r6, #0]
 80044ce:	1aed      	subeq	r5, r5, r3
 80044d0:	68a3      	ldr	r3, [r4, #8]
 80044d2:	bf0c      	ite	eq
 80044d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044d8:	2500      	movne	r5, #0
 80044da:	4293      	cmp	r3, r2
 80044dc:	bfc4      	itt	gt
 80044de:	1a9b      	subgt	r3, r3, r2
 80044e0:	18ed      	addgt	r5, r5, r3
 80044e2:	2600      	movs	r6, #0
 80044e4:	341a      	adds	r4, #26
 80044e6:	42b5      	cmp	r5, r6
 80044e8:	d11a      	bne.n	8004520 <_printf_common+0xc8>
 80044ea:	2000      	movs	r0, #0
 80044ec:	e008      	b.n	8004500 <_printf_common+0xa8>
 80044ee:	2301      	movs	r3, #1
 80044f0:	4652      	mov	r2, sl
 80044f2:	4649      	mov	r1, r9
 80044f4:	4638      	mov	r0, r7
 80044f6:	47c0      	blx	r8
 80044f8:	3001      	adds	r0, #1
 80044fa:	d103      	bne.n	8004504 <_printf_common+0xac>
 80044fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004504:	3501      	adds	r5, #1
 8004506:	e7c6      	b.n	8004496 <_printf_common+0x3e>
 8004508:	18e1      	adds	r1, r4, r3
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	2030      	movs	r0, #48	; 0x30
 800450e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004512:	4422      	add	r2, r4
 8004514:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004518:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800451c:	3302      	adds	r3, #2
 800451e:	e7c7      	b.n	80044b0 <_printf_common+0x58>
 8004520:	2301      	movs	r3, #1
 8004522:	4622      	mov	r2, r4
 8004524:	4649      	mov	r1, r9
 8004526:	4638      	mov	r0, r7
 8004528:	47c0      	blx	r8
 800452a:	3001      	adds	r0, #1
 800452c:	d0e6      	beq.n	80044fc <_printf_common+0xa4>
 800452e:	3601      	adds	r6, #1
 8004530:	e7d9      	b.n	80044e6 <_printf_common+0x8e>
	...

08004534 <_printf_i>:
 8004534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004538:	7e0f      	ldrb	r7, [r1, #24]
 800453a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800453c:	2f78      	cmp	r7, #120	; 0x78
 800453e:	4691      	mov	r9, r2
 8004540:	4680      	mov	r8, r0
 8004542:	460c      	mov	r4, r1
 8004544:	469a      	mov	sl, r3
 8004546:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800454a:	d807      	bhi.n	800455c <_printf_i+0x28>
 800454c:	2f62      	cmp	r7, #98	; 0x62
 800454e:	d80a      	bhi.n	8004566 <_printf_i+0x32>
 8004550:	2f00      	cmp	r7, #0
 8004552:	f000 80d4 	beq.w	80046fe <_printf_i+0x1ca>
 8004556:	2f58      	cmp	r7, #88	; 0x58
 8004558:	f000 80c0 	beq.w	80046dc <_printf_i+0x1a8>
 800455c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004560:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004564:	e03a      	b.n	80045dc <_printf_i+0xa8>
 8004566:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800456a:	2b15      	cmp	r3, #21
 800456c:	d8f6      	bhi.n	800455c <_printf_i+0x28>
 800456e:	a101      	add	r1, pc, #4	; (adr r1, 8004574 <_printf_i+0x40>)
 8004570:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004574:	080045cd 	.word	0x080045cd
 8004578:	080045e1 	.word	0x080045e1
 800457c:	0800455d 	.word	0x0800455d
 8004580:	0800455d 	.word	0x0800455d
 8004584:	0800455d 	.word	0x0800455d
 8004588:	0800455d 	.word	0x0800455d
 800458c:	080045e1 	.word	0x080045e1
 8004590:	0800455d 	.word	0x0800455d
 8004594:	0800455d 	.word	0x0800455d
 8004598:	0800455d 	.word	0x0800455d
 800459c:	0800455d 	.word	0x0800455d
 80045a0:	080046e5 	.word	0x080046e5
 80045a4:	0800460d 	.word	0x0800460d
 80045a8:	0800469f 	.word	0x0800469f
 80045ac:	0800455d 	.word	0x0800455d
 80045b0:	0800455d 	.word	0x0800455d
 80045b4:	08004707 	.word	0x08004707
 80045b8:	0800455d 	.word	0x0800455d
 80045bc:	0800460d 	.word	0x0800460d
 80045c0:	0800455d 	.word	0x0800455d
 80045c4:	0800455d 	.word	0x0800455d
 80045c8:	080046a7 	.word	0x080046a7
 80045cc:	682b      	ldr	r3, [r5, #0]
 80045ce:	1d1a      	adds	r2, r3, #4
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	602a      	str	r2, [r5, #0]
 80045d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045dc:	2301      	movs	r3, #1
 80045de:	e09f      	b.n	8004720 <_printf_i+0x1ec>
 80045e0:	6820      	ldr	r0, [r4, #0]
 80045e2:	682b      	ldr	r3, [r5, #0]
 80045e4:	0607      	lsls	r7, r0, #24
 80045e6:	f103 0104 	add.w	r1, r3, #4
 80045ea:	6029      	str	r1, [r5, #0]
 80045ec:	d501      	bpl.n	80045f2 <_printf_i+0xbe>
 80045ee:	681e      	ldr	r6, [r3, #0]
 80045f0:	e003      	b.n	80045fa <_printf_i+0xc6>
 80045f2:	0646      	lsls	r6, r0, #25
 80045f4:	d5fb      	bpl.n	80045ee <_printf_i+0xba>
 80045f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80045fa:	2e00      	cmp	r6, #0
 80045fc:	da03      	bge.n	8004606 <_printf_i+0xd2>
 80045fe:	232d      	movs	r3, #45	; 0x2d
 8004600:	4276      	negs	r6, r6
 8004602:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004606:	485a      	ldr	r0, [pc, #360]	; (8004770 <_printf_i+0x23c>)
 8004608:	230a      	movs	r3, #10
 800460a:	e012      	b.n	8004632 <_printf_i+0xfe>
 800460c:	682b      	ldr	r3, [r5, #0]
 800460e:	6820      	ldr	r0, [r4, #0]
 8004610:	1d19      	adds	r1, r3, #4
 8004612:	6029      	str	r1, [r5, #0]
 8004614:	0605      	lsls	r5, r0, #24
 8004616:	d501      	bpl.n	800461c <_printf_i+0xe8>
 8004618:	681e      	ldr	r6, [r3, #0]
 800461a:	e002      	b.n	8004622 <_printf_i+0xee>
 800461c:	0641      	lsls	r1, r0, #25
 800461e:	d5fb      	bpl.n	8004618 <_printf_i+0xe4>
 8004620:	881e      	ldrh	r6, [r3, #0]
 8004622:	4853      	ldr	r0, [pc, #332]	; (8004770 <_printf_i+0x23c>)
 8004624:	2f6f      	cmp	r7, #111	; 0x6f
 8004626:	bf0c      	ite	eq
 8004628:	2308      	moveq	r3, #8
 800462a:	230a      	movne	r3, #10
 800462c:	2100      	movs	r1, #0
 800462e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004632:	6865      	ldr	r5, [r4, #4]
 8004634:	60a5      	str	r5, [r4, #8]
 8004636:	2d00      	cmp	r5, #0
 8004638:	bfa2      	ittt	ge
 800463a:	6821      	ldrge	r1, [r4, #0]
 800463c:	f021 0104 	bicge.w	r1, r1, #4
 8004640:	6021      	strge	r1, [r4, #0]
 8004642:	b90e      	cbnz	r6, 8004648 <_printf_i+0x114>
 8004644:	2d00      	cmp	r5, #0
 8004646:	d04b      	beq.n	80046e0 <_printf_i+0x1ac>
 8004648:	4615      	mov	r5, r2
 800464a:	fbb6 f1f3 	udiv	r1, r6, r3
 800464e:	fb03 6711 	mls	r7, r3, r1, r6
 8004652:	5dc7      	ldrb	r7, [r0, r7]
 8004654:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004658:	4637      	mov	r7, r6
 800465a:	42bb      	cmp	r3, r7
 800465c:	460e      	mov	r6, r1
 800465e:	d9f4      	bls.n	800464a <_printf_i+0x116>
 8004660:	2b08      	cmp	r3, #8
 8004662:	d10b      	bne.n	800467c <_printf_i+0x148>
 8004664:	6823      	ldr	r3, [r4, #0]
 8004666:	07de      	lsls	r6, r3, #31
 8004668:	d508      	bpl.n	800467c <_printf_i+0x148>
 800466a:	6923      	ldr	r3, [r4, #16]
 800466c:	6861      	ldr	r1, [r4, #4]
 800466e:	4299      	cmp	r1, r3
 8004670:	bfde      	ittt	le
 8004672:	2330      	movle	r3, #48	; 0x30
 8004674:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004678:	f105 35ff 	addle.w	r5, r5, #4294967295
 800467c:	1b52      	subs	r2, r2, r5
 800467e:	6122      	str	r2, [r4, #16]
 8004680:	f8cd a000 	str.w	sl, [sp]
 8004684:	464b      	mov	r3, r9
 8004686:	aa03      	add	r2, sp, #12
 8004688:	4621      	mov	r1, r4
 800468a:	4640      	mov	r0, r8
 800468c:	f7ff fee4 	bl	8004458 <_printf_common>
 8004690:	3001      	adds	r0, #1
 8004692:	d14a      	bne.n	800472a <_printf_i+0x1f6>
 8004694:	f04f 30ff 	mov.w	r0, #4294967295
 8004698:	b004      	add	sp, #16
 800469a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800469e:	6823      	ldr	r3, [r4, #0]
 80046a0:	f043 0320 	orr.w	r3, r3, #32
 80046a4:	6023      	str	r3, [r4, #0]
 80046a6:	4833      	ldr	r0, [pc, #204]	; (8004774 <_printf_i+0x240>)
 80046a8:	2778      	movs	r7, #120	; 0x78
 80046aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	6829      	ldr	r1, [r5, #0]
 80046b2:	061f      	lsls	r7, r3, #24
 80046b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80046b8:	d402      	bmi.n	80046c0 <_printf_i+0x18c>
 80046ba:	065f      	lsls	r7, r3, #25
 80046bc:	bf48      	it	mi
 80046be:	b2b6      	uxthmi	r6, r6
 80046c0:	07df      	lsls	r7, r3, #31
 80046c2:	bf48      	it	mi
 80046c4:	f043 0320 	orrmi.w	r3, r3, #32
 80046c8:	6029      	str	r1, [r5, #0]
 80046ca:	bf48      	it	mi
 80046cc:	6023      	strmi	r3, [r4, #0]
 80046ce:	b91e      	cbnz	r6, 80046d8 <_printf_i+0x1a4>
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	f023 0320 	bic.w	r3, r3, #32
 80046d6:	6023      	str	r3, [r4, #0]
 80046d8:	2310      	movs	r3, #16
 80046da:	e7a7      	b.n	800462c <_printf_i+0xf8>
 80046dc:	4824      	ldr	r0, [pc, #144]	; (8004770 <_printf_i+0x23c>)
 80046de:	e7e4      	b.n	80046aa <_printf_i+0x176>
 80046e0:	4615      	mov	r5, r2
 80046e2:	e7bd      	b.n	8004660 <_printf_i+0x12c>
 80046e4:	682b      	ldr	r3, [r5, #0]
 80046e6:	6826      	ldr	r6, [r4, #0]
 80046e8:	6961      	ldr	r1, [r4, #20]
 80046ea:	1d18      	adds	r0, r3, #4
 80046ec:	6028      	str	r0, [r5, #0]
 80046ee:	0635      	lsls	r5, r6, #24
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	d501      	bpl.n	80046f8 <_printf_i+0x1c4>
 80046f4:	6019      	str	r1, [r3, #0]
 80046f6:	e002      	b.n	80046fe <_printf_i+0x1ca>
 80046f8:	0670      	lsls	r0, r6, #25
 80046fa:	d5fb      	bpl.n	80046f4 <_printf_i+0x1c0>
 80046fc:	8019      	strh	r1, [r3, #0]
 80046fe:	2300      	movs	r3, #0
 8004700:	6123      	str	r3, [r4, #16]
 8004702:	4615      	mov	r5, r2
 8004704:	e7bc      	b.n	8004680 <_printf_i+0x14c>
 8004706:	682b      	ldr	r3, [r5, #0]
 8004708:	1d1a      	adds	r2, r3, #4
 800470a:	602a      	str	r2, [r5, #0]
 800470c:	681d      	ldr	r5, [r3, #0]
 800470e:	6862      	ldr	r2, [r4, #4]
 8004710:	2100      	movs	r1, #0
 8004712:	4628      	mov	r0, r5
 8004714:	f7fb fd84 	bl	8000220 <memchr>
 8004718:	b108      	cbz	r0, 800471e <_printf_i+0x1ea>
 800471a:	1b40      	subs	r0, r0, r5
 800471c:	6060      	str	r0, [r4, #4]
 800471e:	6863      	ldr	r3, [r4, #4]
 8004720:	6123      	str	r3, [r4, #16]
 8004722:	2300      	movs	r3, #0
 8004724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004728:	e7aa      	b.n	8004680 <_printf_i+0x14c>
 800472a:	6923      	ldr	r3, [r4, #16]
 800472c:	462a      	mov	r2, r5
 800472e:	4649      	mov	r1, r9
 8004730:	4640      	mov	r0, r8
 8004732:	47d0      	blx	sl
 8004734:	3001      	adds	r0, #1
 8004736:	d0ad      	beq.n	8004694 <_printf_i+0x160>
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	079b      	lsls	r3, r3, #30
 800473c:	d413      	bmi.n	8004766 <_printf_i+0x232>
 800473e:	68e0      	ldr	r0, [r4, #12]
 8004740:	9b03      	ldr	r3, [sp, #12]
 8004742:	4298      	cmp	r0, r3
 8004744:	bfb8      	it	lt
 8004746:	4618      	movlt	r0, r3
 8004748:	e7a6      	b.n	8004698 <_printf_i+0x164>
 800474a:	2301      	movs	r3, #1
 800474c:	4632      	mov	r2, r6
 800474e:	4649      	mov	r1, r9
 8004750:	4640      	mov	r0, r8
 8004752:	47d0      	blx	sl
 8004754:	3001      	adds	r0, #1
 8004756:	d09d      	beq.n	8004694 <_printf_i+0x160>
 8004758:	3501      	adds	r5, #1
 800475a:	68e3      	ldr	r3, [r4, #12]
 800475c:	9903      	ldr	r1, [sp, #12]
 800475e:	1a5b      	subs	r3, r3, r1
 8004760:	42ab      	cmp	r3, r5
 8004762:	dcf2      	bgt.n	800474a <_printf_i+0x216>
 8004764:	e7eb      	b.n	800473e <_printf_i+0x20a>
 8004766:	2500      	movs	r5, #0
 8004768:	f104 0619 	add.w	r6, r4, #25
 800476c:	e7f5      	b.n	800475a <_printf_i+0x226>
 800476e:	bf00      	nop
 8004770:	080048ed 	.word	0x080048ed
 8004774:	080048fe 	.word	0x080048fe

08004778 <memmove>:
 8004778:	4288      	cmp	r0, r1
 800477a:	b510      	push	{r4, lr}
 800477c:	eb01 0402 	add.w	r4, r1, r2
 8004780:	d902      	bls.n	8004788 <memmove+0x10>
 8004782:	4284      	cmp	r4, r0
 8004784:	4623      	mov	r3, r4
 8004786:	d807      	bhi.n	8004798 <memmove+0x20>
 8004788:	1e43      	subs	r3, r0, #1
 800478a:	42a1      	cmp	r1, r4
 800478c:	d008      	beq.n	80047a0 <memmove+0x28>
 800478e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004792:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004796:	e7f8      	b.n	800478a <memmove+0x12>
 8004798:	4402      	add	r2, r0
 800479a:	4601      	mov	r1, r0
 800479c:	428a      	cmp	r2, r1
 800479e:	d100      	bne.n	80047a2 <memmove+0x2a>
 80047a0:	bd10      	pop	{r4, pc}
 80047a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047aa:	e7f7      	b.n	800479c <memmove+0x24>

080047ac <_sbrk_r>:
 80047ac:	b538      	push	{r3, r4, r5, lr}
 80047ae:	4d06      	ldr	r5, [pc, #24]	; (80047c8 <_sbrk_r+0x1c>)
 80047b0:	2300      	movs	r3, #0
 80047b2:	4604      	mov	r4, r0
 80047b4:	4608      	mov	r0, r1
 80047b6:	602b      	str	r3, [r5, #0]
 80047b8:	f7fc fb54 	bl	8000e64 <_sbrk>
 80047bc:	1c43      	adds	r3, r0, #1
 80047be:	d102      	bne.n	80047c6 <_sbrk_r+0x1a>
 80047c0:	682b      	ldr	r3, [r5, #0]
 80047c2:	b103      	cbz	r3, 80047c6 <_sbrk_r+0x1a>
 80047c4:	6023      	str	r3, [r4, #0]
 80047c6:	bd38      	pop	{r3, r4, r5, pc}
 80047c8:	20000304 	.word	0x20000304

080047cc <memcpy>:
 80047cc:	440a      	add	r2, r1
 80047ce:	4291      	cmp	r1, r2
 80047d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80047d4:	d100      	bne.n	80047d8 <memcpy+0xc>
 80047d6:	4770      	bx	lr
 80047d8:	b510      	push	{r4, lr}
 80047da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047e2:	4291      	cmp	r1, r2
 80047e4:	d1f9      	bne.n	80047da <memcpy+0xe>
 80047e6:	bd10      	pop	{r4, pc}

080047e8 <_realloc_r>:
 80047e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047ec:	4680      	mov	r8, r0
 80047ee:	4614      	mov	r4, r2
 80047f0:	460e      	mov	r6, r1
 80047f2:	b921      	cbnz	r1, 80047fe <_realloc_r+0x16>
 80047f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047f8:	4611      	mov	r1, r2
 80047fa:	f7ff bc49 	b.w	8004090 <_malloc_r>
 80047fe:	b92a      	cbnz	r2, 800480c <_realloc_r+0x24>
 8004800:	f7ff fbda 	bl	8003fb8 <_free_r>
 8004804:	4625      	mov	r5, r4
 8004806:	4628      	mov	r0, r5
 8004808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800480c:	f000 f81b 	bl	8004846 <_malloc_usable_size_r>
 8004810:	4284      	cmp	r4, r0
 8004812:	4607      	mov	r7, r0
 8004814:	d802      	bhi.n	800481c <_realloc_r+0x34>
 8004816:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800481a:	d812      	bhi.n	8004842 <_realloc_r+0x5a>
 800481c:	4621      	mov	r1, r4
 800481e:	4640      	mov	r0, r8
 8004820:	f7ff fc36 	bl	8004090 <_malloc_r>
 8004824:	4605      	mov	r5, r0
 8004826:	2800      	cmp	r0, #0
 8004828:	d0ed      	beq.n	8004806 <_realloc_r+0x1e>
 800482a:	42bc      	cmp	r4, r7
 800482c:	4622      	mov	r2, r4
 800482e:	4631      	mov	r1, r6
 8004830:	bf28      	it	cs
 8004832:	463a      	movcs	r2, r7
 8004834:	f7ff ffca 	bl	80047cc <memcpy>
 8004838:	4631      	mov	r1, r6
 800483a:	4640      	mov	r0, r8
 800483c:	f7ff fbbc 	bl	8003fb8 <_free_r>
 8004840:	e7e1      	b.n	8004806 <_realloc_r+0x1e>
 8004842:	4635      	mov	r5, r6
 8004844:	e7df      	b.n	8004806 <_realloc_r+0x1e>

08004846 <_malloc_usable_size_r>:
 8004846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800484a:	1f18      	subs	r0, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	bfbc      	itt	lt
 8004850:	580b      	ldrlt	r3, [r1, r0]
 8004852:	18c0      	addlt	r0, r0, r3
 8004854:	4770      	bx	lr
	...

08004858 <_init>:
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485a:	bf00      	nop
 800485c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485e:	bc08      	pop	{r3}
 8004860:	469e      	mov	lr, r3
 8004862:	4770      	bx	lr

08004864 <_fini>:
 8004864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004866:	bf00      	nop
 8004868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486a:	bc08      	pop	{r3}
 800486c:	469e      	mov	lr, r3
 800486e:	4770      	bx	lr
